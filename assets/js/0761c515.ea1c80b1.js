"use strict";(self.webpackChunksailpoint_developer_portal=self.webpackChunksailpoint_developer_portal||[]).push([["505589"],{256076:function(n,e,t){t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>c,metadata:()=>o,toc:()=>u});var o=t(866964),a=t(785893),l=t(250065),i=t(292415),r=t(308193);let c={id:"udk-accounts-list",title:"Implementing the accounts component",pagination_label:"UDK",sidebar_label:"Accounts Component",sidebar_position:2,sidebar_class_name:"rudk",keywords:["UI","development","kit"],description:"Develop custom user interfaces.",slug:"/tools/ui-development-kit/accounts-list",tags:["UI"]},s=void 0,d={},u=[{value:"Overview",id:"overview",level:2},{value:"Create the accounts component",id:"create-the-accounts-component",level:2},{value:"Enable the accounts component",id:"enable-the-accounts-component",level:2},{value:"Get account data",id:"get-account-data",level:2},{value:"Pagination",id:"pagination",level:2},{value:"Viewing Details",id:"viewing-details",level:2},{value:"Sort and filter",id:"sort-and-filter",level:2},{value:"Error handling",id:"error-handling",level:2},{value:"Discuss",id:"discuss",level:2}];function m(n){let e={a:"a",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.a)(),...n.components},{Details:o}=e;return o||function(n,e){throw Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(e.p,{children:"This guide will walk you through the process of implementing a new component that lists all the accounts in your tenant. This serves as an example you can use to learn how to implement many different types of custom UI pages."}),"\n",(0,a.jsxs)(e.p,{children:["This guide is a continuation of ",(0,a.jsx)(e.a,{href:"./getting-started",children:"Getting Started"}),". At the end of this guide, you will be able to do the following:"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"List all accounts in your tenant"}),"\n",(0,a.jsx)(e.li,{children:"Paginate accounts by page limits of 10, 25, 50, 100"}),"\n",(0,a.jsx)(e.li,{children:"Click through each page of results"}),"\n",(0,a.jsx)(e.li,{children:"View the JSON response of the account from your tenant"}),"\n",(0,a.jsxs)(e.li,{children:["Sort the results, using the sort syntax on the ",(0,a.jsx)(e.a,{href:"https://developer.sailpoint.com/docs/api/v3/list-accounts",children:"List Accounts endpoint"}),"."]}),"\n",(0,a.jsxs)(e.li,{children:["Filter the results, using the filter syntax on the ",(0,a.jsx)(e.a,{href:"https://developer.sailpoint.com/docs/api/v3/list-accounts",children:"List Accounts endpoint"}),"."]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"create-the-accounts-component",children:"Create the accounts component"}),"\n",(0,a.jsx)(e.p,{children:"Create the accounts component by running the following command in the root of the project:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"npm run generate:component accounts\n"})}),"\n",(0,a.jsxs)(e.p,{children:["This command will create a new folder in the ",(0,a.jsx)(e.code,{children:"projects/sailpoint-components/src/lib"})," directory with the name ",(0,a.jsx)(e.code,{children:"accounts"}),". It will also create the following files:"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.code,{children:"accounts.component.html"})}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.code,{children:"accounts.component.ts"})}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.code,{children:"accounts.component.scss"})}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.code,{children:"accounts.component.spec.ts"})}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"The output will look similar to this:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"tyler.mairose ~/development/ui-development-kit [main] $ npm run generate:component accounts\n\n> sailpoint-ui-development-kit@1.0.0 generate:component\n> node scripts/generate-component.js accounts\n\n\uD83D\uDE80 Generating component: accounts\n\u2705 Created directory: /Users/tyler.mairose/development/ui-development-kit/projects/sailpoint-components/src/lib/accounts\n\u2705 Created: accounts.component.ts\n\u2705 Created: accounts.component.html\n\u2705 Created: accounts.component.scss\n\u2705 Created: accounts.component.spec.ts\n\u2705 Updated: component-selector.service.ts\n\u2705 Updated: app.routes.ts\n\u2705 Updated: app.component.html\n\u2705 Updated: public-api.ts\n\uD83C\uDF89 Component 'accounts' generated successfully!\n\uD83D\uDCDD Next steps:\n   1. Build the project: npm run start\n   2. Enable the component in the component selector\n   3. Implement your component logic in: /Users/tyler.mairose/development/ui-development-kit/projects/sailpoint-components/src/lib/accounts\n"})}),"\n",(0,a.jsx)(e.h2,{id:"enable-the-accounts-component",children:"Enable the accounts component"}),"\n",(0,a.jsx)(e.p,{children:'To enable the accounts component, open the component selector and toggle the accounts component on. You can do this by clicking on the "Component Selector" tab in the sidebar.'}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.img,{alt:"enable account component",src:t(674763).Z+"",width:"3432",height:"1926"})}),"\n",(0,a.jsx)(e.p,{children:"You will see the accounts component in the list of available components. Toggle the accounts component on to enable it."}),"\n",(0,a.jsx)(e.p,{children:"Once enabled you will see the accounts component in the sidebar. You can click on it to navigate to the accounts page."}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.img,{alt:"accounts page",src:t(649384).Z+"",width:"3444",height:"1844"})}),"\n",(0,a.jsx)(e.h2,{id:"get-account-data",children:"Get account data"}),"\n",(0,a.jsxs)(e.p,{children:["The first thing your new component needs to do is get the account data to show. You can implement this by using the ",(0,a.jsx)(e.a,{href:"https://developer.sailpoint.com/docs/api/v2025/list-accounts",children:"List Accounts endpoint"}),"."]}),"\n",(0,a.jsxs)(e.p,{children:["To do so, add this logic to the typescript file at ",(0,a.jsx)(e.code,{children:"projects/sailpoint-components/src/lib/accounts/accounts.component.ts"}),":"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"import { CommonModule } from '@angular/common';\nimport { Component, OnInit } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { SailPointSDKService } from '../sailpoint-sdk.service';\nimport { AccountV2025 } from 'sailpoint-api-client';\n\n@Component({\n  selector: 'app-accounts',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatCardModule,\n    MatIconModule,\n    MatTableModule,\n    MatToolbarModule,\n    MatProgressSpinnerModule,\n    MatPaginatorModule\n  ],\n  templateUrl: './accounts.component.html',\n  styleUrl: './accounts.component.scss',\n})\nexport class AccountsComponent implements OnInit {\n  title = 'Accounts';\n  loading = true;\n  accounts: AccountV2025[] = [];\n  displayedColumns: string[] = ['id', 'name', 'nativeIdentity', 'sourceId', 'disabled', 'locked', 'actions'];\n\n  constructor(private sdk: SailPointSDKService) {}\n\n  ngOnInit() {\n    // Load initial data\n    void this.loadAccounts();\n  }\n\n  private async loadAccounts() {\n    this.loading = true;\n    try {\n      const response = await this.sdk.listAccounts();\n      this.accounts = response.data as AccountV2025[];\n      console.log('Loaded accounts:', this.accounts);\n    } catch (error) {\n      console.error('Error loading accounts:', error);\n    } finally {\n      this.loading = false;\n    }\n  }\n\n  viewAccount(account: AccountV2025): void {\n    console.log('Viewing account:', account);\n  }\n}\n\n\n"})}),"\n",(0,a.jsx)(e.p,{children:"Return to your accounts list page. In the electron app, click View -> Toggle Developer Tools. You will see the response containing the accounts in the console after the page loads."}),"\n",(0,a.jsx)(e.p,{children:"Now that you have your account data, you need to display the data. You can add a table to the UI and display your results."}),"\n",(0,a.jsxs)(e.p,{children:["To do so, add this code to ",(0,a.jsx)(e.code,{children:"\\accounts\\accounts.component.html"}),":"]}),"\n",(0,a.jsxs)(o,{children:[(0,a.jsx)("summary",{children:"Show code"}),(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-html",children:'<div class="accounts-container">\n  <mat-toolbar color="primary">\n    <mat-icon>account_box</mat-icon>\n    <span class="toolbar-title">{{ title }}</span>\n  </mat-toolbar>\n\n  <div class="content">\n    \x3c!-- Loading spinner --\x3e\n    <div *ngIf="loading" class="spinner-container">\n      <mat-spinner diameter="75"></mat-spinner>\n    </div>\n\n    <div *ngIf="!loading" class="table-container">\n      \x3c!-- Accounts table --\x3e\n      <table mat-table [dataSource]="accounts" class="mat-elevation-z8" *ngIf="accounts.length">\n        \x3c!-- ID Column --\x3e\n        <ng-container matColumnDef="id">\n          <th mat-header-cell *matHeaderCellDef>ID</th>\n          <td mat-cell *matCellDef="let account">{{ account.id }}</td>\n        </ng-container>\n\n        \x3c!-- Name Column --\x3e\n        <ng-container matColumnDef="name">\n          <th mat-header-cell *matHeaderCellDef>Name</th>\n          <td mat-cell *matCellDef="let account">{{ account.name || \'-\' }}</td>\n        </ng-container>\n\n        \x3c!-- Native Identity Column --\x3e\n        <ng-container matColumnDef="nativeIdentity">\n          <th mat-header-cell *matHeaderCellDef>Native Identity</th>\n          <td mat-cell *matCellDef="let account">{{ account.nativeIdentity || \'-\' }}</td>\n        </ng-container>\n\n        \x3c!-- Source ID Column --\x3e\n        <ng-container matColumnDef="sourceId">\n          <th mat-header-cell *matHeaderCellDef>Source</th>\n          <td mat-cell *matCellDef="let account">{{ account.sourceId || \'-\' }}</td>\n        </ng-container>\n\n        \x3c!-- Disabled Column --\x3e\n        <ng-container matColumnDef="disabled">\n          <th mat-header-cell *matHeaderCellDef>Disabled</th>\n          <td mat-cell *matCellDef="let account">\n            <mat-icon *ngIf="account.disabled">check_circle</mat-icon>\n            <mat-icon *ngIf="!account.disabled">cancel</mat-icon>\n          </td>\n        </ng-container>\n\n        \x3c!-- Locked Column --\x3e\n        <ng-container matColumnDef="locked">\n          <th mat-header-cell *matHeaderCellDef>Locked</th>\n          <td mat-cell *matCellDef="let account">\n            <mat-icon *ngIf="account.locked">lock</mat-icon>\n            <mat-icon *ngIf="!account.locked">lock_open</mat-icon>\n          </td>\n        </ng-container>\n\n        \x3c!-- Actions Column --\x3e\n        <ng-container matColumnDef="actions">\n          <th mat-header-cell *matHeaderCellDef>Actions</th>\n          <td mat-cell *matCellDef="let account">\n            <button mat-button color="primary" (click)="viewAccount(account)">\n              <mat-icon>visibility</mat-icon> View\n            </button>\n          </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>\n        <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>\n      </table>\n\n      \x3c!-- No data message --\x3e\n      <div *ngIf="accounts.length === 0" class="no-data-message">\n        No accounts found.\n      </div>\n    </div>\n  </div>\n</div>\n\n\n'})})]}),"\n",(0,a.jsxs)(e.p,{children:["Save the ",(0,a.jsx)(e.code,{children:"\\accounts\\accounts.component.html"})," file and return to the accounts list page. You will see up to 250 accounts in the table."]}),"\n",(0,a.jsx)(e.h2,{id:"pagination",children:"Pagination"}),"\n",(0,a.jsx)(e.p,{children:"You will likely have more than 250 accounts in your tenant. To handle more than 250 accounts, you must implement pagination on your front end page.\nPagination is the process of paging through your records. With pagination, you can handle 1000 accounts in 4 pages of 250, for example."}),"\n",(0,a.jsx)(e.p,{children:"To implement pagination, add the following code. This code allows you to paginate accounts in groups of 5, 10, 50, 100 and 250, depending on your requirement:"}),"\n",(0,a.jsx)(e.p,{children:"The highlighted portions of the code are the changes made to the previous code to allow pagination."}),"\n","\n",(0,a.jsxs)(r.Z,{children:[(0,a.jsx)(i.default,{value:"accounts_page",label:"\\accounts\\accounts.component.html",default:!0,children:(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-html",children:'<div class="accounts-container">\n  <mat-toolbar color="primary">\n    <mat-icon>account_box</mat-icon>\n    <span class="toolbar-title">{{ title }}</span>\n  </mat-toolbar>\n\n  <div class="content">\n    \x3c!-- Loading spinner --\x3e\n    <div *ngIf="loading" class="spinner-container">\n      <mat-spinner diameter="75"></mat-spinner>\n    </div>\n\n    <div *ngIf="!loading" class="table-container">\n      \x3c!-- Accounts table --\x3e\n      <table mat-table [dataSource]="accounts" class="mat-elevation-z8" *ngIf="accounts.length">\n        \x3c!-- ID Column --\x3e\n        <ng-container matColumnDef="id">\n          <th mat-header-cell *matHeaderCellDef>ID</th>\n          <td mat-cell *matCellDef="let account">{{ account.id }}</td>\n        </ng-container>\n\n        \x3c!-- Name Column --\x3e\n        <ng-container matColumnDef="name">\n          <th mat-header-cell *matHeaderCellDef>Name</th>\n          <td mat-cell *matCellDef="let account">{{ account.name || \'-\' }}</td>\n        </ng-container>\n\n        \x3c!-- Native Identity Column --\x3e\n        <ng-container matColumnDef="nativeIdentity">\n          <th mat-header-cell *matHeaderCellDef>Native Identity</th>\n          <td mat-cell *matCellDef="let account">{{ account.nativeIdentity || \'-\' }}</td>\n        </ng-container>\n\n        \x3c!-- Source ID Column --\x3e\n        <ng-container matColumnDef="sourceId">\n          <th mat-header-cell *matHeaderCellDef>Source</th>\n          <td mat-cell *matCellDef="let account">{{ account.sourceId || \'-\' }}</td>\n        </ng-container>\n\n        \x3c!-- Disabled Column --\x3e\n        <ng-container matColumnDef="disabled">\n          <th mat-header-cell *matHeaderCellDef>Disabled</th>\n          <td mat-cell *matCellDef="let account">\n            <mat-icon *ngIf="account.disabled">check_circle</mat-icon>\n            <mat-icon *ngIf="!account.disabled">cancel</mat-icon>\n          </td>\n        </ng-container>\n\n        \x3c!-- Locked Column --\x3e\n        <ng-container matColumnDef="locked">\n          <th mat-header-cell *matHeaderCellDef>Locked</th>\n          <td mat-cell *matCellDef="let account">\n            <mat-icon *ngIf="account.locked">lock</mat-icon>\n            <mat-icon *ngIf="!account.locked">lock_open</mat-icon>\n          </td>\n        </ng-container>\n\n        \x3c!-- Actions Column --\x3e\n        <ng-container matColumnDef="actions">\n          <th mat-header-cell *matHeaderCellDef>Actions</th>\n          <td mat-cell *matCellDef="let account">\n            <button mat-button color="primary" (click)="viewAccount(account)">\n              <mat-icon>visibility</mat-icon> View\n            </button>\n          </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>\n        <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>\n      </table>\n\n  // highlight-start\n      \x3c!-- Paginator --\x3e\n      <mat-paginator\n        [length]="totalCount"\n        [pageSize]="pageSize"\n        [pageIndex]="pageIndex"\n        [pageSizeOptions]="[5, 10, 25, 100, 250]"\n        (page)="onPageChange($event)"\n        showFirstLastButtons\n        aria-label="Select page of accounts">\n      </mat-paginator>\n  // highlight-end\n\n      \x3c!-- No data message --\x3e\n      <div *ngIf="accounts.length === 0" class="no-data-message">\n        No accounts found.\n      </div>\n    </div>\n  </div>\n</div>\n\n'})})}),(0,a.jsx)(i.default,{value:"accounts_list_server",label:"\\accounts\\accounts.component.ts",children:(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"import { CommonModule } from '@angular/common';\n// highlight-next-line\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\n// highlight-next-line\nimport { MatPaginator, MatPaginatorModule, PageEvent } from '@angular/material/paginator';\nimport { SailPointSDKService } from '../sailpoint-sdk.service';\nimport { AccountV2025 } from 'sailpoint-api-client';\n\n@Component({\n  selector: 'app-accounts',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatCardModule,\n    MatIconModule,\n    MatTableModule,\n    MatToolbarModule,\n    MatProgressSpinnerModule,\n    MatPaginatorModule\n  ],\n  templateUrl: './accounts.component.html',\n  styleUrl: './accounts.component.scss',\n})\nexport class AccountsComponent implements OnInit {\n  title = 'Accounts';\n  loading = true;\n  accounts: AccountV2025[] = [];\n  displayedColumns: string[] = ['id', 'name', 'nativeIdentity', 'sourceId', 'disabled', 'locked', 'actions'];\n  \n  // highlight-start\n\n  // Pagination settings\n  pageSize = 10;\n  pageIndex = 0;\n  totalCount = 0;\n\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n\n  // highlight-end\n\n\n  constructor(private sdk: SailPointSDKService) {}\n\n  ngOnInit() {\n    // Load initial data\n    void this.loadAccounts();\n  }\n\n  async loadAccounts() {\n    // highlight-start\n    // Setup request for paged account results\n    const request = {\n      offset: this.pageIndex * this.pageSize,\n      limit: this.pageSize,\n      count: true,\n      sorters: undefined,\n      filters: undefined\n    };\n\n    this.loading = true;\n    try {\n      const response = await this.sdk.listAccounts(request);\n      this.accounts = response.data;\n      \n      // Get total count from headers if available\n      let count: number | undefined;\n      if (response.headers && typeof (response.headers as any).get === 'function') {\n        const headerValue = (response.headers as any).get('X-Total-Count');\n        count = headerValue ? Number(headerValue) : undefined;\n      } else if (response.headers && typeof (response.headers as any)['x-total-count'] !== 'undefined') {\n        count = Number((response.headers as any)['x-total-count']);\n      }\n      \n      this.totalCount = count ?? 250; // Default to 250 if count not available\n      console.log('Loaded accounts:', this.accounts);\n    // highlight-end\n    } catch (error) {\n      console.error('Error loading accounts:', error);\n    } finally {\n      this.loading = false;\n    }\n  }\n\n  // highlight-start\n  // Handle page change events\n  onPageChange(event: PageEvent) {\n    this.pageSize = event.pageSize;\n    this.pageIndex = event.pageIndex;\n    void this.loadAccounts();\n  }\n  // highlight-end\n\n  viewAccount(account: AccountV2025): void {\n    console.log('Viewing account:', account);\n  }\n}\n\n\n"})})})]}),"\n",(0,a.jsx)(e.p,{children:"Return to the accounts list page. You will see the paginator at the bottom of the page. You can now paginate through the accounts in your tenant."}),"\n",(0,a.jsx)(e.h2,{id:"viewing-details",children:"Viewing Details"}),"\n",(0,a.jsx)(e.p,{children:"In this step, we will create a detail view to see the raw json object that represents the underlying data."}),"\n",(0,a.jsxs)(e.p,{children:["To do this, we will implement the already existing ",(0,a.jsx)(e.code,{children:"viewAccount"})," method to use the ",(0,a.jsx)(e.code,{children:"GenericDialogComponent"})," that comes with the UI Development Kit. The only thing to change here is just to implement the method as seen below:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"  viewAccount(account: AccountV2025): void {\n    // Format account details as JSON string with indentation\n    const details = JSON.stringify(account, null, 2);\n    \n    // Open dialog with account details\n    this.dialog.open(GenericDialogComponent, {\n      minWidth: '800px',\n      data: {\n        title: `Account Details: ${account.name || account.nativeIdentity || account.id}`,\n        message: details\n      }\n    });\n  }\n"})}),"\n",(0,a.jsx)(e.p,{children:"Note that we also need to add the dialog to the constructor:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"constructor(private sdk: SailPointSDKService, private dialog: MatDialog) {}\n"})}),"\n",(0,a.jsx)(e.p,{children:"And also add the imports:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"import { MatDialog } from '@angular/material/dialog';\nimport { GenericDialogComponent } from '../generic-dialog/generic-dialog.component';\n"})}),"\n",(0,a.jsx)(e.h2,{id:"sort-and-filter",children:"Sort and filter"}),"\n",(0,a.jsxs)(e.p,{children:["The last part of the page we may want to implement would be sorting and filtering.\nWith this implementation, the ",(0,a.jsx)(e.code,{children:"this.filterForm.valueChanges"})," event and ",(0,a.jsx)(e.code,{children:"onSortChange"})," event will cause the page to reload the accounts with the new sort or filter applied."]}),"\n",(0,a.jsx)(e.p,{children:"The completed component and all code can be seen below:"}),"\n",(0,a.jsxs)(r.Z,{children:[(0,a.jsx)(i.default,{value:"accounts_page",label:"\\accounts\\accounts.component.html",default:!0,children:(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-html",children:'<div class="accounts-container">\n  <mat-toolbar color="primary">\n    <mat-icon>account_box</mat-icon>\n    <span class="toolbar-title">{{ title }}</span>\n  </mat-toolbar>\n\n  <div class="content">\n    \x3c!-- Filter panel --\x3e\n    <div class="filter-panel mat-elevation-z1">\n      <form [formGroup]="filterForm">\n        <div class="filter-row">\n          <mat-form-field class="filter-field">\n            <mat-label>Name</mat-label>\n            <input matInput placeholder="Filter by name" formControlName="name">\n          </mat-form-field>\n          \n          <mat-form-field class="filter-field">\n            <mat-label>Source ID</mat-label>\n            <input matInput placeholder="Filter by source ID" formControlName="sourceId">\n          </mat-form-field>\n          \n          <mat-form-field class="filter-field">\n            <mat-label>Correlated</mat-label>\n            <mat-select formControlName="correlated">\n              <mat-option *ngFor="let option of correlatedOptions" [value]="option.value">\n                {{option.label}}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n          \n          <button mat-stroked-button color="primary" (click)="resetFilters()">\n            <mat-icon>clear</mat-icon> Clear\n          </button>\n        </div>\n      </form>\n    </div>\n    \n    \x3c!-- Loading spinner --\x3e\n    <div *ngIf="loading" class="spinner-container">\n      <mat-spinner diameter="75"></mat-spinner>\n    </div>\n\n    <div *ngIf="!loading" class="table-container">\n      \x3c!-- Accounts table --\x3e\n      <table mat-table [dataSource]="accounts" matSort [matSortActive]="sortActive" \n             [matSortDirection]="sortDirection" (matSortChange)="onSortChange($event)" \n             class="mat-elevation-z8" *ngIf="accounts.length">\n        \x3c!-- ID Column --\x3e\n        <ng-container matColumnDef="id">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>ID</th>\n          <td mat-cell *matCellDef="let account">{{ account.id }}</td>\n        </ng-container>\n\n        \x3c!-- Name Column --\x3e\n        <ng-container matColumnDef="name">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\n          <td mat-cell *matCellDef="let account">{{ account.name || \'-\' }}</td>\n        </ng-container>\n\n        \x3c!-- Native Identity Column --\x3e\n        <ng-container matColumnDef="nativeIdentity">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Native Identity</th>\n          <td mat-cell *matCellDef="let account">{{ account.nativeIdentity || \'-\' }}</td>\n        </ng-container>\n\n        \x3c!-- Source ID Column --\x3e\n        <ng-container matColumnDef="sourceId">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Source</th>\n          <td mat-cell *matCellDef="let account">{{ account.sourceId || \'-\' }}</td>\n        </ng-container>\n\n        \x3c!-- Disabled Column --\x3e\n        <ng-container matColumnDef="disabled">\n          <th mat-header-cell *matHeaderCellDef>Disabled</th>\n          <td mat-cell *matCellDef="let account">\n            <mat-icon *ngIf="account.disabled">check_circle</mat-icon>\n            <mat-icon *ngIf="!account.disabled">cancel</mat-icon>\n          </td>\n        </ng-container>\n\n        \x3c!-- Locked Column --\x3e\n        <ng-container matColumnDef="locked">\n          <th mat-header-cell *matHeaderCellDef>Locked</th>\n          <td mat-cell *matCellDef="let account">\n            <mat-icon *ngIf="account.locked">lock</mat-icon>\n            <mat-icon *ngIf="!account.locked">lock_open</mat-icon>\n          </td>\n        </ng-container>\n\n        \x3c!-- Actions Column --\x3e\n        <ng-container matColumnDef="actions">\n          <th mat-header-cell *matHeaderCellDef>Actions</th>\n          <td mat-cell *matCellDef="let account">\n            <button mat-button color="primary" (click)="viewAccount(account)">\n              <mat-icon>visibility</mat-icon> View\n            </button>\n          </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>\n        <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>\n      </table>\n\n      \x3c!-- Paginator --\x3e\n      <mat-paginator\n        [length]="totalCount"\n        [pageSize]="pageSize"\n        [pageIndex]="pageIndex"\n        [pageSizeOptions]="[5, 10, 25, 100, 250]"\n        (page)="onPageChange($event)"\n        showFirstLastButtons\n        aria-label="Select page of accounts">\n      </mat-paginator>\n\n      \x3c!-- No data message --\x3e\n      <div *ngIf="accounts.length === 0" class="no-data-message">\n        No accounts found.\n      </div>\n    </div>\n  </div>\n</div>\n\n\n'})})}),(0,a.jsx)(i.default,{value:"accounts_list_ts",label:"\\accounts\\accounts.component.ts",children:(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"import { CommonModule } from '@angular/common';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatSort, MatSortModule, Sort, SortDirection } from '@angular/material/sort';\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatDialog } from '@angular/material/dialog';\nimport { GenericDialogComponent } from '../generic-dialog/generic-dialog.component';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatPaginator, MatPaginatorModule, PageEvent } from '@angular/material/paginator';\nimport { SailPointSDKService } from '../sailpoint-sdk.service';\nimport { AccountV2025 } from 'sailpoint-api-client';\n\n@Component({\n  selector: 'app-accounts',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatCardModule,\n    MatIconModule,\n    MatTableModule,\n    MatToolbarModule,\n    MatProgressSpinnerModule,\n    MatPaginatorModule,\n    MatSortModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    GenericDialogComponent\n  ],\n  templateUrl: './accounts.component.html',\n  styleUrl: './accounts.component.scss',\n})\nexport class AccountsComponent implements OnInit {\n  title = 'Accounts';\n  loading = true;\n  accounts: AccountV2025[] = [];\n  error = false;\n  errorMessage = '';\n  displayedColumns: string[] = ['id', 'name', 'nativeIdentity', 'sourceId', 'disabled', 'locked', 'actions'];\n\n  // Sort settings\n  sortActive = 'name';\n  sortDirection: SortDirection = 'asc';\n\n  // Filter form\n  filterForm = new FormGroup({\n    name: new FormControl(''),\n    sourceId: new FormControl(''),\n    correlated: new FormControl('')\n  });\n\n  // Filter options\n  correlatedOptions = [\n    { value: '', label: 'All' },\n    { value: 'true', label: 'Correlated' },\n    { value: 'false', label: 'Uncorrelated' }\n  ];\n  \n  // Pagination settings\n  pageSize = 10;\n  pageIndex = 0;\n  totalCount = 0;\n\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n\n  constructor(private sdk: SailPointSDKService, private dialog: MatDialog) {}\n\n  ngOnInit() {\n    // Load initial data\n    void this.loadAccounts();\n\n    // Subscribe to filter changes\n    this.filterForm.valueChanges.subscribe(() => {\n      this.pageIndex = 0; // Reset to first page on filter change\n      void this.loadAccounts();\n    });\n  }\n\n  async loadAccounts() {\n    // Setup request for paged account results\n    const request = {\n      offset: this.pageIndex * this.pageSize,\n      limit: this.pageSize,\n      count: true,\n      sorters: this.buildSorters(),\n      filters: this.buildFilters()\n    };\n\n    this.loading = true;\n    this.error = false;\n    this.errorMessage = '';\n    \n    try {\n      const response = await this.sdk.listAccounts(request);\n      if (response.status !== 200) {\n        throw new Error(`Failed to load accounts: ${response.statusText}`);\n      }\n      this.accounts = response.data;\n      \n      // Get total count from headers if available\n      let count: number | undefined;\n      if (response.headers && typeof (response.headers as any).get === 'function') {\n        const headerValue = (response.headers as any).get('X-Total-Count');\n        count = headerValue ? Number(headerValue) : undefined;\n      } else if (response.headers && typeof (response.headers as any)['x-total-count'] !== 'undefined') {\n        count = Number((response.headers as any)['x-total-count']);\n      }\n      \n      this.totalCount = count ?? 250; // Default to 250 if count not available\n    } catch (error) {\n      console.error('Error loading accounts:', error);\n      this.error = true;\n      this.errorMessage = error instanceof Error ? error.message : String(error);\n      this.accounts = [];\n    } finally {\n      this.loading = false;\n    }\n  }\n\n  // Handle page change events\n  onPageChange(event: PageEvent) {\n    this.pageSize = event.pageSize;\n    this.pageIndex = event.pageIndex;\n    void this.loadAccounts();\n  }\n\n  // Handle sort changes\n  onSortChange(event: Sort) {\n    this.sortActive = event.active;\n    this.sortDirection = event.direction as SortDirection;\n    void this.loadAccounts();\n  }\n\n  // Reset filters\n  resetFilters() {\n    this.filterForm.reset({\n      name: '',\n      sourceId: '',\n      correlated: ''\n    });\n  }\n\n  // Build sorters string for API request\n  buildSorters(): string | undefined {\n    if (!this.sortActive || this.sortDirection === '') {\n      return undefined;\n    }\n    // For descending order, prefix column name with minus sign\n    return this.sortDirection === 'desc' ? `-${this.sortActive}` : this.sortActive;\n  }\n\n  // Build filters string for API request\n  buildFilters(): string | undefined {\n    const filters: string[] = [];\n    const formValues = this.filterForm.value;\n    \n    if (formValues.name) {\n      filters.push(`name sw \"${formValues.name}\"`); \n    }\n    \n    if (formValues.sourceId) {\n      filters.push(`sourceId eq \"${formValues.sourceId}\"`); \n    }\n    \n    if (formValues.correlated) {\n      filters.push(`identity.correlated eq ${formValues.correlated}`);\n    }\n    \n    return filters.length > 0 ? filters.join(' and ') : undefined;\n  }\n\n  viewAccount(account: AccountV2025): void {\n      // Format account details as JSON string with indentation\n      const details = JSON.stringify(account, null, 2);\n      \n      // Open dialog with account details\n      this.dialog.open(GenericDialogComponent, {\n        minWidth: '800px',\n        data: {\n          title: `Account Details: ${account.name || account.nativeIdentity || account.id}`,\n          message: details\n      }\n    });\n  }\n}\n\n\n\n"})})}),(0,a.jsx)(i.default,{value:"accounts_list_css",label:"\\accounts\\accounts.component.css",children:(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-css",children:".accounts-container {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\n.table-container {\n  display: flex;\n  flex-direction: column;\n}\n\n.toolbar-title {\n  margin-left: 16px;\n}\n\n.content {\n  padding: 24px;\n  flex: 1;\n  overflow-y: auto;\n}\n\n.filter-panel {\n  margin-bottom: 20px;\n  padding: 16px;\n  border-radius: 4px;\n  background-color: #f8f8f8;\n}\n\n.filter-row {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 16px;\n  align-items: center;\n}\n\n.filter-field {\n  flex: 1;\n  min-width: 200px;\n}\n\n:host-context(.dark-theme) .filter-panel {\n  background-color: #333;\n}\n\nmat-card {\n  max-width: 800px;\n  margin: 0 auto;\n}\n\nmat-card-actions {\n  display: flex;\n  gap: 8px;\n  padding: 16px;\n}\n\nmat-card-actions button {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n::ng-deep mat-spinner circle {\n  stroke: #0033a1; /* teal-like custom color */\n}\n\n.spinner-container {\n  display: flex;\n  justify-content: center; // horizontal centering\n  align-items: center; // vertical centering\n  border: none;\n  height: 75vh; // takes full viewport height (adjust as needed)\n}\n\n.header-content {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.sortable {\n  cursor: pointer;\n}\n\n.sortable:hover {\n  background-color: #f3f3f3;\n}\n\n.sort-icon {\n  margin-left: 6px;\n  font-size: 0.95rem;\n  color: black;\n\n  // Highlight active sort\n  &.active {\n    color: #415364;\n    font-weight: bold;\n  }\n}\ntd.mat-cell,\nth.mat-header-cell {\n  vertical-align: middle;\n}\n\ntd.mat-cell:last-child,\nth.mat-header-cell:last-child {\n  text-align: center;\n}\n\n#viewIdentity,\n#attibuteDetails,\n#managerDetails {\n  padding: 8px;\n  margin-bottom: 10px;\n  margin-top: 10px;\n  width: 55px;\n}\n\n#attibuteDetails,\n#managerDetails {\n  width: 125px;\n}\n\n:host {\n  /* Dark mode overrides */\n\n  :host-context(.dark-theme) .sortable:hover {\n    background-color: #2c2c2c; /* Darker hover background */\n  }\n\n  :host-context(.dark-theme) .sort-icon {\n    margin-left: 6px;\n    font-size: 0.95rem;\n    color: #ffffff;\n\n    // Highlight active sort\n    &.active {\n      color: #ffffff;\n      font-weight: bold;\n    }\n  }\n}\n"})})})]}),"\n",(0,a.jsx)(e.h2,{id:"error-handling",children:"Error handling"}),"\n",(0,a.jsx)(e.p,{children:"You have now implemented a new page that lists all the accounts in your tenant, and you can now paginate, sort and filter the accounts in your tenant."}),"\n",(0,a.jsxs)(e.p,{children:["Ideally, everything in your custom UIs will work smoothly, but you will likely encounter errors at some point when you're implementing a page. For example, if you provide an invalid filter or sorter, the list accounts endpoint will return a 400 error.\nYou can see that there is a ",(0,a.jsx)(e.code,{children:"try catch"})," block on the loadAccounts method that currently shows a console.log error but a custom message could be implemented to notify the user of a problem. This is not covered in this part of the tutorial, but with angular, presenting the user about an error is quite trivial."]}),"\n",(0,a.jsxs)(e.p,{children:["To learn more about handling errors in your UI, refer to ",(0,a.jsx)(e.a,{href:"./error-handling",children:"Error Handling"}),"."]}),"\n",(0,a.jsx)(e.h2,{id:"discuss",children:"Discuss"}),"\n",(0,a.jsx)(e.p,{children:"The most valuable resource for ISC developers is the SailPoint Developer Community itself, where ISC users and experts all over the world come together to ask questions and provide solutions."}),"\n",(0,a.jsxs)(e.p,{children:["To learn more about the ISC UI Development Kit and discuss it with SailPoint Developer Community members, go to the ",(0,a.jsx)(e.a,{href:"https://developer.sailpoint.com/discuss/c/identity-security-cloud/6",children:"SailPoint Developer Community Forum"}),"."]})]})}function p(n={}){let{wrapper:e}={...(0,l.a)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(m,{...n})}):m(n)}},161748:function(n,e,t){t.d(e,{Z:()=>o});let o={tabItem:"tabItem_Ymn6"}},587244:function(n,e,t){t.d(e,{Z:()=>o});let o={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"}},649384:function(n,e,t){t.d(e,{Z:()=>o});let o=t.p+"assets/images/accounts-component-59d1c99c37ad28a227c83ee154c72c3a.png"},674763:function(n,e,t){t.d(e,{Z:()=>o});let o=t.p+"assets/images/enable-accounts-90732f562ab6986890099864d05a93d2.png"},292415:function(n,e,t){t.r(e),t.d(e,{default:()=>i});var o=t(785893);t(667294);var a=t(467026),l=t(161748);function i(n){let{children:e,hidden:t,className:i}=n;return(0,o.jsx)("div",{role:"tabpanel",className:(0,a.Z)(l.Z.tabItem,i),hidden:t,children:e})}},308193:function(n,e,t){t.d(e,{Z:()=>p});var o=t(785893),a=t(667294),l=t(467026),i=t(69599),r=t(533057),c=t(7227),s=t(587244);function d(n){let{className:e,block:t,selectedValue:a,selectValue:r,tabValues:c}=n,d=[],{blockElementScrollPositionUntilNextRender:u}=(0,i.o5)(),m=n=>{let e=n.currentTarget,t=c[d.indexOf(e)].value;t!==a&&(u(e),r(t))},p=n=>{let e=null;switch(n.key){case"Enter":m(n);break;case"ArrowRight":{let t=d.indexOf(n.currentTarget)+1;e=d[t]??d[0];break}case"ArrowLeft":{let t=d.indexOf(n.currentTarget)-1;e=d[t]??d[d.length-1]}}e?.focus()};return(0,o.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":t},e),children:c.map(n=>{let{value:e,label:t,attributes:i}=n;return(0,o.jsx)("li",{role:"tab",tabIndex:a===e?0:-1,"aria-selected":a===e,ref:n=>{d.push(n)},onKeyDown:p,onClick:m,...i,className:(0,l.Z)("tabs__item",s.Z.tabItem,i?.className,{"tabs__item--active":a===e}),children:t??e},e)})})}function u(n){let{lazy:e,children:t,selectedValue:i}=n,r=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){let n=r.find(n=>n.props.value===i);return n?(0,a.cloneElement)(n,{className:(0,l.Z)("margin-top--md",n.props.className)}):null}return(0,o.jsx)("div",{className:"margin-top--md",children:r.map((n,e)=>(0,a.cloneElement)(n,{key:e,hidden:n.props.value!==i}))})}function m(n){let e=(0,r.Y)(n);return(0,o.jsxs)("div",{className:(0,l.Z)("tabs-container",s.Z.tabList),children:[(0,o.jsx)(d,{...e,...n}),(0,o.jsx)(u,{...e,...n})]})}function p(n){let e=(0,c.default)();return(0,o.jsx)(m,{...n,children:(0,r.h)(n.children)},String(e))}},533057:function(n,e,t){t.d(e,{Y:()=>u,h:()=>s});var o=t(667294),a=t(616550),l=t(232e3),i=t(4520),r=t(38341),c=t(768737);function s(n){return o.Children.toArray(n).filter(n=>"\n"!==n).map(n=>{if(!n||(0,o.isValidElement)(n)&&function(n){let{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function d(n){let{value:e,tabValues:t}=n;return t.some(n=>n.value===e)}function u(n){let{defaultValue:e,queryString:t=!1,groupId:u}=n,m=function(n){let{values:e,children:t}=n;return(0,o.useMemo)(()=>{let n=e??s(t).map(n=>{let{props:{value:e,label:t,attributes:o,default:a}}=n;return{value:e,label:t,attributes:o,default:a}}),o=(0,r.lx)(n,(n,e)=>n.value===e.value);if(o.length>0)throw Error(`Docusaurus error: Duplicate values "${o.map(n=>n.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`);return n},[e,t])}(n),[p,h]=(0,o.useState)(()=>(function(n){let{defaultValue:e,tabValues:t}=n;if(0===t.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!d({value:e,tabValues:t}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map(n=>n.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}let o=t.find(n=>n.default)??t[0];if(!o)throw Error("Unexpected error: 0 tabValues");return o.value})({defaultValue:e,tabValues:m})),[g,f]=function(n){let{queryString:e=!1,groupId:t}=n,l=(0,a.k6)(),r=function(n){let{queryString:e=!1,groupId:t}=n;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,i._X)(r),(0,o.useCallback)(n=>{if(!r)return;let e=new URLSearchParams(l.location.search);e.set(r,n),l.replace({...l.location,search:e.toString()})},[r,l])]}({queryString:t,groupId:u}),[v,b]=function(n){let{groupId:e}=n,t=e?`docusaurus.tab.${e}`:null,[a,l]=(0,c.Nk)(t);return[a,(0,o.useCallback)(n=>{t&&l.set(n)},[t,l])]}({groupId:u}),x=(()=>{let n=g??v;return d({value:n,tabValues:m})?n:null})();return(0,l.Z)(()=>{x&&h(x)},[x]),{selectedValue:p,selectValue:(0,o.useCallback)(n=>{if(!d({value:n,tabValues:m}))throw Error(`Can't select invalid tab value=${n}`);h(n),f(n),b(n)},[f,b,m]),tabValues:m}}},250065:function(n,e,t){t.d(e,{Z:()=>r,a:()=>i});var o=t(667294);let a={},l=o.createContext(a);function i(n){let e=o.useContext(l);return o.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:i(n.components),o.createElement(l.Provider,{value:e},n.children)}},866964:function(n){n.exports=JSON.parse('{"id":"tools/ui-development-kit/udk-accounts-list","title":"Implementing the accounts component","description":"Develop custom user interfaces.","source":"@site/docs/tools/ui-development-kit/accounts-list.mdx","sourceDirName":"tools/ui-development-kit","slug":"/tools/ui-development-kit/accounts-list","permalink":"/docs/tools/ui-development-kit/accounts-list","draft":false,"unlisted":false,"editUrl":"https://github.com/sailpoint-oss/developer.sailpoint.com/edit/main/docs/tools/ui-development-kit/accounts-list.mdx","tags":[{"inline":true,"label":"UI","permalink":"/docs/tags/ui"}],"version":"current","lastUpdatedBy":"Tyler Mairose","lastUpdatedAt":1756821039000,"sidebarPosition":2,"frontMatter":{"id":"udk-accounts-list","title":"Implementing the accounts component","pagination_label":"UDK","sidebar_label":"Accounts Component","sidebar_position":2,"sidebar_class_name":"rudk","keywords":["UI","development","kit"],"description":"Develop custom user interfaces.","slug":"/tools/ui-development-kit/accounts-list","tags":["UI"]},"sidebar":"openApiSidebar","previous":{"title":"UDK","permalink":"/docs/tools/ui-development-kit/getting-started"},"next":{"title":"UDK","permalink":"/docs/tools/ui-development-kit/deploying"}}')}}]);