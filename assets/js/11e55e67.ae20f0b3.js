"use strict";(self.webpackChunksailpoint_developer_portal=self.webpackChunksailpoint_developer_portal||[]).push([["562742"],{477026:function(e,n,t){t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var r=t(579692),s=t(785893),a=t(250065);let i={id:"search",title:"Search",pagination_label:"Search",sidebar_label:"Search",sidebar_class_name:"gosdk",keywords:["go","Golang","sdk","Search","Search"],slug:"/tools/sdk/go/v3/methods/search",tags:["SDK","Software Development Kit","Search","Search"]},o="SearchAPI",l={},c=[{value:"search-aggregate",id:"search-aggregate",level:2},{value:"Path Parameters",id:"path-parameters",level:3},{value:"Other Parameters",id:"other-parameters",level:3},{value:"Return type",id:"return-type",level:3},{value:"HTTP request headers",id:"http-request-headers",level:3},{value:"Example",id:"example",level:3},{value:"search-count",id:"search-count",level:2},{value:"Path Parameters",id:"path-parameters-1",level:3},{value:"Other Parameters",id:"other-parameters-1",level:3},{value:"Return type",id:"return-type-1",level:3},{value:"HTTP request headers",id:"http-request-headers-1",level:3},{value:"Example",id:"example-1",level:3},{value:"search-get",id:"search-get",level:2},{value:"Path Parameters",id:"path-parameters-2",level:3},{value:"Other Parameters",id:"other-parameters-2",level:3},{value:"Return type",id:"return-type-2",level:3},{value:"HTTP request headers",id:"http-request-headers-2",level:3},{value:"Example",id:"example-2",level:3},{value:"search-post",id:"search-post",level:2},{value:"Path Parameters",id:"path-parameters-3",level:3},{value:"Other Parameters",id:"other-parameters-3",level:3},{value:"Return type",id:"return-type-3",level:3},{value:"HTTP request headers",id:"http-request-headers-3",level:3},{value:"Example",id:"example-3",level:3}];function d(e){let n={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"searchapi",children:"SearchAPI"})}),"\n",(0,s.jsx)(n.p,{children:"Use this API to implement search functionality.\nWith search functionality in place, users can search their tenants for nearly any information from throughout their organizations."}),"\n",(0,s.jsxs)(n.p,{children:["Identity Security Cloud enables organizations to store user data from across all their connected sources and manage the users' access, so the ability to query and filter that data is essential.",(0,s.jsx)(n.br,{}),"\n","Its search goes through all those sources and finds the results quickly and specifically."]}),"\n",(0,s.jsx)(n.p,{children:'The search query is flexible - it can be very broad or very narrow.\nThe search only returns results for searchable objects it is filtering for.\nThe following objects are searchable: identities, roles, access profiles, entitlements, events, and account activities.\nBy default, no filter is applied, so a search for "Ad" returns both the identity "Adam.Archer" as well as the role "Administrator."'}),"\n",(0,s.jsxs)(n.p,{children:["Users can further narrow their results by using Identity Security Cloud's specific syntax and punctuation to structure their queries.\nFor example, the query \"attributes.location",":austin"," AND NOT manager.name",":amanda",'.ross" returns all results associated with the Austin location, but it excludes those associated with the manager Amanda Ross.\nRefer to ',(0,s.jsx)(n.a,{href:"https://documentation.sailpoint.com/saas/help/search/building-query.html",children:"Building a Search Query"})," for more information about how to construct specific search queries."]}),"\n",(0,s.jsxs)(n.p,{children:["Refer to ",(0,s.jsx)(n.a,{href:"https://documentation.sailpoint.com/saas/help/search/index.html",children:"Using Search"})," for more information about Identity Security Cloud's search and its different possibilities."]}),"\n",(0,s.jsx)(n.p,{children:"The search feature uses Elasticsearch as a datastore and query engine.\nThe power of Elasticsearch makes this feature suitable for ad-hoc reporting.\nHowever, data from the operational databases (ex. identities, roles, events, etc) has to be ingested into Elasticsearch.\nThis ingestion process introduces a latency from when the operational data is created to when it is available in search.\nDepending on the system load, this can take a few seconds to a few minutes.\nPlease keep this latency in mind when you use search."}),"\n",(0,s.jsxs)(n.p,{children:["All URIs are relative to ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.a,{href:"https://sailpoint.api.identitynow.com/v3",children:"https://sailpoint.api.identitynow.com/v3"})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Method"}),(0,s.jsx)(n.th,{children:"HTTP request"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"#search-aggregate",children:(0,s.jsx)(n.strong,{children:"search-aggregate"})})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:"Post"})," ",(0,s.jsx)(n.code,{children:"/search/aggregate"})]}),(0,s.jsx)(n.td,{children:"Perform a search query aggregation"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"#search-count",children:(0,s.jsx)(n.strong,{children:"search-count"})})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:"Post"})," ",(0,s.jsx)(n.code,{children:"/search/count"})]}),(0,s.jsx)(n.td,{children:"Count documents satisfying a query"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"#search-get",children:(0,s.jsx)(n.strong,{children:"search-get"})})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:"Get"})," ",(0,s.jsx)(n.code,{children:"/search/{index}/{id}"})]}),(0,s.jsx)(n.td,{children:"Get a document by id"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"#search-post",children:(0,s.jsx)(n.strong,{children:"search-post"})})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:"Post"})," ",(0,s.jsx)(n.code,{children:"/search"})]}),(0,s.jsx)(n.td,{children:"Perform search"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"search-aggregate",children:"search-aggregate"}),"\n",(0,s.jsxs)(n.p,{children:["Perform a search query aggregation\nPerforms a search query aggregation and returns the aggregation result. By default, you can page a maximum of 10,000 search result records.  To page past 10,000 records, you can use searchAfter paging.  Refer to ",(0,s.jsx)(n.a,{href:"https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-search-queries",children:"Paginating Search Queries"})," for more information about how to implement searchAfter paging."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://developer.sailpoint.com/docs/api/v3/search-aggregate",children:"API Spec"})}),"\n",(0,s.jsx)(n.h3,{id:"path-parameters",children:"Path Parameters"}),"\n",(0,s.jsx)(n.h3,{id:"other-parameters",children:"Other Parameters"}),"\n",(0,s.jsx)(n.p,{children:"Other parameters are passed through a pointer to a apiSearchAggregateRequest struct via the builder pattern"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Name"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Notes"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"search"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"../models/search",children:(0,s.jsx)(n.strong,{children:"Search"})})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"offset"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"int32"})}),(0,s.jsxs)(n.td,{children:["Offset into the full result set. Usually specified with ",(0,s.jsx)(n.em,{children:"limit"})," to paginate through the results. See ",(0,s.jsx)(n.a,{href:"https://developer.sailpoint.com/idn/api/standard-collection-parameters",children:"V3 API Standard Collection Parameters"})," for more information."]}),(0,s.jsx)(n.td,{children:"[default to 0]"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"limit"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"int32"})}),(0,s.jsxs)(n.td,{children:["Max number of results to return. See ",(0,s.jsx)(n.a,{href:"https://developer.sailpoint.com/idn/api/standard-collection-parameters",children:"V3 API Standard Collection Parameters"})," for more information."]}),(0,s.jsx)(n.td,{children:"[default to 250]"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"count"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"bool"})}),(0,s.jsxs)(n.td,{children:["If ",(0,s.jsx)(n.em,{children:"true"})," it will populate the ",(0,s.jsx)(n.em,{children:"X-Total-Count"})," response header with the number of results that would be returned if ",(0,s.jsx)(n.em,{children:"limit"})," and ",(0,s.jsx)(n.em,{children:"offset"})," were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send ",(0,s.jsx)(n.strong,{children:"count=true"})," if that value will not be used.  See ",(0,s.jsx)(n.a,{href:"https://developer.sailpoint.com/idn/api/standard-collection-parameters",children:"V3 API Standard Collection Parameters"})," for more information."]}),(0,s.jsx)(n.td,{children:"[default to false]"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"return-type",children:"Return type"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"../models/aggregation-result",children:(0,s.jsx)(n.strong,{children:"AggregationResult"})})}),"\n",(0,s.jsx)(n.h3,{id:"http-request-headers",children:"HTTP request headers"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Content-Type"}),": application/json"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Accept"}),": application/json, text/csv"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n	"context"\n	"fmt"\n	"os"\n  "encoding/json"\n    v3 "github.com/sailpoint-oss/golang-sdk/v2/api_v3"\n	sailpoint "github.com/sailpoint-oss/golang-sdk/v2"\n)\n\nfunc main() {\n    search := []byte(`{\n          "queryDsl" : {\n            "match" : {\n              "name" : "john.doe"\n            }\n          },\n          "aggregationType" : "DSL",\n          "aggregationsVersion" : "",\n          "query" : {\n            "query" : "name:a*",\n            "timeZone" : "America/Chicago",\n            "fields" : "[firstName,lastName,email]",\n            "innerHit" : {\n              "query" : "source.name:\\\\\\"Active Directory\\\\\\"",\n              "type" : "access"\n            }\n          },\n          "aggregationsDsl" : { },\n          "sort" : [ "displayName", "+id" ],\n          "filters" : { },\n          "queryVersion" : "",\n          "queryType" : "SAILPOINT",\n          "includeNested" : true,\n          "queryResultFilter" : {\n            "excludes" : [ "stacktrace" ],\n            "includes" : [ "name", "displayName" ]\n          },\n          "indices" : [ "identities" ],\n          "typeAheadQuery" : {\n            "field" : "source.name",\n            "size" : 100,\n            "query" : "Work",\n            "sortByValue" : true,\n            "nestedType" : "access",\n            "sort" : "asc",\n            "maxExpansions" : 10\n          },\n          "textQuery" : {\n            "contains" : true,\n            "terms" : [ "The quick brown fox", "3141592", "7" ],\n            "matchAny" : false,\n            "fields" : [ "displayName", "employeeNumber", "roleCount" ]\n          },\n          "searchAfter" : [ "John Doe", "2c91808375d8e80a0175e1f88a575221" ],\n          "aggregations" : {\n            "filter" : {\n              "field" : "access.type",\n              "name" : "Entitlements",\n              "type" : "TERM",\n              "value" : "ENTITLEMENT"\n            },\n            "bucket" : {\n              "field" : "attributes.city",\n              "size" : 100,\n              "minDocCount" : 2,\n              "name" : "Identity Locations",\n              "type" : "TERMS"\n            },\n            "metric" : {\n              "field" : "@access.name",\n              "name" : "Access Name Count",\n              "type" : "COUNT"\n            },\n            "subAggregation" : {\n              "filter" : {\n                "field" : "access.type",\n                "name" : "Entitlements",\n                "type" : "TERM",\n                "value" : "ENTITLEMENT"\n              },\n              "bucket" : {\n                "field" : "attributes.city",\n                "size" : 100,\n                "minDocCount" : 2,\n                "name" : "Identity Locations",\n                "type" : "TERMS"\n              },\n              "metric" : {\n                "field" : "@access.name",\n                "name" : "Access Name Count",\n                "type" : "COUNT"\n              },\n              "subAggregation" : {\n                "filter" : {\n                  "field" : "access.type",\n                  "name" : "Entitlements",\n                  "type" : "TERM",\n                  "value" : "ENTITLEMENT"\n                },\n                "bucket" : {\n                  "field" : "attributes.city",\n                  "size" : 100,\n                  "minDocCount" : 2,\n                  "name" : "Identity Locations",\n                  "type" : "TERMS"\n                },\n                "metric" : {\n                  "field" : "@access.name",\n                  "name" : "Access Name Count",\n                  "type" : "COUNT"\n                },\n                "nested" : {\n                  "name" : "id",\n                  "type" : "access"\n                }\n              },\n              "nested" : {\n                "name" : "id",\n                "type" : "access"\n              }\n            },\n            "nested" : {\n              "name" : "id",\n              "type" : "access"\n            }\n          }\n        }`) // Search | \n    offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)\n    limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)\n    count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)\n\n    var search v3.Search\n    if err := json.Unmarshal(search, &search); err != nil {\n      fmt.Println("Error:", err)\n      return\n    }\n    \n\n    configuration := sailpoint.NewDefaultConfiguration()\n    apiClient := sailpoint.NewAPIClient(configuration)\n    resp, r, err := apiClient.V3.SearchAPI.SearchAggregate(context.Background()).Search(search).Execute()\n	  //resp, r, err := apiClient.V3.SearchAPI.SearchAggregate(context.Background()).Search(search).Offset(offset).Limit(limit).Count(count).Execute()\n    if err != nil {\n	    fmt.Fprintf(os.Stderr, "Error when calling `SearchAPI.SearchAggregate``: %v\\n", err)\n	    fmt.Fprintf(os.Stderr, "Full HTTP response: %v\\n", r)\n    }\n    // response from `SearchAggregate`: AggregationResult\n    fmt.Fprintf(os.Stdout, "Response from `SearchAPI.SearchAggregate`: %v\\n", resp)\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"#",children:"[Back to top]"})}),"\n",(0,s.jsx)(n.h2,{id:"search-count",children:"search-count"}),"\n",(0,s.jsx)(n.p,{children:"Count documents satisfying a query\nPerforms a search with a provided query and returns the count of results in the X-Total-Count header."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://developer.sailpoint.com/docs/api/v3/search-count",children:"API Spec"})}),"\n",(0,s.jsx)(n.h3,{id:"path-parameters-1",children:"Path Parameters"}),"\n",(0,s.jsx)(n.h3,{id:"other-parameters-1",children:"Other Parameters"}),"\n",(0,s.jsx)(n.p,{children:"Other parameters are passed through a pointer to a apiSearchCountRequest struct via the builder pattern"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Name"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Notes"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"search"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"../models/search",children:(0,s.jsx)(n.strong,{children:"Search"})})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{})]})})]}),"\n",(0,s.jsx)(n.h3,{id:"return-type-1",children:"Return type"}),"\n",(0,s.jsx)(n.p,{children:"(empty response body)"}),"\n",(0,s.jsx)(n.h3,{id:"http-request-headers-1",children:"HTTP request headers"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Content-Type"}),": application/json"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Accept"}),": application/json"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n	"context"\n	"fmt"\n	"os"\n  "encoding/json"\n    v3 "github.com/sailpoint-oss/golang-sdk/v2/api_v3"\n	sailpoint "github.com/sailpoint-oss/golang-sdk/v2"\n)\n\nfunc main() {\n    search := []byte(`{\n          "queryDsl" : {\n            "match" : {\n              "name" : "john.doe"\n            }\n          },\n          "aggregationType" : "DSL",\n          "aggregationsVersion" : "",\n          "query" : {\n            "query" : "name:a*",\n            "timeZone" : "America/Chicago",\n            "fields" : "[firstName,lastName,email]",\n            "innerHit" : {\n              "query" : "source.name:\\\\\\"Active Directory\\\\\\"",\n              "type" : "access"\n            }\n          },\n          "aggregationsDsl" : { },\n          "sort" : [ "displayName", "+id" ],\n          "filters" : { },\n          "queryVersion" : "",\n          "queryType" : "SAILPOINT",\n          "includeNested" : true,\n          "queryResultFilter" : {\n            "excludes" : [ "stacktrace" ],\n            "includes" : [ "name", "displayName" ]\n          },\n          "indices" : [ "identities" ],\n          "typeAheadQuery" : {\n            "field" : "source.name",\n            "size" : 100,\n            "query" : "Work",\n            "sortByValue" : true,\n            "nestedType" : "access",\n            "sort" : "asc",\n            "maxExpansions" : 10\n          },\n          "textQuery" : {\n            "contains" : true,\n            "terms" : [ "The quick brown fox", "3141592", "7" ],\n            "matchAny" : false,\n            "fields" : [ "displayName", "employeeNumber", "roleCount" ]\n          },\n          "searchAfter" : [ "John Doe", "2c91808375d8e80a0175e1f88a575221" ],\n          "aggregations" : {\n            "filter" : {\n              "field" : "access.type",\n              "name" : "Entitlements",\n              "type" : "TERM",\n              "value" : "ENTITLEMENT"\n            },\n            "bucket" : {\n              "field" : "attributes.city",\n              "size" : 100,\n              "minDocCount" : 2,\n              "name" : "Identity Locations",\n              "type" : "TERMS"\n            },\n            "metric" : {\n              "field" : "@access.name",\n              "name" : "Access Name Count",\n              "type" : "COUNT"\n            },\n            "subAggregation" : {\n              "filter" : {\n                "field" : "access.type",\n                "name" : "Entitlements",\n                "type" : "TERM",\n                "value" : "ENTITLEMENT"\n              },\n              "bucket" : {\n                "field" : "attributes.city",\n                "size" : 100,\n                "minDocCount" : 2,\n                "name" : "Identity Locations",\n                "type" : "TERMS"\n              },\n              "metric" : {\n                "field" : "@access.name",\n                "name" : "Access Name Count",\n                "type" : "COUNT"\n              },\n              "subAggregation" : {\n                "filter" : {\n                  "field" : "access.type",\n                  "name" : "Entitlements",\n                  "type" : "TERM",\n                  "value" : "ENTITLEMENT"\n                },\n                "bucket" : {\n                  "field" : "attributes.city",\n                  "size" : 100,\n                  "minDocCount" : 2,\n                  "name" : "Identity Locations",\n                  "type" : "TERMS"\n                },\n                "metric" : {\n                  "field" : "@access.name",\n                  "name" : "Access Name Count",\n                  "type" : "COUNT"\n                },\n                "nested" : {\n                  "name" : "id",\n                  "type" : "access"\n                }\n              },\n              "nested" : {\n                "name" : "id",\n                "type" : "access"\n              }\n            },\n            "nested" : {\n              "name" : "id",\n              "type" : "access"\n            }\n          }\n        }`) // Search | \n\n    var search v3.Search\n    if err := json.Unmarshal(search, &search); err != nil {\n      fmt.Println("Error:", err)\n      return\n    }\n    \n\n    configuration := sailpoint.NewDefaultConfiguration()\n    apiClient := sailpoint.NewAPIClient(configuration)\n    r, err := apiClient.V3.SearchAPI.SearchCount(context.Background()).Search(search).Execute()\n	  //r, err := apiClient.V3.SearchAPI.SearchCount(context.Background()).Search(search).Execute()\n    if err != nil {\n	    fmt.Fprintf(os.Stderr, "Error when calling `SearchAPI.SearchCount``: %v\\n", err)\n	    fmt.Fprintf(os.Stderr, "Full HTTP response: %v\\n", r)\n    }\n    \n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"#",children:"[Back to top]"})}),"\n",(0,s.jsx)(n.h2,{id:"search-get",children:"search-get"}),"\n",(0,s.jsx)(n.p,{children:"Get a document by id\nFetches a single document from the specified index, using the specified document ID."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://developer.sailpoint.com/docs/api/v3/search-get",children:"API Spec"})}),"\n",(0,s.jsx)(n.h3,{id:"path-parameters-2",children:"Path Parameters"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Name"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Notes"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"ctx"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"context.Context"})}),(0,s.jsx)(n.td,{children:"context for authentication, logging, cancellation, deadlines, tracing, etc."}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"index"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"string"})}),(0,s.jsxs)(n.td,{children:["The index from which to fetch the specified document.  The currently supported index names are: ",(0,s.jsx)(n.em,{children:"accessprofiles"}),", ",(0,s.jsx)(n.em,{children:"accountactivities"}),", ",(0,s.jsx)(n.em,{children:"entitlements"}),", ",(0,s.jsx)(n.em,{children:"events"}),", ",(0,s.jsx)(n.em,{children:"identities"}),", and ",(0,s.jsx)(n.em,{children:"roles"}),"."]}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"id"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"string"})}),(0,s.jsx)(n.td,{children:"ID of the requested document."}),(0,s.jsx)(n.td,{})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"other-parameters-2",children:"Other Parameters"}),"\n",(0,s.jsx)(n.p,{children:"Other parameters are passed through a pointer to a apiSearchGetRequest struct via the builder pattern"}),"\n",(0,s.jsx)(n.table,{children:(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Name"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Notes"})]})})}),"\n",(0,s.jsx)(n.h3,{id:"return-type-2",children:"Return type"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"map[string]interface"})}),"\n",(0,s.jsx)(n.h3,{id:"http-request-headers-2",children:"HTTP request headers"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Content-Type"}),": Not defined"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Accept"}),": application/json"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-2",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n	"context"\n	"fmt"\n	"os"\n  \n    \n	sailpoint "github.com/sailpoint-oss/golang-sdk/v2"\n)\n\nfunc main() {\n    index := `identities` // string | The index from which to fetch the specified document.  The currently supported index names are: *accessprofiles*, *accountactivities*, *entitlements*, *events*, *identities*, and *roles*.  # string | The index from which to fetch the specified document.  The currently supported index names are: *accessprofiles*, *accountactivities*, *entitlements*, *events*, *identities*, and *roles*. \n    id := `2c91808568c529c60168cca6f90c1313` // string | ID of the requested document. # string | ID of the requested document.\n\n    \n\n    configuration := sailpoint.NewDefaultConfiguration()\n    apiClient := sailpoint.NewAPIClient(configuration)\n    resp, r, err := apiClient.V3.SearchAPI.SearchGet(context.Background(), index, id).Execute()\n	  //resp, r, err := apiClient.V3.SearchAPI.SearchGet(context.Background(), index, id).Execute()\n    if err != nil {\n	    fmt.Fprintf(os.Stderr, "Error when calling `SearchAPI.SearchGet``: %v\\n", err)\n	    fmt.Fprintf(os.Stderr, "Full HTTP response: %v\\n", r)\n    }\n    // response from `SearchGet`: map[string]interface{}\n    fmt.Fprintf(os.Stdout, "Response from `SearchAPI.SearchGet`: %v\\n", resp)\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"#",children:"[Back to top]"})}),"\n",(0,s.jsx)(n.h2,{id:"search-post",children:"search-post"}),"\n",(0,s.jsxs)(n.p,{children:["Perform search\nPerform a search with the provided query and return a matching result collection. To page past 10,000 records, you can use ",(0,s.jsx)(n.code,{children:"searchAfter"})," paging.  Refer to ",(0,s.jsx)(n.a,{href:"https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-search-queries",children:"Paginating Search Queries"})," for more information about how to implement ",(0,s.jsx)(n.code,{children:"searchAfter"})," paging."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://developer.sailpoint.com/docs/api/v3/search-post",children:"API Spec"})}),"\n",(0,s.jsx)(n.h3,{id:"path-parameters-3",children:"Path Parameters"}),"\n",(0,s.jsx)(n.h3,{id:"other-parameters-3",children:"Other Parameters"}),"\n",(0,s.jsx)(n.p,{children:"Other parameters are passed through a pointer to a apiSearchPostRequest struct via the builder pattern"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Name"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Notes"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"search"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"../models/search",children:(0,s.jsx)(n.strong,{children:"Search"})})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"offset"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"int32"})}),(0,s.jsxs)(n.td,{children:["Offset into the full result set. Usually specified with ",(0,s.jsx)(n.em,{children:"limit"})," to paginate through the results. See ",(0,s.jsx)(n.a,{href:"https://developer.sailpoint.com/idn/api/standard-collection-parameters",children:"V3 API Standard Collection Parameters"})," for more information."]}),(0,s.jsx)(n.td,{children:"[default to 0]"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"limit"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"int32"})}),(0,s.jsxs)(n.td,{children:["Max number of results to return. See ",(0,s.jsx)(n.a,{href:"https://developer.sailpoint.com/idn/api/standard-collection-parameters",children:"V3 API Standard Collection Parameters"})," for more information."]}),(0,s.jsx)(n.td,{children:"[default to 250]"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"count"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"bool"})}),(0,s.jsxs)(n.td,{children:["If ",(0,s.jsx)(n.em,{children:"true"})," it will populate the ",(0,s.jsx)(n.em,{children:"X-Total-Count"})," response header with the number of results that would be returned if ",(0,s.jsx)(n.em,{children:"limit"})," and ",(0,s.jsx)(n.em,{children:"offset"})," were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send ",(0,s.jsx)(n.strong,{children:"count=true"})," if that value will not be used.  See ",(0,s.jsx)(n.a,{href:"https://developer.sailpoint.com/idn/api/standard-collection-parameters",children:"V3 API Standard Collection Parameters"})," for more information."]}),(0,s.jsx)(n.td,{children:"[default to false]"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"return-type-3",children:"Return type"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"[]map[string]interface"})}),"\n",(0,s.jsx)(n.h3,{id:"http-request-headers-3",children:"HTTP request headers"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Content-Type"}),": application/json"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Accept"}),": application/json"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-3",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n	"context"\n	"fmt"\n	"os"\n  "encoding/json"\n    v3 "github.com/sailpoint-oss/golang-sdk/v2/api_v3"\n	sailpoint "github.com/sailpoint-oss/golang-sdk/v2"\n)\n\nfunc main() {\n    search := []byte(`{\n          "queryDsl" : {\n            "match" : {\n              "name" : "john.doe"\n            }\n          },\n          "aggregationType" : "DSL",\n          "aggregationsVersion" : "",\n          "query" : {\n            "query" : "name:a*",\n            "timeZone" : "America/Chicago",\n            "fields" : "[firstName,lastName,email]",\n            "innerHit" : {\n              "query" : "source.name:\\\\\\"Active Directory\\\\\\"",\n              "type" : "access"\n            }\n          },\n          "aggregationsDsl" : { },\n          "sort" : [ "displayName", "+id" ],\n          "filters" : { },\n          "queryVersion" : "",\n          "queryType" : "SAILPOINT",\n          "includeNested" : true,\n          "queryResultFilter" : {\n            "excludes" : [ "stacktrace" ],\n            "includes" : [ "name", "displayName" ]\n          },\n          "indices" : [ "identities" ],\n          "typeAheadQuery" : {\n            "field" : "source.name",\n            "size" : 100,\n            "query" : "Work",\n            "sortByValue" : true,\n            "nestedType" : "access",\n            "sort" : "asc",\n            "maxExpansions" : 10\n          },\n          "textQuery" : {\n            "contains" : true,\n            "terms" : [ "The quick brown fox", "3141592", "7" ],\n            "matchAny" : false,\n            "fields" : [ "displayName", "employeeNumber", "roleCount" ]\n          },\n          "searchAfter" : [ "John Doe", "2c91808375d8e80a0175e1f88a575221" ],\n          "aggregations" : {\n            "filter" : {\n              "field" : "access.type",\n              "name" : "Entitlements",\n              "type" : "TERM",\n              "value" : "ENTITLEMENT"\n            },\n            "bucket" : {\n              "field" : "attributes.city",\n              "size" : 100,\n              "minDocCount" : 2,\n              "name" : "Identity Locations",\n              "type" : "TERMS"\n            },\n            "metric" : {\n              "field" : "@access.name",\n              "name" : "Access Name Count",\n              "type" : "COUNT"\n            },\n            "subAggregation" : {\n              "filter" : {\n                "field" : "access.type",\n                "name" : "Entitlements",\n                "type" : "TERM",\n                "value" : "ENTITLEMENT"\n              },\n              "bucket" : {\n                "field" : "attributes.city",\n                "size" : 100,\n                "minDocCount" : 2,\n                "name" : "Identity Locations",\n                "type" : "TERMS"\n              },\n              "metric" : {\n                "field" : "@access.name",\n                "name" : "Access Name Count",\n                "type" : "COUNT"\n              },\n              "subAggregation" : {\n                "filter" : {\n                  "field" : "access.type",\n                  "name" : "Entitlements",\n                  "type" : "TERM",\n                  "value" : "ENTITLEMENT"\n                },\n                "bucket" : {\n                  "field" : "attributes.city",\n                  "size" : 100,\n                  "minDocCount" : 2,\n                  "name" : "Identity Locations",\n                  "type" : "TERMS"\n                },\n                "metric" : {\n                  "field" : "@access.name",\n                  "name" : "Access Name Count",\n                  "type" : "COUNT"\n                },\n                "nested" : {\n                  "name" : "id",\n                  "type" : "access"\n                }\n              },\n              "nested" : {\n                "name" : "id",\n                "type" : "access"\n              }\n            },\n            "nested" : {\n              "name" : "id",\n              "type" : "access"\n            }\n          }\n        }`) // Search | \n    offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)\n    limit := 10000 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)\n    count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)\n\n    var search v3.Search\n    if err := json.Unmarshal(search, &search); err != nil {\n      fmt.Println("Error:", err)\n      return\n    }\n    \n\n    configuration := sailpoint.NewDefaultConfiguration()\n    apiClient := sailpoint.NewAPIClient(configuration)\n    resp, r, err := apiClient.V3.SearchAPI.SearchPost(context.Background()).Search(search).Execute()\n	  //resp, r, err := apiClient.V3.SearchAPI.SearchPost(context.Background()).Search(search).Offset(offset).Limit(limit).Count(count).Execute()\n    if err != nil {\n	    fmt.Fprintf(os.Stderr, "Error when calling `SearchAPI.SearchPost``: %v\\n", err)\n	    fmt.Fprintf(os.Stderr, "Full HTTP response: %v\\n", r)\n    }\n    // response from `SearchPost`: []map[string]interface{}\n    fmt.Fprintf(os.Stdout, "Response from `SearchAPI.SearchPost`: %v\\n", resp)\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"#",children:"[Back to top]"})})]})}function h(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},250065:function(e,n,t){t.d(n,{Z:()=>o,a:()=>i});var r=t(667294);let s={},a=r.createContext(s);function i(e){let n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:n},e.children)}},579692:function(e){e.exports=JSON.parse('{"id":"tools/sdk/go/Reference/V3/Methods/search","title":"Search","description":"Use this API to implement search functionality.","source":"@site/docs/tools/sdk/go/Reference/V3/Methods/SearchAPI.md","sourceDirName":"tools/sdk/go/Reference/V3/Methods","slug":"/tools/sdk/go/v3/methods/search","permalink":"/docs/tools/sdk/go/v3/methods/search","draft":false,"unlisted":false,"editUrl":"https://github.com/sailpoint-oss/developer.sailpoint.com/edit/main/docs/tools/sdk/go/Reference/V3/Methods/SearchAPI.md","tags":[{"inline":true,"label":"SDK","permalink":"/docs/tags/sdk"},{"inline":true,"label":"Software Development Kit","permalink":"/docs/tags/software-development-kit"},{"inline":true,"label":"Search","permalink":"/docs/tags/search"},{"inline":true,"label":"Search","permalink":"/docs/tags/search"}],"version":"current","lastUpdatedBy":"developer-relations-sp","lastUpdatedAt":1747667177000,"frontMatter":{"id":"search","title":"Search","pagination_label":"Search","sidebar_label":"Search","sidebar_class_name":"gosdk","keywords":["go","Golang","sdk","Search","Search"],"slug":"/tools/sdk/go/v3/methods/search","tags":["SDK","Software Development Kit","Search","Search"]},"sidebar":"openApiSidebar","previous":{"title":"ScheduledSearch","permalink":"/docs/tools/sdk/go/v3/methods/scheduled-search"},"next":{"title":"SearchAttributeConfiguration","permalink":"/docs/tools/sdk/go/v3/methods/search-attribute-configuration"}}')}}]);