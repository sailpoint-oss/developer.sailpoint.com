"use strict";(self.webpackChunksailpoint_developer_portal=self.webpackChunksailpoint_developer_portal||[]).push([["499210"],{593082:function(e,t,s){s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var r=s(443729),n=s(785893),o=s(250065);let i={id:"source-usages",title:"SourceUsages",pagination_label:"SourceUsages",sidebar_label:"SourceUsages",sidebar_class_name:"gosdk",keywords:["go","Golang","sdk","SourceUsages","SourceUsages"],slug:"/tools/sdk/go/v3/methods/source-usages",tags:["SDK","Software Development Kit","SourceUsages","SourceUsages"]},a="SourceUsagesAPI",l={},d=[{value:"get-status-by-source-id",id:"get-status-by-source-id",level:2},{value:"Path Parameters",id:"path-parameters",level:3},{value:"Other Parameters",id:"other-parameters",level:3},{value:"Return type",id:"return-type",level:3},{value:"HTTP request headers",id:"http-request-headers",level:3},{value:"Example",id:"example",level:3},{value:"get-usages-by-source-id",id:"get-usages-by-source-id",level:2},{value:"Path Parameters",id:"path-parameters-1",level:3},{value:"Other Parameters",id:"other-parameters-1",level:3},{value:"Return type",id:"return-type-1",level:3},{value:"HTTP request headers",id:"http-request-headers-1",level:3},{value:"Example",id:"example-1",level:3}];function c(e){let t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"sourceusagesapi",children:"SourceUsagesAPI"})}),"\n",(0,n.jsx)(t.p,{children:"Use this API to implement source usage insight functionality.\nWith this functionality in place, administrators can gather information and insights about how their tenants' sources are being used.\nThis allows organizations to get the information they need to start optimizing and securing source usage."}),"\n",(0,n.jsxs)(t.p,{children:["All URIs are relative to ",(0,n.jsx)(t.em,{children:(0,n.jsx)(t.a,{href:"https://sailpoint.api.identitynow.com/v3",children:"https://sailpoint.api.identitynow.com/v3"})})]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Method"}),(0,n.jsx)(t.th,{children:"HTTP request"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.a,{href:"#get-status-by-source-id",children:(0,n.jsx)(t.strong,{children:"get-status-by-source-id"})})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.strong,{children:"Get"})," ",(0,n.jsx)(t.code,{children:"/source-usages/{sourceId}/status"})]}),(0,n.jsx)(t.td,{children:"Finds status of source usage"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.a,{href:"#get-usages-by-source-id",children:(0,n.jsx)(t.strong,{children:"get-usages-by-source-id"})})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.strong,{children:"Get"})," ",(0,n.jsx)(t.code,{children:"/source-usages/{sourceId}/summaries"})]}),(0,n.jsx)(t.td,{children:"Returns source usage insights"})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"get-status-by-source-id",children:"get-status-by-source-id"}),"\n",(0,n.jsx)(t.p,{children:"Finds status of source usage\nThis API returns the status of the source usage insights setup by IDN source ID."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"https://developer.sailpoint.com/docs/api/v3/get-status-by-source-id",children:"API Spec"})}),"\n",(0,n.jsx)(t.h3,{id:"path-parameters",children:"Path Parameters"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"}),(0,n.jsx)(t.th,{children:"Notes"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.strong,{children:"ctx"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.strong,{children:"context.Context"})}),(0,n.jsx)(t.td,{children:"context for authentication, logging, cancellation, deadlines, tracing, etc."}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.strong,{children:"sourceId"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.strong,{children:"string"})}),(0,n.jsx)(t.td,{children:"ID of IDN source"}),(0,n.jsx)(t.td,{})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"other-parameters",children:"Other Parameters"}),"\n",(0,n.jsx)(t.p,{children:"Other parameters are passed through a pointer to a apiGetStatusBySourceIdRequest struct via the builder pattern"}),"\n",(0,n.jsx)(t.table,{children:(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"}),(0,n.jsx)(t.th,{children:"Notes"})]})})}),"\n",(0,n.jsx)(t.h3,{id:"return-type",children:"Return type"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"../models/source-usage-status",children:(0,n.jsx)(t.strong,{children:"SourceUsageStatus"})})}),"\n",(0,n.jsx)(t.h3,{id:"http-request-headers",children:"HTTP request headers"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Content-Type"}),": Not defined"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Accept"}),": application/json"]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"example",children:"Example"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n	"context"\n	"fmt"\n	"os"\n  \n    \n	sailpoint "github.com/sailpoint-oss/golang-sdk/v2"\n)\n\nfunc main() {\n    sourceId := `2c9180835d191a86015d28455b4a2329` // string | ID of IDN source # string | ID of IDN source\n\n    \n\n    configuration := sailpoint.NewDefaultConfiguration()\n    apiClient := sailpoint.NewAPIClient(configuration)\n    resp, r, err := apiClient.V3.SourceUsagesAPI.GetStatusBySourceId(context.Background(), sourceId).Execute()\n	  //resp, r, err := apiClient.V3.SourceUsagesAPI.GetStatusBySourceId(context.Background(), sourceId).Execute()\n    if err != nil {\n	    fmt.Fprintf(os.Stderr, "Error when calling `SourceUsagesAPI.GetStatusBySourceId``: %v\\n", err)\n	    fmt.Fprintf(os.Stderr, "Full HTTP response: %v\\n", r)\n    }\n    // response from `GetStatusBySourceId`: SourceUsageStatus\n    fmt.Fprintf(os.Stdout, "Response from `SourceUsagesAPI.GetStatusBySourceId`: %v\\n", resp)\n}\n'})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"#",children:"[Back to top]"})}),"\n",(0,n.jsx)(t.h2,{id:"get-usages-by-source-id",children:"get-usages-by-source-id"}),"\n",(0,n.jsx)(t.p,{children:"Returns source usage insights\nThis API returns a summary of source usage insights for past 12 months."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"https://developer.sailpoint.com/docs/api/v3/get-usages-by-source-id",children:"API Spec"})}),"\n",(0,n.jsx)(t.h3,{id:"path-parameters-1",children:"Path Parameters"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"}),(0,n.jsx)(t.th,{children:"Notes"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.strong,{children:"ctx"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.strong,{children:"context.Context"})}),(0,n.jsx)(t.td,{children:"context for authentication, logging, cancellation, deadlines, tracing, etc."}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.strong,{children:"sourceId"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.strong,{children:"string"})}),(0,n.jsx)(t.td,{children:"ID of IDN source"}),(0,n.jsx)(t.td,{})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"other-parameters-1",children:"Other Parameters"}),"\n",(0,n.jsx)(t.p,{children:"Other parameters are passed through a pointer to a apiGetUsagesBySourceIdRequest struct via the builder pattern"}),"\n",(0,n.jsx)(t.table,{children:(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"}),(0,n.jsx)(t.th,{children:"Notes"})]})})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"limit"})," | ",(0,n.jsx)(t.strong,{children:"int32"})," | Max number of results to return. See ",(0,n.jsx)(t.a,{href:"https://developer.sailpoint.com/idn/api/standard-collection-parameters",children:"V3 API Standard Collection Parameters"})," for more information. | [default to 250]\n",(0,n.jsx)(t.strong,{children:"offset"})," | ",(0,n.jsx)(t.strong,{children:"int32"})," | Offset into the full result set. Usually specified with ",(0,n.jsx)(t.em,{children:"limit"})," to paginate through the results. See ",(0,n.jsx)(t.a,{href:"https://developer.sailpoint.com/idn/api/standard-collection-parameters",children:"V3 API Standard Collection Parameters"})," for more information. | [default to 0]\n",(0,n.jsx)(t.strong,{children:"count"})," | ",(0,n.jsx)(t.strong,{children:"bool"})," | If ",(0,n.jsx)(t.em,{children:"true"})," it will populate the ",(0,n.jsx)(t.em,{children:"X-Total-Count"})," response header with the number of results that would be returned if ",(0,n.jsx)(t.em,{children:"limit"})," and ",(0,n.jsx)(t.em,{children:"offset"})," were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send ",(0,n.jsx)(t.strong,{children:"count=true"})," if that value will not be used.  See ",(0,n.jsx)(t.a,{href:"https://developer.sailpoint.com/idn/api/standard-collection-parameters",children:"V3 API Standard Collection Parameters"})," for more information. | [default to false]\n",(0,n.jsx)(t.strong,{children:"sorters"})," | ",(0,n.jsx)(t.strong,{children:"string"})," | Sort results using the standard syntax described in ",(0,n.jsx)(t.a,{href:"https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results",children:"V3 API Standard Collection Parameters"}),"  Sorting is supported for the following fields: ",(0,n.jsx)(t.strong,{children:"date"})," |"]}),"\n",(0,n.jsx)(t.h3,{id:"return-type-1",children:"Return type"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"../models/source-usage",children:(0,n.jsx)(t.strong,{children:"[]SourceUsage"})})}),"\n",(0,n.jsx)(t.h3,{id:"http-request-headers-1",children:"HTTP request headers"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Content-Type"}),": Not defined"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Accept"}),": application/json"]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"example-1",children:"Example"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n	"context"\n	"fmt"\n	"os"\n  \n    \n	sailpoint "github.com/sailpoint-oss/golang-sdk/v2"\n)\n\nfunc main() {\n    sourceId := `2c9180835d191a86015d28455b4a2329` // string | ID of IDN source # string | ID of IDN source\n    limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)\n    offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)\n    count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)\n    sorters := `-date` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **date** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **date** (optional)\n\n    \n\n    configuration := sailpoint.NewDefaultConfiguration()\n    apiClient := sailpoint.NewAPIClient(configuration)\n    resp, r, err := apiClient.V3.SourceUsagesAPI.GetUsagesBySourceId(context.Background(), sourceId).Execute()\n	  //resp, r, err := apiClient.V3.SourceUsagesAPI.GetUsagesBySourceId(context.Background(), sourceId).Limit(limit).Offset(offset).Count(count).Sorters(sorters).Execute()\n    if err != nil {\n	    fmt.Fprintf(os.Stderr, "Error when calling `SourceUsagesAPI.GetUsagesBySourceId``: %v\\n", err)\n	    fmt.Fprintf(os.Stderr, "Full HTTP response: %v\\n", r)\n    }\n    // response from `GetUsagesBySourceId`: []SourceUsage\n    fmt.Fprintf(os.Stdout, "Response from `SourceUsagesAPI.GetUsagesBySourceId`: %v\\n", resp)\n}\n'})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"#",children:"[Back to top]"})})]})}function u(e={}){let{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},250065:function(e,t,s){s.d(t,{Z:()=>a,a:()=>i});var r=s(667294);let n={},o=r.createContext(n);function i(e){let t=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),r.createElement(o.Provider,{value:t},e.children)}},443729:function(e){e.exports=JSON.parse('{"id":"tools/sdk/go/Reference/V3/Methods/source-usages","title":"SourceUsages","description":"Use this API to implement source usage insight functionality.","source":"@site/docs/tools/sdk/go/Reference/V3/Methods/SourceUsagesAPI.md","sourceDirName":"tools/sdk/go/Reference/V3/Methods","slug":"/tools/sdk/go/v3/methods/source-usages","permalink":"/docs/tools/sdk/go/v3/methods/source-usages","draft":false,"unlisted":false,"editUrl":"https://github.com/sailpoint-oss/developer.sailpoint.com/edit/main/docs/tools/sdk/go/Reference/V3/Methods/SourceUsagesAPI.md","tags":[{"inline":true,"label":"SDK","permalink":"/docs/tags/sdk"},{"inline":true,"label":"Software Development Kit","permalink":"/docs/tags/software-development-kit"},{"inline":true,"label":"SourceUsages","permalink":"/docs/tags/source-usages"},{"inline":true,"label":"SourceUsages","permalink":"/docs/tags/source-usages"}],"version":"current","lastUpdatedBy":"developer-relations-sp","lastUpdatedAt":1747249694000,"frontMatter":{"id":"source-usages","title":"SourceUsages","pagination_label":"SourceUsages","sidebar_label":"SourceUsages","sidebar_class_name":"gosdk","keywords":["go","Golang","sdk","SourceUsages","SourceUsages"],"slug":"/tools/sdk/go/v3/methods/source-usages","tags":["SDK","Software Development Kit","SourceUsages","SourceUsages"]},"sidebar":"openApiSidebar","previous":{"title":"ServiceDeskIntegration","permalink":"/docs/tools/sdk/go/v3/methods/service-desk-integration"},"next":{"title":"Sources","permalink":"/docs/tools/sdk/go/v3/methods/sources"}}')}}]);