"use strict";(self.webpackChunksailpoint_developer_portal=self.webpackChunksailpoint_developer_portal||[]).push([["624709"],{209557:function(e,t,r){r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>n,toc:()=>d});var n=r(754687),s=r(785893),o=r(250065);let i={id:"typescript-sdk-error-handling",title:"Error handling with The TypeScript SDK",pagination_label:"Error Handling",sidebar_label:"Error Handling",sidebar_position:8,sidebar_class_name:"typescriptsdk",keywords:["tsc","typescript","sdk","error"],description:"Learn how to configure error handling when using the TypeScript SDK.",slug:"/tools/sdk/typescript/error-handling",tags:["SDK"]},a=void 0,l={},d=[];function p(e){let t={code:"code",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"The TypeScript SDK uses the Axios library to handle HTTP requests. Axios will throw an error for any response status that falls outside the range of 2xx. A non-2xx response will immediately halt the program and produce a stack trace. Axios provides two methods for gracefully handling error responses from an API."}),"\n",(0,s.jsxs)(t.p,{children:["The first method is to use a ",(0,s.jsx)(t.code,{children:"catch"})," function to intercept any unsuccessful response and take actions on the results, such as logging the message or performing additional actions before exiting the program:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:"showLineNumbers",children:"// Catch any non 2xx response and log the error message and metadata\nlet transforms = await api.listTransforms().catch(function (error) {\n  console.log(error.response.data);\n  console.log(error.response.status);\n  console.log(error.response.headers);\n});\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The second method is to define which HTTP status codes should throw an error for a given request using the ",(0,s.jsx)(t.code,{children:"validateStatus"})," option. This gives you an opportunity to recover from a bad request without exiting the program."]}),"\n",(0,s.jsx)(t.p,{children:"If you don't want the program to exit for 4xx response codes, you can use this configuration:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:"showLineNumbers",children:"// Resolve only if the status code is less than 500\nlet transforms = await api.listTransforms(\n  {filters: 'id eq'},\n  {\n    validateStatus: function (status) {\n      return status < 500;\n    },\n  },\n);\n\nif (transforms.status === 200) {\n  console.log(transforms);\n} else if (transforms.status === 400) {\n  console.log('The filter is invalid.  Continuing execution.');\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:"If you don't want the program to exit for any error response, you can use this configuration:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"await api.listTransforms(\n  {},\n  {\n    validateStatus: function (status) {\n      return true;\n    },\n  },\n);\n"})})]})}function c(e={}){let{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},250065:function(e,t,r){r.d(t,{Z:()=>a,a:()=>i});var n=r(667294);let s={},o=n.createContext(s);function i(e){let t=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(o.Provider,{value:t},e.children)}},754687:function(e){e.exports=JSON.parse('{"id":"tools/sdk/typescript/typescript-sdk-error-handling","title":"Error handling with The TypeScript SDK","description":"Learn how to configure error handling when using the TypeScript SDK.","source":"@site/docs/tools/sdk/typescript/error-handling.md","sourceDirName":"tools/sdk/typescript","slug":"/tools/sdk/typescript/error-handling","permalink":"/docs/tools/sdk/typescript/error-handling","draft":false,"unlisted":false,"editUrl":"https://github.com/sailpoint-oss/developer.sailpoint.com/edit/main/docs/tools/sdk/typescript/error-handling.md","tags":[{"inline":true,"label":"SDK","permalink":"/docs/tags/sdk"}],"version":"current","lastUpdatedBy":"darrell-thobe-sp","lastUpdatedAt":1746721553000,"sidebarPosition":8,"frontMatter":{"id":"typescript-sdk-error-handling","title":"Error handling with The TypeScript SDK","pagination_label":"Error Handling","sidebar_label":"Error Handling","sidebar_position":8,"sidebar_class_name":"typescriptsdk","keywords":["tsc","typescript","sdk","error"],"description":"Learn how to configure error handling when using the TypeScript SDK.","slug":"/tools/sdk/typescript/error-handling","tags":["SDK"]},"sidebar":"openApiSidebar","previous":{"title":"Retries","permalink":"/docs/tools/sdk/typescript/retries"},"next":{"title":"RDK","permalink":"/docs/tools/rule-development-kit"}}')}}]);