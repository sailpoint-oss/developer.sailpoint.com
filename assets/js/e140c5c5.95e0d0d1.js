"use strict";(self.webpackChunksailpoint_developer_portal=self.webpackChunksailpoint_developer_portal||[]).push([["212362"],{544937:function(e,t,n){n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var i=n(515611),r=n(785893),s=n(250065);let a={id:"v2024-sim-integrations",title:"SIMIntegrations",pagination_label:"SIMIntegrations",sidebar_label:"SIMIntegrations",sidebar_class_name:"gosdk",keywords:["go","Golang","sdk","SIMIntegrations","V2024SIMIntegrations"],slug:"/tools/sdk/go/v2024/methods/sim-integrations",tags:["SDK","Software Development Kit","SIMIntegrations","V2024SIMIntegrations"]},o="SIMIntegrationsAPI",l={},d=[{value:"create-sim-integration",id:"create-sim-integration",level:2},{value:"Path Parameters",id:"path-parameters",level:3},{value:"Other Parameters",id:"other-parameters",level:3},{value:"Return type",id:"return-type",level:3},{value:"HTTP request headers",id:"http-request-headers",level:3},{value:"Example",id:"example",level:3},{value:"delete-sim-integration",id:"delete-sim-integration",level:2},{value:"Path Parameters",id:"path-parameters-1",level:3},{value:"Other Parameters",id:"other-parameters-1",level:3},{value:"Return type",id:"return-type-1",level:3},{value:"HTTP request headers",id:"http-request-headers-1",level:3},{value:"Example",id:"example-1",level:3},{value:"get-sim-integration",id:"get-sim-integration",level:2},{value:"Path Parameters",id:"path-parameters-2",level:3},{value:"Other Parameters",id:"other-parameters-2",level:3},{value:"Return type",id:"return-type-2",level:3},{value:"HTTP request headers",id:"http-request-headers-2",level:3},{value:"Example",id:"example-2",level:3},{value:"get-sim-integrations",id:"get-sim-integrations",level:2},{value:"Path Parameters",id:"path-parameters-3",level:3},{value:"Other Parameters",id:"other-parameters-3",level:3},{value:"Return type",id:"return-type-3",level:3},{value:"HTTP request headers",id:"http-request-headers-3",level:3},{value:"Example",id:"example-3",level:3},{value:"patch-before-provisioning-rule",id:"patch-before-provisioning-rule",level:2},{value:"Path Parameters",id:"path-parameters-4",level:3},{value:"Other Parameters",id:"other-parameters-4",level:3},{value:"Return type",id:"return-type-4",level:3},{value:"HTTP request headers",id:"http-request-headers-4",level:3},{value:"Example",id:"example-4",level:3},{value:"patch-sim-attributes",id:"patch-sim-attributes",level:2},{value:"Path Parameters",id:"path-parameters-5",level:3},{value:"Other Parameters",id:"other-parameters-5",level:3},{value:"Return type",id:"return-type-5",level:3},{value:"HTTP request headers",id:"http-request-headers-5",level:3},{value:"Example",id:"example-5",level:3},{value:"put-sim-integration",id:"put-sim-integration",level:2},{value:"Path Parameters",id:"path-parameters-6",level:3},{value:"Other Parameters",id:"other-parameters-6",level:3},{value:"Return type",id:"return-type-6",level:3},{value:"HTTP request headers",id:"http-request-headers-6",level:3},{value:"Example",id:"example-6",level:3}];function h(e){let t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"simintegrationsapi",children:"SIMIntegrationsAPI"})}),"\n",(0,r.jsx)(t.p,{children:"Use this API to administer IdentityNow's Service Integration Module, or SIM integration with ServiceNow, so that it converts IdentityNow provisioning actions into tickets in ServiceNow."}),"\n",(0,r.jsx)(t.p,{children:"ServiceNow is a software platform that supports IT service management and automates common business processes for requesting and fulfilling service requests across a business enterprise."}),"\n",(0,r.jsx)(t.p,{children:"You must have an IdentityNow ServiceNow ServiceDesk license to use this integration. Contact your Customer Success Manager for more information."}),"\n",(0,r.jsxs)(t.p,{children:["Service Desk integration for IdentityNow and in deprecation - not available for new implementation, as of July 21st, 2021. As per SailPoint\u2019s ",(0,r.jsx)(t.a,{href:"https://community.sailpoint.com/t5/Connector-Directory/SailPoint-Support-Policy-for-Connectivity/ta-p/79422",children:"support policy"}),", all existing SailPoint IdentityNow customers using this legacy integration will be supported until July 2022."]}),"\n",(0,r.jsxs)(t.p,{children:["All URIs are relative to ",(0,r.jsx)(t.em,{children:(0,r.jsx)(t.a,{href:"https://sailpoint.api.identitynow.com/v2024",children:"https://sailpoint.api.identitynow.com/v2024"})})]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Method"}),(0,r.jsx)(t.th,{children:"HTTP request"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"#create-sim-integration",children:(0,r.jsx)(t.strong,{children:"create-sim-integration"})})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"Post"})," ",(0,r.jsx)(t.code,{children:"/sim-integrations"})]}),(0,r.jsx)(t.td,{children:"Create new sim integration"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"#delete-sim-integration",children:(0,r.jsx)(t.strong,{children:"delete-sim-integration"})})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"Delete"})," ",(0,r.jsx)(t.code,{children:"/sim-integrations/{id}"})]}),(0,r.jsx)(t.td,{children:"Delete a sim integration"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"#get-sim-integration",children:(0,r.jsx)(t.strong,{children:"get-sim-integration"})})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"Get"})," ",(0,r.jsx)(t.code,{children:"/sim-integrations/{id}"})]}),(0,r.jsx)(t.td,{children:"Get a sim integration details."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"#get-sim-integrations",children:(0,r.jsx)(t.strong,{children:"get-sim-integrations"})})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"Get"})," ",(0,r.jsx)(t.code,{children:"/sim-integrations"})]}),(0,r.jsx)(t.td,{children:"List the existing sim integrations."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"#patch-before-provisioning-rule",children:(0,r.jsx)(t.strong,{children:"patch-before-provisioning-rule"})})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"Patch"})," ",(0,r.jsx)(t.code,{children:"/sim-integrations/{id}/beforeProvisioningRule"})]}),(0,r.jsx)(t.td,{children:"Patch a sim beforeprovisioningrule attribute."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"#patch-sim-attributes",children:(0,r.jsx)(t.strong,{children:"patch-sim-attributes"})})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"Patch"})," ",(0,r.jsx)(t.code,{children:"/sim-integrations/{id}"})]}),(0,r.jsx)(t.td,{children:"Patch a sim attribute."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"#put-sim-integration",children:(0,r.jsx)(t.strong,{children:"put-sim-integration"})})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"Put"})," ",(0,r.jsx)(t.code,{children:"/sim-integrations/{id}"})]}),(0,r.jsx)(t.td,{children:"Update an existing sim integration"})]})]})]}),"\n",(0,r.jsx)(t.h2,{id:"create-sim-integration",children:"create-sim-integration"}),"\n",(0,r.jsx)(t.admonition,{title:"experimental",type:"warning",children:(0,r.jsxs)(t.p,{children:["This API is currently in an experimental state. The API is subject to change based on feedback and further testing. You must include the X-SailPoint-Experimental header and set it to ",(0,r.jsx)(t.code,{children:"true"})," to use this endpoint."]})}),"\n",(0,r.jsxs)(t.admonition,{title:"setting x-sailpoint-experimental header",type:"tip",children:[(0,r.jsxs)(t.p,{children:["on the configuration object you can set the ",(0,r.jsx)(t.code,{children:"x-sailpoint-experimental"})," header to `true' to enable all experimantl endpoints within the SDK.\nExample:"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:"  configuration = Configuration()\n  configuration.experimental = True\n"})})]}),"\n",(0,r.jsx)(t.p,{children:"Create new sim integration\nCreate a new SIM Integrations."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://developer.sailpoint.com/docs/api/v2024/create-sim-integration",children:"API Spec"})}),"\n",(0,r.jsx)(t.h3,{id:"path-parameters",children:"Path Parameters"}),"\n",(0,r.jsx)(t.h3,{id:"other-parameters",children:"Other Parameters"}),"\n",(0,r.jsx)(t.p,{children:"Other parameters are passed through a pointer to a apiCreateSIMIntegrationRequest struct via the builder pattern"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Name"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"}),(0,r.jsx)(t.th,{children:"Notes"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"xSailPointExperimental"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"string"})}),(0,r.jsx)(t.td,{children:"Use this header to enable this experimental API."}),(0,r.jsx)(t.td,{children:'[default to "true"]'})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"simIntegrationDetails"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"../models/sim-integration-details",children:(0,r.jsx)(t.strong,{children:"SimIntegrationDetails"})})}),(0,r.jsx)(t.td,{children:"DTO containing the details of the SIM integration"}),(0,r.jsx)(t.td,{})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"return-type",children:"Return type"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"../models/service-desk-integration-dto",children:(0,r.jsx)(t.strong,{children:"ServiceDeskIntegrationDto"})})}),"\n",(0,r.jsx)(t.h3,{id:"http-request-headers",children:"HTTP request headers"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Content-Type"}),": application/json"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Accept"}),": application/json"]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"example",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n	"context"\n	"fmt"\n	"os"\n  "encoding/json"\n    v2024 "github.com/sailpoint-oss/golang-sdk/v2/api_v2024"\n	sailpoint "github.com/sailpoint-oss/golang-sdk/v2"\n)\n\nfunc main() {\n    xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")\n    simintegrationdetails := []byte(`{\n          "cluster" : "xyzzy999",\n          "statusMap" : "{closed_cancelled=Failed, closed_complete=Committed, closed_incomplete=Failed, closed_rejected=Failed, in_process=Queued, requested=Queued}",\n          "request" : "{description=SailPoint Access Request,, req_description=The Service Request created by SailPoint ServiceNow Service Integration Module (SIM).,, req_short_description=SailPoint New Access Request Created from IdentityNow,, short_description=SailPoint Access Request $!plan.arguments.identityRequestId}",\n          "sources" : [ "2c9180835d191a86015d28455b4a2329", "2c5680835d191a85765d28455b4a9823" ],\n          "created" : "2015-05-28T14:07:17Z",\n          "name" : "aName",\n          "modified" : "2015-05-28T14:07:17Z",\n          "description" : "Integration description",\n          "attributes" : "{\\"uid\\":\\"Walter White\\",\\"firstname\\":\\"walter\\",\\"cloudStatus\\":\\"UNREGISTERED\\",\\"displayName\\":\\"Walter White\\",\\"identificationNumber\\":\\"942\\",\\"lastSyncDate\\":1470348809380,\\"email\\":\\"walter@gmail.com\\",\\"lastname\\":\\"white\\"}",\n          "id" : "id12345",\n          "type" : "ServiceNow Service Desk",\n          "beforeProvisioningRule" : {\n            "name" : "Example Rule",\n            "id" : "2c918085708c274401708c2a8a760001",\n            "type" : "IDENTITY"\n          }\n        }`) // SimIntegrationDetails | DTO containing the details of the SIM integration\n\n    var simIntegrationDetails v2024.SimIntegrationDetails\n    if err := json.Unmarshal(simintegrationdetails, &simIntegrationDetails); err != nil {\n      fmt.Println("Error:", err)\n      return\n    }\n    \n\n    configuration := sailpoint.NewDefaultConfiguration()\n    apiClient := sailpoint.NewAPIClient(configuration)\n    resp, r, err := apiClient.V2024.SIMIntegrationsAPI.CreateSIMIntegration(context.Background()).XSailPointExperimental(xSailPointExperimental).SimIntegrationDetails(simIntegrationDetails).Execute()\n	  //resp, r, err := apiClient.V2024.SIMIntegrationsAPI.CreateSIMIntegration(context.Background()).XSailPointExperimental(xSailPointExperimental).SimIntegrationDetails(simIntegrationDetails).Execute()\n    if err != nil {\n	    fmt.Fprintf(os.Stderr, "Error when calling `SIMIntegrationsAPI.CreateSIMIntegration``: %v\\n", err)\n	    fmt.Fprintf(os.Stderr, "Full HTTP response: %v\\n", r)\n    }\n    // response from `CreateSIMIntegration`: ServiceDeskIntegrationDto\n    fmt.Fprintf(os.Stdout, "Response from `SIMIntegrationsAPI.CreateSIMIntegration`: %v\\n", resp)\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"#",children:"[Back to top]"})}),"\n",(0,r.jsx)(t.h2,{id:"delete-sim-integration",children:"delete-sim-integration"}),"\n",(0,r.jsx)(t.admonition,{title:"experimental",type:"warning",children:(0,r.jsxs)(t.p,{children:["This API is currently in an experimental state. The API is subject to change based on feedback and further testing. You must include the X-SailPoint-Experimental header and set it to ",(0,r.jsx)(t.code,{children:"true"})," to use this endpoint."]})}),"\n",(0,r.jsxs)(t.admonition,{title:"setting x-sailpoint-experimental header",type:"tip",children:[(0,r.jsxs)(t.p,{children:["on the configuration object you can set the ",(0,r.jsx)(t.code,{children:"x-sailpoint-experimental"})," header to `true' to enable all experimantl endpoints within the SDK.\nExample:"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:"  configuration = Configuration()\n  configuration.experimental = True\n"})})]}),"\n",(0,r.jsx)(t.p,{children:"Delete a sim integration\nGet the details of a SIM integration."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://developer.sailpoint.com/docs/api/v2024/delete-sim-integration",children:"API Spec"})}),"\n",(0,r.jsx)(t.h3,{id:"path-parameters-1",children:"Path Parameters"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Name"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"}),(0,r.jsx)(t.th,{children:"Notes"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"ctx"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"context.Context"})}),(0,r.jsx)(t.td,{children:"context for authentication, logging, cancellation, deadlines, tracing, etc."}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"id"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"string"})}),(0,r.jsx)(t.td,{children:"The id of the integration to delete."}),(0,r.jsx)(t.td,{})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"other-parameters-1",children:"Other Parameters"}),"\n",(0,r.jsx)(t.p,{children:"Other parameters are passed through a pointer to a apiDeleteSIMIntegrationRequest struct via the builder pattern"}),"\n",(0,r.jsx)(t.table,{children:(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Name"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"}),(0,r.jsx)(t.th,{children:"Notes"})]})})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"xSailPointExperimental"})," | ",(0,r.jsx)(t.strong,{children:"string"}),' | Use this header to enable this experimental API. | [default to "true"]']}),"\n",(0,r.jsx)(t.h3,{id:"return-type-1",children:"Return type"}),"\n",(0,r.jsx)(t.p,{children:"(empty response body)"}),"\n",(0,r.jsx)(t.h3,{id:"http-request-headers-1",children:"HTTP request headers"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Content-Type"}),": Not defined"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Accept"}),": application/json"]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"example-1",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n	"context"\n	"fmt"\n	"os"\n  \n    \n	sailpoint "github.com/sailpoint-oss/golang-sdk/v2"\n)\n\nfunc main() {\n    id := `12345` // string | The id of the integration to delete. # string | The id of the integration to delete.\n    xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")\n\n    \n\n    configuration := sailpoint.NewDefaultConfiguration()\n    apiClient := sailpoint.NewAPIClient(configuration)\n    r, err := apiClient.V2024.SIMIntegrationsAPI.DeleteSIMIntegration(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()\n	  //r, err := apiClient.V2024.SIMIntegrationsAPI.DeleteSIMIntegration(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()\n    if err != nil {\n	    fmt.Fprintf(os.Stderr, "Error when calling `SIMIntegrationsAPI.DeleteSIMIntegration``: %v\\n", err)\n	    fmt.Fprintf(os.Stderr, "Full HTTP response: %v\\n", r)\n    }\n    \n}\n'})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"#",children:"[Back to top]"})}),"\n",(0,r.jsx)(t.h2,{id:"get-sim-integration",children:"get-sim-integration"}),"\n",(0,r.jsx)(t.admonition,{title:"experimental",type:"warning",children:(0,r.jsxs)(t.p,{children:["This API is currently in an experimental state. The API is subject to change based on feedback and further testing. You must include the X-SailPoint-Experimental header and set it to ",(0,r.jsx)(t.code,{children:"true"})," to use this endpoint."]})}),"\n",(0,r.jsxs)(t.admonition,{title:"setting x-sailpoint-experimental header",type:"tip",children:[(0,r.jsxs)(t.p,{children:["on the configuration object you can set the ",(0,r.jsx)(t.code,{children:"x-sailpoint-experimental"})," header to `true' to enable all experimantl endpoints within the SDK.\nExample:"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:"  configuration = Configuration()\n  configuration.experimental = True\n"})})]}),"\n",(0,r.jsx)(t.p,{children:"Get a sim integration details.\nGet the details of a SIM integration."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://developer.sailpoint.com/docs/api/v2024/get-sim-integration",children:"API Spec"})}),"\n",(0,r.jsx)(t.h3,{id:"path-parameters-2",children:"Path Parameters"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Name"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"}),(0,r.jsx)(t.th,{children:"Notes"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"ctx"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"context.Context"})}),(0,r.jsx)(t.td,{children:"context for authentication, logging, cancellation, deadlines, tracing, etc."}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"id"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"string"})}),(0,r.jsx)(t.td,{children:"The id of the integration."}),(0,r.jsx)(t.td,{})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"other-parameters-2",children:"Other Parameters"}),"\n",(0,r.jsx)(t.p,{children:"Other parameters are passed through a pointer to a apiGetSIMIntegrationRequest struct via the builder pattern"}),"\n",(0,r.jsx)(t.table,{children:(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Name"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"}),(0,r.jsx)(t.th,{children:"Notes"})]})})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"xSailPointExperimental"})," | ",(0,r.jsx)(t.strong,{children:"string"}),' | Use this header to enable this experimental API. | [default to "true"]']}),"\n",(0,r.jsx)(t.h3,{id:"return-type-2",children:"Return type"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"../models/service-desk-integration-dto",children:(0,r.jsx)(t.strong,{children:"ServiceDeskIntegrationDto"})})}),"\n",(0,r.jsx)(t.h3,{id:"http-request-headers-2",children:"HTTP request headers"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Content-Type"}),": Not defined"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Accept"}),": application/json"]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"example-2",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n	"context"\n	"fmt"\n	"os"\n  \n    \n	sailpoint "github.com/sailpoint-oss/golang-sdk/v2"\n)\n\nfunc main() {\n    id := `12345` // string | The id of the integration. # string | The id of the integration.\n    xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")\n\n    \n\n    configuration := sailpoint.NewDefaultConfiguration()\n    apiClient := sailpoint.NewAPIClient(configuration)\n    resp, r, err := apiClient.V2024.SIMIntegrationsAPI.GetSIMIntegration(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()\n	  //resp, r, err := apiClient.V2024.SIMIntegrationsAPI.GetSIMIntegration(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()\n    if err != nil {\n	    fmt.Fprintf(os.Stderr, "Error when calling `SIMIntegrationsAPI.GetSIMIntegration``: %v\\n", err)\n	    fmt.Fprintf(os.Stderr, "Full HTTP response: %v\\n", r)\n    }\n    // response from `GetSIMIntegration`: ServiceDeskIntegrationDto\n    fmt.Fprintf(os.Stdout, "Response from `SIMIntegrationsAPI.GetSIMIntegration`: %v\\n", resp)\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"#",children:"[Back to top]"})}),"\n",(0,r.jsx)(t.h2,{id:"get-sim-integrations",children:"get-sim-integrations"}),"\n",(0,r.jsx)(t.admonition,{title:"experimental",type:"warning",children:(0,r.jsxs)(t.p,{children:["This API is currently in an experimental state. The API is subject to change based on feedback and further testing. You must include the X-SailPoint-Experimental header and set it to ",(0,r.jsx)(t.code,{children:"true"})," to use this endpoint."]})}),"\n",(0,r.jsxs)(t.admonition,{title:"setting x-sailpoint-experimental header",type:"tip",children:[(0,r.jsxs)(t.p,{children:["on the configuration object you can set the ",(0,r.jsx)(t.code,{children:"x-sailpoint-experimental"})," header to `true' to enable all experimantl endpoints within the SDK.\nExample:"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:"  configuration = Configuration()\n  configuration.experimental = True\n"})})]}),"\n",(0,r.jsx)(t.p,{children:"List the existing sim integrations.\nList the existing SIM integrations."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://developer.sailpoint.com/docs/api/v2024/get-sim-integrations",children:"API Spec"})}),"\n",(0,r.jsx)(t.h3,{id:"path-parameters-3",children:"Path Parameters"}),"\n",(0,r.jsx)(t.h3,{id:"other-parameters-3",children:"Other Parameters"}),"\n",(0,r.jsx)(t.p,{children:"Other parameters are passed through a pointer to a apiGetSIMIntegrationsRequest struct via the builder pattern"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Name"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"}),(0,r.jsx)(t.th,{children:"Notes"})]})}),(0,r.jsx)(t.tbody,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"xSailPointExperimental"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"string"})}),(0,r.jsx)(t.td,{children:"Use this header to enable this experimental API."}),(0,r.jsx)(t.td,{children:'[default to "true"]'})]})})]}),"\n",(0,r.jsx)(t.h3,{id:"return-type-3",children:"Return type"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"../models/service-desk-integration-dto",children:(0,r.jsx)(t.strong,{children:"[]ServiceDeskIntegrationDto"})})}),"\n",(0,r.jsx)(t.h3,{id:"http-request-headers-3",children:"HTTP request headers"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Content-Type"}),": Not defined"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Accept"}),": application/json"]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"example-3",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n	"context"\n	"fmt"\n	"os"\n  \n    \n	sailpoint "github.com/sailpoint-oss/golang-sdk/v2"\n)\n\nfunc main() {\n    xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")\n\n    \n\n    configuration := sailpoint.NewDefaultConfiguration()\n    apiClient := sailpoint.NewAPIClient(configuration)\n    resp, r, err := apiClient.V2024.SIMIntegrationsAPI.GetSIMIntegrations(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()\n	  //resp, r, err := apiClient.V2024.SIMIntegrationsAPI.GetSIMIntegrations(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()\n    if err != nil {\n	    fmt.Fprintf(os.Stderr, "Error when calling `SIMIntegrationsAPI.GetSIMIntegrations``: %v\\n", err)\n	    fmt.Fprintf(os.Stderr, "Full HTTP response: %v\\n", r)\n    }\n    // response from `GetSIMIntegrations`: []ServiceDeskIntegrationDto\n    fmt.Fprintf(os.Stdout, "Response from `SIMIntegrationsAPI.GetSIMIntegrations`: %v\\n", resp)\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"#",children:"[Back to top]"})}),"\n",(0,r.jsx)(t.h2,{id:"patch-before-provisioning-rule",children:"patch-before-provisioning-rule"}),"\n",(0,r.jsx)(t.admonition,{title:"experimental",type:"warning",children:(0,r.jsxs)(t.p,{children:["This API is currently in an experimental state. The API is subject to change based on feedback and further testing. You must include the X-SailPoint-Experimental header and set it to ",(0,r.jsx)(t.code,{children:"true"})," to use this endpoint."]})}),"\n",(0,r.jsxs)(t.admonition,{title:"setting x-sailpoint-experimental header",type:"tip",children:[(0,r.jsxs)(t.p,{children:["on the configuration object you can set the ",(0,r.jsx)(t.code,{children:"x-sailpoint-experimental"})," header to `true' to enable all experimantl endpoints within the SDK.\nExample:"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:"  configuration = Configuration()\n  configuration.experimental = True\n"})})]}),"\n",(0,r.jsx)(t.p,{children:"Patch a sim beforeprovisioningrule attribute.\nPatch a SIM beforeProvisioningRule attribute given a JsonPatch object."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://developer.sailpoint.com/docs/api/v2024/patch-before-provisioning-rule",children:"API Spec"})}),"\n",(0,r.jsx)(t.h3,{id:"path-parameters-4",children:"Path Parameters"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Name"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"}),(0,r.jsx)(t.th,{children:"Notes"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"ctx"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"context.Context"})}),(0,r.jsx)(t.td,{children:"context for authentication, logging, cancellation, deadlines, tracing, etc."}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"id"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"string"})}),(0,r.jsx)(t.td,{children:"SIM integration id"}),(0,r.jsx)(t.td,{})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"other-parameters-4",children:"Other Parameters"}),"\n",(0,r.jsx)(t.p,{children:"Other parameters are passed through a pointer to a apiPatchBeforeProvisioningRuleRequest struct via the builder pattern"}),"\n",(0,r.jsx)(t.table,{children:(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Name"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"}),(0,r.jsx)(t.th,{children:"Notes"})]})})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"xSailPointExperimental"})," | ",(0,r.jsx)(t.strong,{children:"string"}),' | Use this header to enable this experimental API. | [default to "true"]\n',(0,r.jsx)(t.strong,{children:"jsonPatch"})," | ",(0,r.jsx)(t.a,{href:"../models/json-patch",children:(0,r.jsx)(t.strong,{children:"JsonPatch"})})," | The JsonPatch object that describes the changes of SIM beforeProvisioningRule. |"]}),"\n",(0,r.jsx)(t.h3,{id:"return-type-4",children:"Return type"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"../models/service-desk-integration-dto",children:(0,r.jsx)(t.strong,{children:"ServiceDeskIntegrationDto"})})}),"\n",(0,r.jsx)(t.h3,{id:"http-request-headers-4",children:"HTTP request headers"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Content-Type"}),": application/json-patch+json"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Accept"}),": application/json"]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"example-4",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n	"context"\n	"fmt"\n	"os"\n  "encoding/json"\n    v2024 "github.com/sailpoint-oss/golang-sdk/v2/api_v2024"\n	sailpoint "github.com/sailpoint-oss/golang-sdk/v2"\n)\n\nfunc main() {\n    id := `12345` // string | SIM integration id # string | SIM integration id\n    xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")\n    jsonpatch := []byte(`{\n          "operations" : [ {\n            "op" : "replace",\n            "path" : "/description",\n            "value" : "New description"\n          }, {\n            "op" : "replace",\n            "path" : "/description",\n            "value" : "New description"\n          } ]\n        }`) // JsonPatch | The JsonPatch object that describes the changes of SIM beforeProvisioningRule.\n\n    var jsonPatch v2024.JsonPatch\n    if err := json.Unmarshal(jsonpatch, &jsonPatch); err != nil {\n      fmt.Println("Error:", err)\n      return\n    }\n    \n\n    configuration := sailpoint.NewDefaultConfiguration()\n    apiClient := sailpoint.NewAPIClient(configuration)\n    resp, r, err := apiClient.V2024.SIMIntegrationsAPI.PatchBeforeProvisioningRule(context.Background(), id).XSailPointExperimental(xSailPointExperimental).JsonPatch(jsonPatch).Execute()\n	  //resp, r, err := apiClient.V2024.SIMIntegrationsAPI.PatchBeforeProvisioningRule(context.Background(), id).XSailPointExperimental(xSailPointExperimental).JsonPatch(jsonPatch).Execute()\n    if err != nil {\n	    fmt.Fprintf(os.Stderr, "Error when calling `SIMIntegrationsAPI.PatchBeforeProvisioningRule``: %v\\n", err)\n	    fmt.Fprintf(os.Stderr, "Full HTTP response: %v\\n", r)\n    }\n    // response from `PatchBeforeProvisioningRule`: ServiceDeskIntegrationDto\n    fmt.Fprintf(os.Stdout, "Response from `SIMIntegrationsAPI.PatchBeforeProvisioningRule`: %v\\n", resp)\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"#",children:"[Back to top]"})}),"\n",(0,r.jsx)(t.h2,{id:"patch-sim-attributes",children:"patch-sim-attributes"}),"\n",(0,r.jsx)(t.admonition,{title:"experimental",type:"warning",children:(0,r.jsxs)(t.p,{children:["This API is currently in an experimental state. The API is subject to change based on feedback and further testing. You must include the X-SailPoint-Experimental header and set it to ",(0,r.jsx)(t.code,{children:"true"})," to use this endpoint."]})}),"\n",(0,r.jsxs)(t.admonition,{title:"setting x-sailpoint-experimental header",type:"tip",children:[(0,r.jsxs)(t.p,{children:["on the configuration object you can set the ",(0,r.jsx)(t.code,{children:"x-sailpoint-experimental"})," header to `true' to enable all experimantl endpoints within the SDK.\nExample:"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:"  configuration = Configuration()\n  configuration.experimental = True\n"})})]}),"\n",(0,r.jsx)(t.p,{children:"Patch a sim attribute.\nPatch a SIM attribute given a JsonPatch object."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://developer.sailpoint.com/docs/api/v2024/patch-sim-attributes",children:"API Spec"})}),"\n",(0,r.jsx)(t.h3,{id:"path-parameters-5",children:"Path Parameters"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Name"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"}),(0,r.jsx)(t.th,{children:"Notes"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"ctx"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"context.Context"})}),(0,r.jsx)(t.td,{children:"context for authentication, logging, cancellation, deadlines, tracing, etc."}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"id"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"string"})}),(0,r.jsx)(t.td,{children:"SIM integration id"}),(0,r.jsx)(t.td,{})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"other-parameters-5",children:"Other Parameters"}),"\n",(0,r.jsx)(t.p,{children:"Other parameters are passed through a pointer to a apiPatchSIMAttributesRequest struct via the builder pattern"}),"\n",(0,r.jsx)(t.table,{children:(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Name"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"}),(0,r.jsx)(t.th,{children:"Notes"})]})})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"xSailPointExperimental"})," | ",(0,r.jsx)(t.strong,{children:"string"}),' | Use this header to enable this experimental API. | [default to "true"]\n',(0,r.jsx)(t.strong,{children:"jsonPatch"})," | ",(0,r.jsx)(t.a,{href:"../models/json-patch",children:(0,r.jsx)(t.strong,{children:"JsonPatch"})})," | The JsonPatch object that describes the changes of SIM |"]}),"\n",(0,r.jsx)(t.h3,{id:"return-type-5",children:"Return type"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"../models/service-desk-integration-dto",children:(0,r.jsx)(t.strong,{children:"ServiceDeskIntegrationDto"})})}),"\n",(0,r.jsx)(t.h3,{id:"http-request-headers-5",children:"HTTP request headers"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Content-Type"}),": application/json-patch+json"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Accept"}),": application/json"]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"example-5",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n	"context"\n	"fmt"\n	"os"\n  "encoding/json"\n    v2024 "github.com/sailpoint-oss/golang-sdk/v2/api_v2024"\n	sailpoint "github.com/sailpoint-oss/golang-sdk/v2"\n)\n\nfunc main() {\n    id := `12345` // string | SIM integration id # string | SIM integration id\n    xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")\n    jsonpatch := []byte(`{\n          "operations" : [ {\n            "op" : "replace",\n            "path" : "/description",\n            "value" : "New description"\n          }, {\n            "op" : "replace",\n            "path" : "/description",\n            "value" : "New description"\n          } ]\n        }`) // JsonPatch | The JsonPatch object that describes the changes of SIM\n\n    var jsonPatch v2024.JsonPatch\n    if err := json.Unmarshal(jsonpatch, &jsonPatch); err != nil {\n      fmt.Println("Error:", err)\n      return\n    }\n    \n\n    configuration := sailpoint.NewDefaultConfiguration()\n    apiClient := sailpoint.NewAPIClient(configuration)\n    resp, r, err := apiClient.V2024.SIMIntegrationsAPI.PatchSIMAttributes(context.Background(), id).XSailPointExperimental(xSailPointExperimental).JsonPatch(jsonPatch).Execute()\n	  //resp, r, err := apiClient.V2024.SIMIntegrationsAPI.PatchSIMAttributes(context.Background(), id).XSailPointExperimental(xSailPointExperimental).JsonPatch(jsonPatch).Execute()\n    if err != nil {\n	    fmt.Fprintf(os.Stderr, "Error when calling `SIMIntegrationsAPI.PatchSIMAttributes``: %v\\n", err)\n	    fmt.Fprintf(os.Stderr, "Full HTTP response: %v\\n", r)\n    }\n    // response from `PatchSIMAttributes`: ServiceDeskIntegrationDto\n    fmt.Fprintf(os.Stdout, "Response from `SIMIntegrationsAPI.PatchSIMAttributes`: %v\\n", resp)\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"#",children:"[Back to top]"})}),"\n",(0,r.jsx)(t.h2,{id:"put-sim-integration",children:"put-sim-integration"}),"\n",(0,r.jsx)(t.admonition,{title:"experimental",type:"warning",children:(0,r.jsxs)(t.p,{children:["This API is currently in an experimental state. The API is subject to change based on feedback and further testing. You must include the X-SailPoint-Experimental header and set it to ",(0,r.jsx)(t.code,{children:"true"})," to use this endpoint."]})}),"\n",(0,r.jsxs)(t.admonition,{title:"setting x-sailpoint-experimental header",type:"tip",children:[(0,r.jsxs)(t.p,{children:["on the configuration object you can set the ",(0,r.jsx)(t.code,{children:"x-sailpoint-experimental"})," header to `true' to enable all experimantl endpoints within the SDK.\nExample:"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:"  configuration = Configuration()\n  configuration.experimental = True\n"})})]}),"\n",(0,r.jsx)(t.p,{children:"Update an existing sim integration\nUpdate an existing SIM integration."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://developer.sailpoint.com/docs/api/v2024/put-sim-integration",children:"API Spec"})}),"\n",(0,r.jsx)(t.h3,{id:"path-parameters-6",children:"Path Parameters"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Name"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"}),(0,r.jsx)(t.th,{children:"Notes"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"ctx"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"context.Context"})}),(0,r.jsx)(t.td,{children:"context for authentication, logging, cancellation, deadlines, tracing, etc."}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"id"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"string"})}),(0,r.jsx)(t.td,{children:"The id of the integration."}),(0,r.jsx)(t.td,{})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"other-parameters-6",children:"Other Parameters"}),"\n",(0,r.jsx)(t.p,{children:"Other parameters are passed through a pointer to a apiPutSIMIntegrationRequest struct via the builder pattern"}),"\n",(0,r.jsx)(t.table,{children:(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Name"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"}),(0,r.jsx)(t.th,{children:"Notes"})]})})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"xSailPointExperimental"})," | ",(0,r.jsx)(t.strong,{children:"string"}),' | Use this header to enable this experimental API. | [default to "true"]\n',(0,r.jsx)(t.strong,{children:"simIntegrationDetails"})," | ",(0,r.jsx)(t.a,{href:"../models/sim-integration-details",children:(0,r.jsx)(t.strong,{children:"SimIntegrationDetails"})})," | The full DTO of the integration containing the updated model |"]}),"\n",(0,r.jsx)(t.h3,{id:"return-type-6",children:"Return type"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"../models/service-desk-integration-dto",children:(0,r.jsx)(t.strong,{children:"ServiceDeskIntegrationDto"})})}),"\n",(0,r.jsx)(t.h3,{id:"http-request-headers-6",children:"HTTP request headers"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Content-Type"}),": application/json"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Accept"}),": application/json"]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"example-6",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n	"context"\n	"fmt"\n	"os"\n  "encoding/json"\n    v2024 "github.com/sailpoint-oss/golang-sdk/v2/api_v2024"\n	sailpoint "github.com/sailpoint-oss/golang-sdk/v2"\n)\n\nfunc main() {\n    id := `12345` // string | The id of the integration. # string | The id of the integration.\n    xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")\n    simintegrationdetails := []byte(`{\n          "cluster" : "xyzzy999",\n          "statusMap" : "{closed_cancelled=Failed, closed_complete=Committed, closed_incomplete=Failed, closed_rejected=Failed, in_process=Queued, requested=Queued}",\n          "request" : "{description=SailPoint Access Request,, req_description=The Service Request created by SailPoint ServiceNow Service Integration Module (SIM).,, req_short_description=SailPoint New Access Request Created from IdentityNow,, short_description=SailPoint Access Request $!plan.arguments.identityRequestId}",\n          "sources" : [ "2c9180835d191a86015d28455b4a2329", "2c5680835d191a85765d28455b4a9823" ],\n          "created" : "2015-05-28T14:07:17Z",\n          "name" : "aName",\n          "modified" : "2015-05-28T14:07:17Z",\n          "description" : "Integration description",\n          "attributes" : "{\\"uid\\":\\"Walter White\\",\\"firstname\\":\\"walter\\",\\"cloudStatus\\":\\"UNREGISTERED\\",\\"displayName\\":\\"Walter White\\",\\"identificationNumber\\":\\"942\\",\\"lastSyncDate\\":1470348809380,\\"email\\":\\"walter@gmail.com\\",\\"lastname\\":\\"white\\"}",\n          "id" : "id12345",\n          "type" : "ServiceNow Service Desk",\n          "beforeProvisioningRule" : {\n            "name" : "Example Rule",\n            "id" : "2c918085708c274401708c2a8a760001",\n            "type" : "IDENTITY"\n          }\n        }`) // SimIntegrationDetails | The full DTO of the integration containing the updated model\n\n    var simIntegrationDetails v2024.SimIntegrationDetails\n    if err := json.Unmarshal(simintegrationdetails, &simIntegrationDetails); err != nil {\n      fmt.Println("Error:", err)\n      return\n    }\n    \n\n    configuration := sailpoint.NewDefaultConfiguration()\n    apiClient := sailpoint.NewAPIClient(configuration)\n    resp, r, err := apiClient.V2024.SIMIntegrationsAPI.PutSIMIntegration(context.Background(), id).XSailPointExperimental(xSailPointExperimental).SimIntegrationDetails(simIntegrationDetails).Execute()\n	  //resp, r, err := apiClient.V2024.SIMIntegrationsAPI.PutSIMIntegration(context.Background(), id).XSailPointExperimental(xSailPointExperimental).SimIntegrationDetails(simIntegrationDetails).Execute()\n    if err != nil {\n	    fmt.Fprintf(os.Stderr, "Error when calling `SIMIntegrationsAPI.PutSIMIntegration``: %v\\n", err)\n	    fmt.Fprintf(os.Stderr, "Full HTTP response: %v\\n", r)\n    }\n    // response from `PutSIMIntegration`: ServiceDeskIntegrationDto\n    fmt.Fprintf(os.Stdout, "Response from `SIMIntegrationsAPI.PutSIMIntegration`: %v\\n", resp)\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"#",children:"[Back to top]"})})]})}function c(e={}){let{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},250065:function(e,t,n){n.d(t,{Z:()=>o,a:()=>a});var i=n(667294);let r={},s=i.createContext(r);function a(e){let t=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:t},e.children)}},515611:function(e){e.exports=JSON.parse('{"id":"tools/sdk/go/Reference/V2024/Methods/v2024-sim-integrations","title":"SIMIntegrations","description":"Use this API to administer IdentityNow&#39;s Service Integration Module, or SIM integration with ServiceNow, so that it converts IdentityNow provisioning actions into tickets in ServiceNow.","source":"@site/docs/tools/sdk/go/Reference/V2024/Methods/SIMIntegrationsAPI.md","sourceDirName":"tools/sdk/go/Reference/V2024/Methods","slug":"/tools/sdk/go/v2024/methods/sim-integrations","permalink":"/docs/tools/sdk/go/v2024/methods/sim-integrations","draft":false,"unlisted":false,"editUrl":"https://github.com/sailpoint-oss/developer.sailpoint.com/edit/main/docs/tools/sdk/go/Reference/V2024/Methods/SIMIntegrationsAPI.md","tags":[{"inline":true,"label":"SDK","permalink":"/docs/tags/sdk"},{"inline":true,"label":"Software Development Kit","permalink":"/docs/tags/software-development-kit"},{"inline":true,"label":"SIMIntegrations","permalink":"/docs/tags/sim-integrations"},{"inline":true,"label":"V2024SIMIntegrations","permalink":"/docs/tags/v-2024-sim-integrations"}],"version":"current","lastUpdatedBy":"developer-relations-sp","lastUpdatedAt":1747667177000,"frontMatter":{"id":"v2024-sim-integrations","title":"SIMIntegrations","pagination_label":"SIMIntegrations","sidebar_label":"SIMIntegrations","sidebar_class_name":"gosdk","keywords":["go","Golang","sdk","SIMIntegrations","V2024SIMIntegrations"],"slug":"/tools/sdk/go/v2024/methods/sim-integrations","tags":["SDK","Software Development Kit","SIMIntegrations","V2024SIMIntegrations"]},"sidebar":"openApiSidebar","previous":{"title":"Roles","permalink":"/docs/tools/sdk/go/v2024/methods/roles"},"next":{"title":"SODPolicies","permalink":"/docs/tools/sdk/go/v2024/methods/sod-policies"}}')}}]);