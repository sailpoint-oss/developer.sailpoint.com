post:
  tags:
    - Multi-Host Integration
  summary: Create multi-host integration
  description: >- 
    This API is used to create Multi-Host Integration. Multi-host Integration holds similar types of sources.
    
    
    A token with Org Admin or Multi-Host Admin authority is required to access this endpoint.
  operationId: createMultiHostIntegration
  requestBody:
    description: The specifics of the Multi-Host Integration to create
    content:
      application/json:
        schema:
          $ref: '../schemas/MultiHostIntegrationsCreate.yaml'
    required: true
  responses:
    "201":
      description: OK. Returned if the request was successfully accepted into the system.
      content:
        application/json:
          schema:
            $ref: '../schemas/MultiHostIntegrations.yaml'
    '400':
      $ref: '../../v3/responses/400.yaml'
    '401':
      $ref: '../../v3/responses/401.yaml'
    '403':
      $ref: '../../v3/responses/403.yaml'
    '404':
      $ref: '../../v3/responses/404.yaml'
    '429':
      $ref: '../../v3/responses/429.yaml'
    '500':
      $ref: '../../v3/responses/500.yaml'
  security:
    - userAuth: [idn:multihosts:create, idn:sources:create]

get:
  tags:
    - Multi-Host Integration
  summary: List all existing multi-host integrations
  description: >-
    Get a list of Multi-Host Integrations.  
    
    
    A token with Org Admin or Multi-Host Admin authority is required to access this endpoint.
  operationId: getMultiHostIntegrationsList
  parameters:
    - $ref: '../../v3/parameters/offset.yaml'
    - $ref: '../../v3/parameters/limit.yaml'
    - name: sorters
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: string
      description: >-
        Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)
        
        
        Sorting is supported for the following fields: **name**
      example: name
    - name: filters
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: comma-separated
      description: >-
        Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)
        
        
        Filtering is supported for the following fields and operators:


        **type**: *in*


        **forSubAdminId**: *in*
      example: id eq 2c91808b6ef1d43e016efba0ce470904
    - $ref: '../../v3/parameters/count.yaml'
    - name: for-subadmin
      in: query
      schema:
        type: string
      description: >-
        If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN Identity or
        SOURCE_SUBADMIN identity.
        
        
        The value of the parameter is either an Identity ID, or the special value **me**,
        which is shorthand for the calling Identity's ID.
        
        
        A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an Identity that is not
        a subadmin.
      example: 5168015d32f890ca15812c9180835d2e
  responses:
    "200": 
      description: OK. Returned if the request was successfully accepted into the system.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '../schemas/MultiHostIntegrations.yaml'
    '400':
      $ref: '../../v3/responses/400.yaml'
    '401':
      $ref: '../../v3/responses/401.yaml'
    '403':
      $ref: '../../v3/responses/403.yaml'
    '404':
      $ref: '../../v3/responses/404.yaml'
    '429':
      $ref: '../../v3/responses/429.yaml'
    '500':
      $ref: '../../v3/responses/500.yaml'
  security:
    - userAuth: [idn:multihosts:read, idn:sources:read]