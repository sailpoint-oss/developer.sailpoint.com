- path: /access-model-metadata/attributes/{key}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/access-model-metadata#get-access-model-metadata-attribute
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          key := `iscPrivacy` // string | Technical name of the Attribute. # string | Technical name of the Attribute.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccessModelMetadataAPI.GetAccessModelMetadataAttribute(context.Background(), key).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.AccessModelMetadataAPI.GetAccessModelMetadataAttribute(context.Background(), key).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccessModelMetadataAPI.GetAccessModelMetadataAttribute``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetAccessModelMetadataAttribute`: AttributeDTO
          fmt.Fprintf(os.Stdout, "Response from `AccessModelMetadataAPI.GetAccessModelMetadataAttribute`: %v\n", resp)
        }
- path: /access-model-metadata/attributes/{key}/values/{value}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/access-model-metadata#get-access-model-metadata-attribute-value
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          key := `iscPrivacy` // string | Technical name of the Attribute. # string | Technical name of the Attribute.
          value := `public` // string | Technical name of the Attribute value. # string | Technical name of the Attribute value.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccessModelMetadataAPI.GetAccessModelMetadataAttributeValue(context.Background(), key, value).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.AccessModelMetadataAPI.GetAccessModelMetadataAttributeValue(context.Background(), key, value).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccessModelMetadataAPI.GetAccessModelMetadataAttributeValue``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetAccessModelMetadataAttributeValue`: AttributeValueDTO
          fmt.Fprintf(os.Stdout, "Response from `AccessModelMetadataAPI.GetAccessModelMetadataAttributeValue`: %v\n", resp)
        }
- path: /access-model-metadata/attributes
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/access-model-metadata#list-access-model-metadata-attribute
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          filters := `name eq "Privacy"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq*  **type**: *eq*  **status**: *eq*  **objectTypes**: *eq*  Supported composite operators: *and* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq*  **type**: *eq*  **status**: *eq*  **objectTypes**: *eq*  Supported composite operators: *and* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccessModelMetadataAPI.ListAccessModelMetadataAttribute(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.AccessModelMetadataAPI.ListAccessModelMetadataAttribute(context.Background()).XSailPointExperimental(xSailPointExperimental).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccessModelMetadataAPI.ListAccessModelMetadataAttribute``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListAccessModelMetadataAttribute`: []AttributeDTO
          fmt.Fprintf(os.Stdout, "Response from `AccessModelMetadataAPI.ListAccessModelMetadataAttribute`: %v\n", resp)
        }
- path: /access-model-metadata/attributes/{key}/values
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/access-model-metadata#list-access-model-metadata-attribute-value
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          key := `iscPrivacy` // string | Technical name of the Attribute. # string | Technical name of the Attribute.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccessModelMetadataAPI.ListAccessModelMetadataAttributeValue(context.Background(), key).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.AccessModelMetadataAPI.ListAccessModelMetadataAttributeValue(context.Background(), key).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccessModelMetadataAPI.ListAccessModelMetadataAttributeValue``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListAccessModelMetadataAttributeValue`: []AttributeValueDTO
          fmt.Fprintf(os.Stdout, "Response from `AccessModelMetadataAPI.ListAccessModelMetadataAttributeValue`: %v\n", resp)
        }
- path: /access-profiles
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/access-profiles#create-access-profile
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           accessprofile := []byte(`{
          "owner" : {
            "name" : "support",
            "id" : "2c9180a46faadee4016fb4e018c20639",
            "type" : "IDENTITY"
          },
          "entitlements" : [ {
            "name" : "CN=entitlement.490efde5,OU=OrgCo,OU=ServiceDept,DC=HQAD,DC=local",
            "id" : "2c91809773dee32014e13e122092014e",
            "type" : "ENTITLEMENT"
          }, {
            "name" : "CN=entitlement.490efde5,OU=OrgCo,OU=ServiceDept,DC=HQAD,DC=local",
            "id" : "2c91809773dee32014e13e122092014e",
            "type" : "ENTITLEMENT"
          } ],
          "created" : "2021-03-01T22:32:58.104Z",
          "description" : "Collection of entitlements to read/write the employee database",
          "source" : {
            "name" : "ODS-AD-SOURCE",
            "id" : "2c91809773dee3610173fdb0b6061ef4",
            "type" : "SOURCE"
          },
          "enabled" : true,
          "revocationRequestConfig" : {
            "approvalSchemes" : [ {
              "approverId" : "46c79819-a69f-49a2-becb-12c971ae66c6",
              "approverType" : "GOVERNANCE_GROUP"
            }, {
              "approverId" : "46c79819-a69f-49a2-becb-12c971ae66c6",
              "approverType" : "GOVERNANCE_GROUP"
            } ]
          },
          "segments" : [ "f7b1b8a3-5fed-4fd4-ad29-82014e137e19", "29cb6c06-1da8-43ea-8be4-b3125f248f2a" ],
          "accessRequestConfig" : {
            "commentsRequired" : true,
            "reauthorizationRequired" : true,
            "approvalSchemes" : [ {
              "approverId" : "46c79819-a69f-49a2-becb-12c971ae66c6",
              "approverType" : "GOVERNANCE_GROUP"
            }, {
              "approverId" : "46c79819-a69f-49a2-becb-12c971ae66c6",
              "approverType" : "GOVERNANCE_GROUP"
            } ],
            "denialCommentsRequired" : true
          },
          "name" : "Employee-database-read-write",
          "provisioningCriteria" : {
            "children" : [ {
              "children" : [ {
                "children" : "children",
                "attribute" : "email",
                "operation" : "EQUALS",
                "value" : "carlee.cert1c9f9b6fd@mailinator.com"
              }, {
                "children" : "children",
                "attribute" : "email",
                "operation" : "EQUALS",
                "value" : "carlee.cert1c9f9b6fd@mailinator.com"
              } ],
              "attribute" : "email",
              "operation" : "EQUALS",
              "value" : "carlee.cert1c9f9b6fd@mailinator.com"
            }, {
              "children" : [ {
                "children" : "children",
                "attribute" : "email",
                "operation" : "EQUALS",
                "value" : "carlee.cert1c9f9b6fd@mailinator.com"
              }, {
                "children" : "children",
                "attribute" : "email",
                "operation" : "EQUALS",
                "value" : "carlee.cert1c9f9b6fd@mailinator.com"
              } ],
              "attribute" : "email",
              "operation" : "EQUALS",
              "value" : "carlee.cert1c9f9b6fd@mailinator.com"
            } ],
            "attribute" : "email",
            "operation" : "EQUALS",
            "value" : "carlee.cert1c9f9b6fd@mailinator.com"
          },
          "modified" : "2021-03-02T20:22:28.104Z",
          "id" : "2c91808a7190d06e01719938fcd20792",
          "requestable" : true
        }`) // AccessProfile | 

          
          var accessProfile v2025.AccessProfile
          if err := json.Unmarshal(accessprofile, &accessProfile); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccessProfilesAPI.CreateAccessProfile(context.Background()).AccessProfile(accessProfile).Execute()
          //resp, r, err := apiClient.V2025.AccessProfilesAPI.CreateAccessProfile(context.Background()).AccessProfile(accessProfile).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccessProfilesAPI.CreateAccessProfile``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateAccessProfile`: AccessProfile
          fmt.Fprintf(os.Stdout, "Response from `AccessProfilesAPI.CreateAccessProfile`: %v\n", resp)
        }
- path: /access-profiles/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/access-profiles#delete-access-profile
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808a7813090a017814121919ecca` // string | ID of the Access Profile to delete # string | ID of the Access Profile to delete

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.AccessProfilesAPI.DeleteAccessProfile(context.Background(), id).Execute()
          //r, err := apiClient.V2025.AccessProfilesAPI.DeleteAccessProfile(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccessProfilesAPI.DeleteAccessProfile``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /access-profiles/bulk-delete
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/access-profiles#delete-access-profiles-in-bulk
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           accessprofilebulkdeleterequest := []byte(`{
          "accessProfileIds" : [ "2c9180847812e0b1017817051919ecca", "2c9180887812e0b201781e129f151816" ],
          "bestEffortOnly" : true
        }`) // AccessProfileBulkDeleteRequest | 

          
          var accessProfileBulkDeleteRequest v2025.AccessProfileBulkDeleteRequest
          if err := json.Unmarshal(accessprofilebulkdeleterequest, &accessProfileBulkDeleteRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccessProfilesAPI.DeleteAccessProfilesInBulk(context.Background()).AccessProfileBulkDeleteRequest(accessProfileBulkDeleteRequest).Execute()
          //resp, r, err := apiClient.V2025.AccessProfilesAPI.DeleteAccessProfilesInBulk(context.Background()).AccessProfileBulkDeleteRequest(accessProfileBulkDeleteRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccessProfilesAPI.DeleteAccessProfilesInBulk``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `DeleteAccessProfilesInBulk`: AccessProfileBulkDeleteResponse
          fmt.Fprintf(os.Stdout, "Response from `AccessProfilesAPI.DeleteAccessProfilesInBulk`: %v\n", resp)
        }
- path: /access-profiles/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/access-profiles#get-access-profile
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c9180837ca6693d017ca8d097500149` // string | ID of the Access Profile # string | ID of the Access Profile

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccessProfilesAPI.GetAccessProfile(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.AccessProfilesAPI.GetAccessProfile(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccessProfilesAPI.GetAccessProfile``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetAccessProfile`: AccessProfile
          fmt.Fprintf(os.Stdout, "Response from `AccessProfilesAPI.GetAccessProfile`: %v\n", resp)
        }
- path: /access-profiles/{id}/entitlements
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/access-profiles#get-access-profile-entitlements
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808a7813090a017814121919ecca` // string | ID of the access profile containing the entitlements. # string | ID of the access profile containing the entitlements.
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `attribute eq "memberOf"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **attribute**: *eq, sw*  **value**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **source.id**: *eq, in*  Filtering is not supported for access profiles and entitlements that have the '+' symbol in their names.  (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **attribute**: *eq, sw*  **value**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **source.id**: *eq, in*  Filtering is not supported for access profiles and entitlements that have the '+' symbol in their names.  (optional)
          sorters := `name,-modified` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, attribute, value, created, modified** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, attribute, value, created, modified** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccessProfilesAPI.GetAccessProfileEntitlements(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.AccessProfilesAPI.GetAccessProfileEntitlements(context.Background(), id).Limit(limit).Offset(offset).Count(count).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccessProfilesAPI.GetAccessProfileEntitlements``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetAccessProfileEntitlements`: []Entitlement
          fmt.Fprintf(os.Stdout, "Response from `AccessProfilesAPI.GetAccessProfileEntitlements`: %v\n", resp)
        }
- path: /access-profiles
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/access-profiles#list-access-profiles
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          forSubadmin := `8c190e6787aa4ed9a90bd9d5344523fb` // string | Filters the returned list according to what is visible to the indicated ROLE_SUBADMIN or SOURCE_SUBADMIN identity. The value of the parameter is either an identity ID or the special value **me**, which is shorthand for the calling identity's ID.  If you specify an identity that isn't a subadmin, the API returns a 400 Bad Request error. (optional) # string | Filters the returned list according to what is visible to the indicated ROLE_SUBADMIN or SOURCE_SUBADMIN identity. The value of the parameter is either an identity ID or the special value **me**, which is shorthand for the calling identity's ID.  If you specify an identity that isn't a subadmin, the API returns a 400 Bad Request error. (optional)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `name eq "SailPoint Support"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **created**: *gt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **requestable**: *eq*  **source.id**: *eq, in*  Supported composite operators are *and, or*  Filtering is not supported for access profiles and entitlements that have the '+' symbol in their names.  (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **created**: *gt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **requestable**: *eq*  **source.id**: *eq, in*  Supported composite operators are *and, or*  Filtering is not supported for access profiles and entitlements that have the '+' symbol in their names.  (optional)
          sorters := `name,-modified` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified** (optional)
          forSegmentIds := `0b5c9f25-83c6-4762-9073-e38f7bb2ae26,2e8d8180-24bc-4d21-91c6-7affdb473b0d` // string | Filters access profiles to only those assigned to the segment(s) with the specified IDs. If segmentation is currently unavailable, specifying this parameter results in an error. (optional) # string | Filters access profiles to only those assigned to the segment(s) with the specified IDs. If segmentation is currently unavailable, specifying this parameter results in an error. (optional)
          includeUnsegmented := false // bool | Indicates whether the response list should contain unsegmented access profiles. If `for-segment-ids` is absent or empty, specifying *include-unsegmented* as `false` results in an error. (optional) (default to true) # bool | Indicates whether the response list should contain unsegmented access profiles. If `for-segment-ids` is absent or empty, specifying *include-unsegmented* as `false` results in an error. (optional) (default to true)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccessProfilesAPI.ListAccessProfiles(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.AccessProfilesAPI.ListAccessProfiles(context.Background()).ForSubadmin(forSubadmin).Limit(limit).Offset(offset).Count(count).Filters(filters).Sorters(sorters).ForSegmentIds(forSegmentIds).IncludeUnsegmented(includeUnsegmented).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccessProfilesAPI.ListAccessProfiles``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListAccessProfiles`: []AccessProfile
          fmt.Fprintf(os.Stdout, "Response from `AccessProfilesAPI.ListAccessProfiles`: %v\n", resp)
        }
- path: /access-profiles/{id}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/access-profiles#patch-access-profile
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808a7813090a017814121919ecca` // string | ID of the Access Profile to patch # string | ID of the Access Profile to patch
          jsonpatchoperation := []byte(`[{op=add, path=/entitlements, value=[{id=2c9180857725c14301772a93bb77242d, type=ENTITLEMENT, name=AD User Group}]}]`) // []JsonPatchOperation | 

          
          var jsonPatchOperation []v2025.JsonPatchOperation
          if err := json.Unmarshal(jsonpatchoperation, &jsonPatchOperation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccessProfilesAPI.PatchAccessProfile(context.Background(), id).JsonPatchOperation(jsonPatchOperation).Execute()
          //resp, r, err := apiClient.V2025.AccessProfilesAPI.PatchAccessProfile(context.Background(), id).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccessProfilesAPI.PatchAccessProfile``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchAccessProfile`: AccessProfile
          fmt.Fprintf(os.Stdout, "Response from `AccessProfilesAPI.PatchAccessProfile`: %v\n", resp)
        }
- path: /access-profiles/bulk-update-requestable
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/access-profiles#update-access-profiles-in-bulk
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          accessprofilebulkupdaterequestinner := []byte(`[{id=464ae7bf-791e-49fd-b746-06a2e4a89635, requestable=false}]`) // []AccessProfileBulkUpdateRequestInner | 

          
          var accessProfileBulkUpdateRequestInner []v2025.AccessProfileBulkUpdateRequestInner
          if err := json.Unmarshal(accessprofilebulkupdaterequestinner, &accessProfileBulkUpdateRequestInner); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccessProfilesAPI.UpdateAccessProfilesInBulk(context.Background()).XSailPointExperimental(xSailPointExperimental).AccessProfileBulkUpdateRequestInner(accessProfileBulkUpdateRequestInner).Execute()
          //resp, r, err := apiClient.V2025.AccessProfilesAPI.UpdateAccessProfilesInBulk(context.Background()).XSailPointExperimental(xSailPointExperimental).AccessProfileBulkUpdateRequestInner(accessProfileBulkUpdateRequestInner).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccessProfilesAPI.UpdateAccessProfilesInBulk``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateAccessProfilesInBulk`: []AccessProfileUpdateItem
          fmt.Fprintf(os.Stdout, "Response from `AccessProfilesAPI.UpdateAccessProfilesInBulk`: %v\n", resp)
        }
- path: /access-request-approvals/{approvalId}/approve
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/access-request-approvals#approve-access-request
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          approvalId := `2c91808b7294bea301729568c68c002e` // string | Approval ID. # string | Approval ID.
           commentdto := []byte(`{
          "created" : "2017-07-11T18:45:37.098Z",
          "author" : {
            "name" : "john.doe",
            "id" : "2c9180847e25f377017e2ae8cae4650b",
            "type" : "IDENTITY"
          },
          "comment" : "This is a comment."
        }`) // CommentDto | Reviewer's comment. (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccessRequestApprovalsAPI.ApproveAccessRequest(context.Background(), approvalId).Execute()
          //resp, r, err := apiClient.V2025.AccessRequestApprovalsAPI.ApproveAccessRequest(context.Background(), approvalId).CommentDto(commentDto).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccessRequestApprovalsAPI.ApproveAccessRequest``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ApproveAccessRequest`: map[string]interface{}
          fmt.Fprintf(os.Stdout, "Response from `AccessRequestApprovalsAPI.ApproveAccessRequest`: %v\n", resp)
        }
- path: /access-request-approvals/{approvalId}/forward
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/access-request-approvals#forward-access-request
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          approvalId := `2c91808b7294bea301729568c68c002e` // string | Approval ID. # string | Approval ID.
           forwardapprovaldto := []byte(`{
          "newOwnerId" : "2c91808568c529c60168cca6f90c1314",
          "comment" : "2c91808568c529c60168cca6f90c1313"
        }`) // ForwardApprovalDto | Information about the forwarded approval.

          
          var forwardApprovalDto v2025.ForwardApprovalDto
          if err := json.Unmarshal(forwardapprovaldto, &forwardApprovalDto); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccessRequestApprovalsAPI.ForwardAccessRequest(context.Background(), approvalId).ForwardApprovalDto(forwardApprovalDto).Execute()
          //resp, r, err := apiClient.V2025.AccessRequestApprovalsAPI.ForwardAccessRequest(context.Background(), approvalId).ForwardApprovalDto(forwardApprovalDto).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccessRequestApprovalsAPI.ForwardAccessRequest``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ForwardAccessRequest`: map[string]interface{}
          fmt.Fprintf(os.Stdout, "Response from `AccessRequestApprovalsAPI.ForwardAccessRequest`: %v\n", resp)
        }
- path: /access-request-approvals/approval-summary
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/access-request-approvals#get-access-request-approval-summary
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          ownerId := `2c91808568c529c60168cca6f90c1313` // string | The ID of the owner or approver identity of the approvals. If present, the value returns approval summary for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN user can also fetch all the approvals in the org, when owner-id is not used.    * Non ORG_ADMIN users can only specify *me* or pass their own identity ID value. (optional) # string | The ID of the owner or approver identity of the approvals. If present, the value returns approval summary for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN user can also fetch all the approvals in the org, when owner-id is not used.    * Non ORG_ADMIN users can only specify *me* or pass their own identity ID value. (optional)
          fromDate := `from-date=2020-03-19T19:59:11Z` // string | This is the date and time the results will be shown from. It must be in a valid ISO-8601 format. (optional) # string | This is the date and time the results will be shown from. It must be in a valid ISO-8601 format. (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccessRequestApprovalsAPI.GetAccessRequestApprovalSummary(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.AccessRequestApprovalsAPI.GetAccessRequestApprovalSummary(context.Background()).OwnerId(ownerId).FromDate(fromDate).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccessRequestApprovalsAPI.GetAccessRequestApprovalSummary``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetAccessRequestApprovalSummary`: ApprovalSummary
          fmt.Fprintf(os.Stdout, "Response from `AccessRequestApprovalsAPI.GetAccessRequestApprovalSummary`: %v\n", resp)
        }
- path: /access-request-approvals/{accessRequestId}/approvers
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/access-request-approvals#list-access-request-approvers
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          accessRequestId := `2c91808568c529c60168cca6f90c1313` // string | Access Request ID. # string | Access Request ID.
          limit := 100 // int32 | Max number of results to return. (optional) (default to 250) # int32 | Max number of results to return. (optional) (default to 250)
          offset := 10 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. Defaults to 0 if not specified. (optional) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. Defaults to 0 if not specified. (optional)
          count := false // bool | If this is true, the *X-Total-Count* response header populates with the number of results that would be returned if limit and offset were ignored. (optional) (default to false) # bool | If this is true, the *X-Total-Count* response header populates with the number of results that would be returned if limit and offset were ignored. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccessRequestApprovalsAPI.ListAccessRequestApprovers(context.Background(), accessRequestId).Execute()
          //resp, r, err := apiClient.V2025.AccessRequestApprovalsAPI.ListAccessRequestApprovers(context.Background(), accessRequestId).Limit(limit).Offset(offset).Count(count).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccessRequestApprovalsAPI.ListAccessRequestApprovers``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListAccessRequestApprovers`: []AccessRequestApproversListResponse
          fmt.Fprintf(os.Stdout, "Response from `AccessRequestApprovalsAPI.ListAccessRequestApprovers`: %v\n", resp)
        }
- path: /access-request-approvals/completed
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/access-request-approvals#list-completed-approvals
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          ownerId := `2c91808568c529c60168cca6f90c1313` // string | If present, the value returns only completed approvals for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN users can also fetch all the approvals in the org, when owner-id is not used.    * Non-ORG_ADMIN users can only specify *me* or pass their own identity ID value. (optional) # string | If present, the value returns only completed approvals for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN users can also fetch all the approvals in the org, when owner-id is not used.    * Non-ORG_ADMIN users can only specify *me* or pass their own identity ID value. (optional)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `id eq "2c91808568c529c60168cca6f90c1313"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **requestedFor.id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **modified**: *gt, lt, ge, le, eq, in, ne, sw* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **requestedFor.id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **modified**: *gt, lt, ge, le, eq, in, ne, sw* (optional)
          sorters := `modified` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccessRequestApprovalsAPI.ListCompletedApprovals(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.AccessRequestApprovalsAPI.ListCompletedApprovals(context.Background()).OwnerId(ownerId).Limit(limit).Offset(offset).Count(count).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccessRequestApprovalsAPI.ListCompletedApprovals``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListCompletedApprovals`: []CompletedApproval
          fmt.Fprintf(os.Stdout, "Response from `AccessRequestApprovalsAPI.ListCompletedApprovals`: %v\n", resp)
        }
- path: /access-request-approvals/pending
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/access-request-approvals#list-pending-approvals
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          ownerId := `2c91808568c529c60168cca6f90c1313` // string | If present, the value returns only pending approvals for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN users can also fetch all the approvals in the org, when owner-id is not used.    * Non-ORG_ADMIN users can only specify *me* or pass their own identity ID value. (optional) # string | If present, the value returns only pending approvals for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN users can also fetch all the approvals in the org, when owner-id is not used.    * Non-ORG_ADMIN users can only specify *me* or pass their own identity ID value. (optional)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `id eq "2c91808568c529c60168cca6f90c1313"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **requestedFor.id**: *eq, in*  **modified**: *gt, lt, ge, le, eq, in*  **accessRequestId**: *eq, in*  **created**: *gt, lt, ge, le, eq, in* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **requestedFor.id**: *eq, in*  **modified**: *gt, lt, ge, le, eq, in*  **accessRequestId**: *eq, in*  **created**: *gt, lt, ge, le, eq, in* (optional)
          sorters := `modified` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccessRequestApprovalsAPI.ListPendingApprovals(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.AccessRequestApprovalsAPI.ListPendingApprovals(context.Background()).OwnerId(ownerId).Limit(limit).Offset(offset).Count(count).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccessRequestApprovalsAPI.ListPendingApprovals``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListPendingApprovals`: []PendingApproval
          fmt.Fprintf(os.Stdout, "Response from `AccessRequestApprovalsAPI.ListPendingApprovals`: %v\n", resp)
        }
- path: /access-request-approvals/{approvalId}/reject
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/access-request-approvals#reject-access-request
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          approvalId := `2c91808b7294bea301729568c68c002e` // string | Approval ID. # string | Approval ID.
           commentdto := []byte(`{
          "created" : "2017-07-11T18:45:37.098Z",
          "author" : {
            "name" : "john.doe",
            "id" : "2c9180847e25f377017e2ae8cae4650b",
            "type" : "IDENTITY"
          },
          "comment" : "This is a comment."
        }`) // CommentDto | Reviewer's comment.

          
          var commentDto v2025.CommentDto
          if err := json.Unmarshal(commentdto, &commentDto); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccessRequestApprovalsAPI.RejectAccessRequest(context.Background(), approvalId).CommentDto(commentDto).Execute()
          //resp, r, err := apiClient.V2025.AccessRequestApprovalsAPI.RejectAccessRequest(context.Background(), approvalId).CommentDto(commentDto).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccessRequestApprovalsAPI.RejectAccessRequest``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `RejectAccessRequest`: map[string]interface{}
          fmt.Fprintf(os.Stdout, "Response from `AccessRequestApprovalsAPI.RejectAccessRequest`: %v\n", resp)
        }
- path: /access-request-identity-metrics/{identityId}/requested-objects/{requestedObjectId}/type/{type}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/access-request-identity-metrics#get-access-request-identity-metrics
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          identityId := `7025c863-c270-4ba6-beea-edf3cb091573` // string | Manager's identity ID. # string | Manager's identity ID.
          requestedObjectId := `2db501be-f0fb-4cc5-a695-334133c52891` // string | Requested access item's ID. # string | Requested access item's ID.
          type_ := `ENTITLEMENT` // string | Requested access item's type. # string | Requested access item's type.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccessRequestIdentityMetricsAPI.GetAccessRequestIdentityMetrics(context.Background(), identityId, requestedObjectId, type_).Execute()
          //resp, r, err := apiClient.V2025.AccessRequestIdentityMetricsAPI.GetAccessRequestIdentityMetrics(context.Background(), identityId, requestedObjectId, type_).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccessRequestIdentityMetricsAPI.GetAccessRequestIdentityMetrics``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetAccessRequestIdentityMetrics`: map[string]interface{}
          fmt.Fprintf(os.Stdout, "Response from `AccessRequestIdentityMetricsAPI.GetAccessRequestIdentityMetrics`: %v\n", resp)
        }
- path: /access-request-approvals/bulk-approve
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/access-requests#approve-bulk-access-request
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           bulkapproveaccessrequest := []byte(`{
          "comment" : "I approve these request items",
          "approvalIds" : [ "2c9180835d2e5168015d32f890ca1581", "2c9180835d2e5168015d32f890ca1582" ]
        }`) // BulkApproveAccessRequest | 

          
          var bulkApproveAccessRequest v2025.BulkApproveAccessRequest
          if err := json.Unmarshal(bulkapproveaccessrequest, &bulkApproveAccessRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccessRequestsAPI.ApproveBulkAccessRequest(context.Background()).BulkApproveAccessRequest(bulkApproveAccessRequest).Execute()
          //resp, r, err := apiClient.V2025.AccessRequestsAPI.ApproveBulkAccessRequest(context.Background()).BulkApproveAccessRequest(bulkApproveAccessRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccessRequestsAPI.ApproveBulkAccessRequest``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ApproveBulkAccessRequest`: map[string]interface{}
          fmt.Fprintf(os.Stdout, "Response from `AccessRequestsAPI.ApproveBulkAccessRequest`: %v\n", resp)
        }
- path: /access-requests/cancel
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/access-requests#cancel-access-request
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           cancelaccessrequest := []byte(`{
          "accountActivityId" : "2c9180835d2e5168015d32f890ca1581",
          "comment" : "I requested this role by mistake."
        }`) // CancelAccessRequest | 

          
          var cancelAccessRequest v2025.CancelAccessRequest
          if err := json.Unmarshal(cancelaccessrequest, &cancelAccessRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccessRequestsAPI.CancelAccessRequest(context.Background()).CancelAccessRequest(cancelAccessRequest).Execute()
          //resp, r, err := apiClient.V2025.AccessRequestsAPI.CancelAccessRequest(context.Background()).CancelAccessRequest(cancelAccessRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccessRequestsAPI.CancelAccessRequest``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CancelAccessRequest`: map[string]interface{}
          fmt.Fprintf(os.Stdout, "Response from `AccessRequestsAPI.CancelAccessRequest`: %v\n", resp)
        }
- path: /access-requests/bulk-cancel
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/access-requests#cancel-access-request-in-bulk
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           bulkcancelaccessrequest := []byte(`{
          "accessRequestIds" : [ "2c9180835d2e5168015d32f890ca1581", "2c9180835d2e5168015d32f890ca1582" ],
          "comment" : "I requested this role by mistake."
        }`) // BulkCancelAccessRequest | 

          
          var bulkCancelAccessRequest v2025.BulkCancelAccessRequest
          if err := json.Unmarshal(bulkcancelaccessrequest, &bulkCancelAccessRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccessRequestsAPI.CancelAccessRequestInBulk(context.Background()).BulkCancelAccessRequest(bulkCancelAccessRequest).Execute()
          //resp, r, err := apiClient.V2025.AccessRequestsAPI.CancelAccessRequestInBulk(context.Background()).BulkCancelAccessRequest(bulkCancelAccessRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccessRequestsAPI.CancelAccessRequestInBulk``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CancelAccessRequestInBulk`: map[string]interface{}
          fmt.Fprintf(os.Stdout, "Response from `AccessRequestsAPI.CancelAccessRequestInBulk`: %v\n", resp)
        }
- path: /access-requests/close
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/access-requests#close-access-request
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           closeaccessrequest := []byte(`{
          "executionStatus" : "Terminated",
          "accessRequestIds" : [ "2c90ad2a70ace7d50170acf22ca90010" ],
          "completionStatus" : "Failure",
          "message" : "The IdentityNow Administrator manually closed this request."
        }`) // CloseAccessRequest | 

          
          var closeAccessRequest v2025.CloseAccessRequest
          if err := json.Unmarshal(closeaccessrequest, &closeAccessRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccessRequestsAPI.CloseAccessRequest(context.Background()).CloseAccessRequest(closeAccessRequest).Execute()
          //resp, r, err := apiClient.V2025.AccessRequestsAPI.CloseAccessRequest(context.Background()).CloseAccessRequest(closeAccessRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccessRequestsAPI.CloseAccessRequest``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CloseAccessRequest`: map[string]interface{}
          fmt.Fprintf(os.Stdout, "Response from `AccessRequestsAPI.CloseAccessRequest`: %v\n", resp)
        }
- path: /access-requests
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/access-requests#create-access-request
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           accessrequest := []byte(`{
          "requestedFor" : "2c918084660f45d6016617daa9210584",
          "clientMetadata" : {
            "requestedAppId" : "2c91808f7892918f0178b78da4a305a1",
            "requestedAppName" : "test-app"
          },
          "requestType" : "GRANT_ACCESS",
          "requestedItems" : [ {
            "clientMetadata" : {
              "requestedAppName" : "test-app",
              "requestedAppId" : "2c91808f7892918f0178b78da4a305a1"
            },
            "removeDate" : "2020-07-11T21:23:15Z",
            "comment" : "Requesting access profile for John Doe",
            "id" : "2c9180835d2e5168015d32f890ca1581",
            "type" : "ACCESS_PROFILE",
            "assignmentId" : "ee48a191c00d49bf9264eb0a4fc3a9fc",
            "nativeIdentity" : "CN=User db3377de14bf,OU=YOURCONTAINER, DC=YOURDOMAIN"
          }, {
            "clientMetadata" : {
              "requestedAppName" : "test-app",
              "requestedAppId" : "2c91808f7892918f0178b78da4a305a1"
            },
            "removeDate" : "2020-07-11T21:23:15Z",
            "comment" : "Requesting access profile for John Doe",
            "id" : "2c9180835d2e5168015d32f890ca1581",
            "type" : "ACCESS_PROFILE",
            "assignmentId" : "ee48a191c00d49bf9264eb0a4fc3a9fc",
            "nativeIdentity" : "CN=User db3377de14bf,OU=YOURCONTAINER, DC=YOURDOMAIN"
          } ],
          "requestedForWithRequestedItems" : [ {
            "identityId" : "cb89bc2f1ee6445fbea12224c526ba3a",
            "requestedItems" : [ {
              "clientMetadata" : {
                "requestedAppName" : "test-app",
                "requestedAppId" : "2c91808f7892918f0178b78da4a305a1"
              },
              "removeDate" : "2020-07-11T21:23:15Z",
              "accountSelection" : [ {
                "sourceId" : "cb89bc2f1ee6445fbea12224c526ba3a",
                "accounts" : [ {
                  "accountUuid" : "{fab7119e-004f-4822-9c33-b8d570d6c6a6}",
                  "nativeIdentity" : "CN=Glen 067da3248e914,OU=YOUROU,OU=org-data-service,DC=YOURDC,DC=local"
                }, {
                  "accountUuid" : "{fab7119e-004f-4822-9c33-b8d570d6c6a6}",
                  "nativeIdentity" : "CN=Glen 067da3248e914,OU=YOUROU,OU=org-data-service,DC=YOURDC,DC=local"
                } ]
              }, {
                "sourceId" : "cb89bc2f1ee6445fbea12224c526ba3a",
                "accounts" : [ {
                  "accountUuid" : "{fab7119e-004f-4822-9c33-b8d570d6c6a6}",
                  "nativeIdentity" : "CN=Glen 067da3248e914,OU=YOUROU,OU=org-data-service,DC=YOURDC,DC=local"
                }, {
                  "accountUuid" : "{fab7119e-004f-4822-9c33-b8d570d6c6a6}",
                  "nativeIdentity" : "CN=Glen 067da3248e914,OU=YOUROU,OU=org-data-service,DC=YOURDC,DC=local"
                } ]
              } ],
              "comment" : "Requesting access profile for John Doe",
              "id" : "2c9180835d2e5168015d32f890ca1581",
              "type" : "ACCESS_PROFILE"
            }, {
              "clientMetadata" : {
                "requestedAppName" : "test-app",
                "requestedAppId" : "2c91808f7892918f0178b78da4a305a1"
              },
              "removeDate" : "2020-07-11T21:23:15Z",
              "accountSelection" : [ {
                "sourceId" : "cb89bc2f1ee6445fbea12224c526ba3a",
                "accounts" : [ {
                  "accountUuid" : "{fab7119e-004f-4822-9c33-b8d570d6c6a6}",
                  "nativeIdentity" : "CN=Glen 067da3248e914,OU=YOUROU,OU=org-data-service,DC=YOURDC,DC=local"
                }, {
                  "accountUuid" : "{fab7119e-004f-4822-9c33-b8d570d6c6a6}",
                  "nativeIdentity" : "CN=Glen 067da3248e914,OU=YOUROU,OU=org-data-service,DC=YOURDC,DC=local"
                } ]
              }, {
                "sourceId" : "cb89bc2f1ee6445fbea12224c526ba3a",
                "accounts" : [ {
                  "accountUuid" : "{fab7119e-004f-4822-9c33-b8d570d6c6a6}",
                  "nativeIdentity" : "CN=Glen 067da3248e914,OU=YOUROU,OU=org-data-service,DC=YOURDC,DC=local"
                }, {
                  "accountUuid" : "{fab7119e-004f-4822-9c33-b8d570d6c6a6}",
                  "nativeIdentity" : "CN=Glen 067da3248e914,OU=YOUROU,OU=org-data-service,DC=YOURDC,DC=local"
                } ]
              } ],
              "comment" : "Requesting access profile for John Doe",
              "id" : "2c9180835d2e5168015d32f890ca1581",
              "type" : "ACCESS_PROFILE"
            } ]
          }, {
            "identityId" : "cb89bc2f1ee6445fbea12224c526ba3a",
            "requestedItems" : [ {
              "clientMetadata" : {
                "requestedAppName" : "test-app",
                "requestedAppId" : "2c91808f7892918f0178b78da4a305a1"
              },
              "removeDate" : "2020-07-11T21:23:15Z",
              "accountSelection" : [ {
                "sourceId" : "cb89bc2f1ee6445fbea12224c526ba3a",
                "accounts" : [ {
                  "accountUuid" : "{fab7119e-004f-4822-9c33-b8d570d6c6a6}",
                  "nativeIdentity" : "CN=Glen 067da3248e914,OU=YOUROU,OU=org-data-service,DC=YOURDC,DC=local"
                }, {
                  "accountUuid" : "{fab7119e-004f-4822-9c33-b8d570d6c6a6}",
                  "nativeIdentity" : "CN=Glen 067da3248e914,OU=YOUROU,OU=org-data-service,DC=YOURDC,DC=local"
                } ]
              }, {
                "sourceId" : "cb89bc2f1ee6445fbea12224c526ba3a",
                "accounts" : [ {
                  "accountUuid" : "{fab7119e-004f-4822-9c33-b8d570d6c6a6}",
                  "nativeIdentity" : "CN=Glen 067da3248e914,OU=YOUROU,OU=org-data-service,DC=YOURDC,DC=local"
                }, {
                  "accountUuid" : "{fab7119e-004f-4822-9c33-b8d570d6c6a6}",
                  "nativeIdentity" : "CN=Glen 067da3248e914,OU=YOUROU,OU=org-data-service,DC=YOURDC,DC=local"
                } ]
              } ],
              "comment" : "Requesting access profile for John Doe",
              "id" : "2c9180835d2e5168015d32f890ca1581",
              "type" : "ACCESS_PROFILE"
            }, {
              "clientMetadata" : {
                "requestedAppName" : "test-app",
                "requestedAppId" : "2c91808f7892918f0178b78da4a305a1"
              },
              "removeDate" : "2020-07-11T21:23:15Z",
              "accountSelection" : [ {
                "sourceId" : "cb89bc2f1ee6445fbea12224c526ba3a",
                "accounts" : [ {
                  "accountUuid" : "{fab7119e-004f-4822-9c33-b8d570d6c6a6}",
                  "nativeIdentity" : "CN=Glen 067da3248e914,OU=YOUROU,OU=org-data-service,DC=YOURDC,DC=local"
                }, {
                  "accountUuid" : "{fab7119e-004f-4822-9c33-b8d570d6c6a6}",
                  "nativeIdentity" : "CN=Glen 067da3248e914,OU=YOUROU,OU=org-data-service,DC=YOURDC,DC=local"
                } ]
              }, {
                "sourceId" : "cb89bc2f1ee6445fbea12224c526ba3a",
                "accounts" : [ {
                  "accountUuid" : "{fab7119e-004f-4822-9c33-b8d570d6c6a6}",
                  "nativeIdentity" : "CN=Glen 067da3248e914,OU=YOUROU,OU=org-data-service,DC=YOURDC,DC=local"
                }, {
                  "accountUuid" : "{fab7119e-004f-4822-9c33-b8d570d6c6a6}",
                  "nativeIdentity" : "CN=Glen 067da3248e914,OU=YOUROU,OU=org-data-service,DC=YOURDC,DC=local"
                } ]
              } ],
              "comment" : "Requesting access profile for John Doe",
              "id" : "2c9180835d2e5168015d32f890ca1581",
              "type" : "ACCESS_PROFILE"
            } ]
          } ]
        }`) // AccessRequest | 

          
          var accessRequest v2025.AccessRequest
          if err := json.Unmarshal(accessrequest, &accessRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccessRequestsAPI.CreateAccessRequest(context.Background()).AccessRequest(accessRequest).Execute()
          //resp, r, err := apiClient.V2025.AccessRequestsAPI.CreateAccessRequest(context.Background()).AccessRequest(accessRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccessRequestsAPI.CreateAccessRequest``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateAccessRequest`: AccessRequestResponse
          fmt.Fprintf(os.Stdout, "Response from `AccessRequestsAPI.CreateAccessRequest`: %v\n", resp)
        }
- path: /access-request-config
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/access-requests#get-access-request-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccessRequestsAPI.GetAccessRequestConfig(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.AccessRequestsAPI.GetAccessRequestConfig(context.Background()).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccessRequestsAPI.GetAccessRequestConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetAccessRequestConfig`: AccessRequestConfig
          fmt.Fprintf(os.Stdout, "Response from `AccessRequestsAPI.GetAccessRequestConfig`: %v\n", resp)
        }
- path: /revocable-objects
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/access-requests#get-entitlement-details-for-identity
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          identityId := `7025c863c2704ba6beeaedf3cb091573` // string | The identity ID. # string | The identity ID.
          entitlementId := `ef38f94347e94562b5bb8424a56397d8` // string | The entitlement ID # string | The entitlement ID

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccessRequestsAPI.GetEntitlementDetailsForIdentity(context.Background(), identityId, entitlementId).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.AccessRequestsAPI.GetEntitlementDetailsForIdentity(context.Background(), identityId, entitlementId).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccessRequestsAPI.GetEntitlementDetailsForIdentity``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetEntitlementDetailsForIdentity`: IdentityEntitlementDetails
          fmt.Fprintf(os.Stdout, "Response from `AccessRequestsAPI.GetEntitlementDetailsForIdentity`: %v\n", resp)
        }
- path: /access-request-status
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/access-requests#list-access-request-status
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          requestedFor := `2c9180877b2b6ea4017b2c545f971429` // string | Filter the results by the identity the requests were made for. *me* indicates the current user. Mutually exclusive with *regarding-identity*. (optional) # string | Filter the results by the identity the requests were made for. *me* indicates the current user. Mutually exclusive with *regarding-identity*. (optional)
          requestedBy := `2c9180877b2b6ea4017b2c545f971429` // string | Filter the results by the identity who made the requests. *me* indicates the current user. Mutually exclusive with *regarding-identity*. (optional) # string | Filter the results by the identity who made the requests. *me* indicates the current user. Mutually exclusive with *regarding-identity*. (optional)
          regardingIdentity := `2c9180877b2b6ea4017b2c545f971429` // string | Filter the results by the specified identity who is either the requester or target of the requests. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*. (optional) # string | Filter the results by the specified identity who is either the requester or target of the requests. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*. (optional)
          assignedTo := `2c9180877b2b6ea4017b2c545f971429` // string | Filter the results by the specified identity who is the owner of the Identity Request Work Item. *me* indicates the current user. (optional) # string | Filter the results by the specified identity who is the owner of the Identity Request Work Item. *me* indicates the current user. (optional)
          count := false // bool | If this is true, the *X-Total-Count* response header populates with the number of results that would be returned if limit and offset were ignored. (optional) (default to false) # bool | If this is true, the *X-Total-Count* response header populates with the number of results that would be returned if limit and offset were ignored. (optional) (default to false)
          limit := 100 // int32 | Max number of results to return. (optional) (default to 250) # int32 | Max number of results to return. (optional) (default to 250)
          offset := 10 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. Defaults to 0 if not specified. (optional) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. Defaults to 0 if not specified. (optional)
          filters := `accountActivityItemId eq "2c918086771c86df0177401efcdf54c0"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **accessRequestId**: *eq, in, ge, gt, le, lt, ne, sw*  **accountActivityItemId**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **created**: *eq, in, ge, gt, le, lt, ne, isnull, sw* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **accessRequestId**: *eq, in, ge, gt, le, lt, ne, sw*  **accountActivityItemId**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **created**: *eq, in, ge, gt, le, lt, ne, isnull, sw* (optional)
          sorters := `created` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified, accountActivityItemId, name** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified, accountActivityItemId, name** (optional)
          requestState := `request-state=EXECUTING` // string | Filter the results by the state of the request. The only valid value is *EXECUTING*. (optional) # string | Filter the results by the state of the request. The only valid value is *EXECUTING*. (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccessRequestsAPI.ListAccessRequestStatus(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.AccessRequestsAPI.ListAccessRequestStatus(context.Background()).RequestedFor(requestedFor).RequestedBy(requestedBy).RegardingIdentity(regardingIdentity).AssignedTo(assignedTo).Count(count).Limit(limit).Offset(offset).Filters(filters).Sorters(sorters).RequestState(requestState).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccessRequestsAPI.ListAccessRequestStatus``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListAccessRequestStatus`: []RequestedItemStatus
          fmt.Fprintf(os.Stdout, "Response from `AccessRequestsAPI.ListAccessRequestStatus`: %v\n", resp)
        }
- path: /access-request-administration
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/access-requests#list-administrators-access-request-status
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          requestedFor := `2c9180877b2b6ea4017b2c545f971429` // string | Filter the results by the identity the requests were made for. *me* indicates the current user. Mutually exclusive with *regarding-identity*. (optional) # string | Filter the results by the identity the requests were made for. *me* indicates the current user. Mutually exclusive with *regarding-identity*. (optional)
          requestedBy := `2c9180877b2b6ea4017b2c545f971429` // string | Filter the results by the identity who made the requests. *me* indicates the current user. Mutually exclusive with *regarding-identity*. (optional) # string | Filter the results by the identity who made the requests. *me* indicates the current user. Mutually exclusive with *regarding-identity*. (optional)
          regardingIdentity := `2c9180877b2b6ea4017b2c545f971429` // string | Filter the results by the specified identity who is either the requester or target of the requests. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*. (optional) # string | Filter the results by the specified identity who is either the requester or target of the requests. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*. (optional)
          assignedTo := `2c9180877b2b6ea4017b2c545f971429` // string | Filter the results by the specified identity who is the owner of the Identity Request Work Item. *me* indicates the current user. (optional) # string | Filter the results by the specified identity who is the owner of the Identity Request Work Item. *me* indicates the current user. (optional)
          count := false // bool | If this is true, the *X-Total-Count* response header populates with the number of results that would be returned if limit and offset were ignored. (optional) (default to false) # bool | If this is true, the *X-Total-Count* response header populates with the number of results that would be returned if limit and offset were ignored. (optional) (default to false)
          limit := 100 // int32 | Max number of results to return. (optional) (default to 250) # int32 | Max number of results to return. (optional) (default to 250)
          offset := 10 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. Defaults to 0 if not specified. (optional) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. Defaults to 0 if not specified. (optional)
          filters := `accountActivityItemId eq "2c918086771c86df0177401efcdf54c0"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **accountActivityItemId**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **accessRequestId**: *in*  **status**: *in, eq, ne*  **created**: *eq, in, ge, gt, le, lt, ne, isnull, sw* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **accountActivityItemId**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **accessRequestId**: *in*  **status**: *in, eq, ne*  **created**: *eq, in, ge, gt, le, lt, ne, isnull, sw* (optional)
          sorters := `created` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified, accountActivityItemId, name, accessRequestId** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified, accountActivityItemId, name, accessRequestId** (optional)
          requestState := `request-state=EXECUTING` // string | Filter the results by the state of the request. The only valid value is *EXECUTING*. (optional) # string | Filter the results by the state of the request. The only valid value is *EXECUTING*. (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccessRequestsAPI.ListAdministratorsAccessRequestStatus(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.AccessRequestsAPI.ListAdministratorsAccessRequestStatus(context.Background()).RequestedFor(requestedFor).RequestedBy(requestedBy).RegardingIdentity(regardingIdentity).AssignedTo(assignedTo).Count(count).Limit(limit).Offset(offset).Filters(filters).Sorters(sorters).RequestState(requestState).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccessRequestsAPI.ListAdministratorsAccessRequestStatus``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListAdministratorsAccessRequestStatus`: []AccessRequestAdminItemStatus
          fmt.Fprintf(os.Stdout, "Response from `AccessRequestsAPI.ListAdministratorsAccessRequestStatus`: %v\n", resp)
        }
- path: /access-requests/accounts-selection
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/access-requests#load-account-selections
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           accountsselectionrequest := []byte(`{
          "requestedFor" : "2c918084660f45d6016617daa9210584",
          "clientMetadata" : {
            "requestedAppId" : "2c91808f7892918f0178b78da4a305a1",
            "requestedAppName" : "test-app"
          },
          "requestType" : "GRANT_ACCESS",
          "requestedItems" : [ {
            "clientMetadata" : {
              "requestedAppName" : "test-app",
              "requestedAppId" : "2c91808f7892918f0178b78da4a305a1"
            },
            "removeDate" : "2020-07-11T21:23:15Z",
            "comment" : "Requesting access profile for John Doe",
            "id" : "2c9180835d2e5168015d32f890ca1581",
            "type" : "ACCESS_PROFILE",
            "assignmentId" : "ee48a191c00d49bf9264eb0a4fc3a9fc",
            "nativeIdentity" : "CN=User db3377de14bf,OU=YOURCONTAINER, DC=YOURDOMAIN"
          }, {
            "clientMetadata" : {
              "requestedAppName" : "test-app",
              "requestedAppId" : "2c91808f7892918f0178b78da4a305a1"
            },
            "removeDate" : "2020-07-11T21:23:15Z",
            "comment" : "Requesting access profile for John Doe",
            "id" : "2c9180835d2e5168015d32f890ca1581",
            "type" : "ACCESS_PROFILE",
            "assignmentId" : "ee48a191c00d49bf9264eb0a4fc3a9fc",
            "nativeIdentity" : "CN=User db3377de14bf,OU=YOURCONTAINER, DC=YOURDOMAIN"
          }, {
            "clientMetadata" : {
              "requestedAppName" : "test-app",
              "requestedAppId" : "2c91808f7892918f0178b78da4a305a1"
            },
            "removeDate" : "2020-07-11T21:23:15Z",
            "comment" : "Requesting access profile for John Doe",
            "id" : "2c9180835d2e5168015d32f890ca1581",
            "type" : "ACCESS_PROFILE",
            "assignmentId" : "ee48a191c00d49bf9264eb0a4fc3a9fc",
            "nativeIdentity" : "CN=User db3377de14bf,OU=YOURCONTAINER, DC=YOURDOMAIN"
          }, {
            "clientMetadata" : {
              "requestedAppName" : "test-app",
              "requestedAppId" : "2c91808f7892918f0178b78da4a305a1"
            },
            "removeDate" : "2020-07-11T21:23:15Z",
            "comment" : "Requesting access profile for John Doe",
            "id" : "2c9180835d2e5168015d32f890ca1581",
            "type" : "ACCESS_PROFILE",
            "assignmentId" : "ee48a191c00d49bf9264eb0a4fc3a9fc",
            "nativeIdentity" : "CN=User db3377de14bf,OU=YOURCONTAINER, DC=YOURDOMAIN"
          }, {
            "clientMetadata" : {
              "requestedAppName" : "test-app",
              "requestedAppId" : "2c91808f7892918f0178b78da4a305a1"
            },
            "removeDate" : "2020-07-11T21:23:15Z",
            "comment" : "Requesting access profile for John Doe",
            "id" : "2c9180835d2e5168015d32f890ca1581",
            "type" : "ACCESS_PROFILE",
            "assignmentId" : "ee48a191c00d49bf9264eb0a4fc3a9fc",
            "nativeIdentity" : "CN=User db3377de14bf,OU=YOURCONTAINER, DC=YOURDOMAIN"
          } ]
        }`) // AccountsSelectionRequest | 

          
          var accountsSelectionRequest v2025.AccountsSelectionRequest
          if err := json.Unmarshal(accountsselectionrequest, &accountsSelectionRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccessRequestsAPI.LoadAccountSelections(context.Background()).AccountsSelectionRequest(accountsSelectionRequest).Execute()
          //resp, r, err := apiClient.V2025.AccessRequestsAPI.LoadAccountSelections(context.Background()).AccountsSelectionRequest(accountsSelectionRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccessRequestsAPI.LoadAccountSelections``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `LoadAccountSelections`: AccountsSelectionResponse
          fmt.Fprintf(os.Stdout, "Response from `AccessRequestsAPI.LoadAccountSelections`: %v\n", resp)
        }
- path: /access-request-config
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/access-requests#set-access-request-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           accessrequestconfig := []byte(`{
          "requestOnBehalfOfConfig" : {
            "allowRequestOnBehalfOfEmployeeByManager" : true,
            "allowRequestOnBehalfOfAnyoneByAnyone" : true
          },
          "approvalReminderAndEscalationConfig" : {
            "fallbackApproverRef" : {
              "name" : "Alison Ferguso",
              "id" : "5168015d32f890ca15812c9180835d2e",
              "type" : "IDENTITY",
              "email" : "alison.ferguso@identitysoon.com"
            },
            "maxReminders" : 1,
            "daysUntilEscalation" : 0,
            "daysBetweenReminders" : 0
          },
          "autoApprovalEnabled" : true,
          "entitlementRequestConfig" : {
            "accessRequestConfig" : {
              "denialCommentRequired" : false,
              "approvalSchemes" : [ {
                "approverId" : "e3eab852-8315-467f-9de7-70eda97f63c8",
                "approverType" : "GOVERNANCE_GROUP"
              }, {
                "approverId" : "e3eab852-8315-467f-9de7-70eda97f63c8",
                "approverType" : "GOVERNANCE_GROUP"
              } ],
              "reauthorizationRequired" : false,
              "requestCommentRequired" : true
            },
            "revocationRequestConfig" : {
              "approvalSchemes" : [ {
                "approverId" : "e3eab852-8315-467f-9de7-70eda97f63c8",
                "approverType" : "GOVERNANCE_GROUP"
              }, {
                "approverId" : "e3eab852-8315-467f-9de7-70eda97f63c8",
                "approverType" : "GOVERNANCE_GROUP"
              } ]
            }
          },
          "reauthorizationEnabled" : true,
          "approvalsMustBeExternal" : true
        }`) // AccessRequestConfig | 

          
          var accessRequestConfig v2025.AccessRequestConfig
          if err := json.Unmarshal(accessrequestconfig, &accessRequestConfig); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccessRequestsAPI.SetAccessRequestConfig(context.Background()).AccessRequestConfig(accessRequestConfig).Execute()
          //resp, r, err := apiClient.V2025.AccessRequestsAPI.SetAccessRequestConfig(context.Background()).AccessRequestConfig(accessRequestConfig).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccessRequestsAPI.SetAccessRequestConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SetAccessRequestConfig`: AccessRequestConfig
          fmt.Fprintf(os.Stdout, "Response from `AccessRequestsAPI.SetAccessRequestConfig`: %v\n", resp)
        }
- path: /account-activities/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/account-activities#get-account-activity
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The account activity id # string | The account activity id

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccountActivitiesAPI.GetAccountActivity(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.AccountActivitiesAPI.GetAccountActivity(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccountActivitiesAPI.GetAccountActivity``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetAccountActivity`: AccountActivity
          fmt.Fprintf(os.Stdout, "Response from `AccountActivitiesAPI.GetAccountActivity`: %v\n", resp)
        }
- path: /account-activities
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/account-activities#list-account-activities
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          requestedFor := `2c91808568c529c60168cca6f90c1313` // string | The identity that the activity was requested for. *me* indicates the current user. Mutually exclusive with *regarding-identity*. (optional) # string | The identity that the activity was requested for. *me* indicates the current user. Mutually exclusive with *regarding-identity*. (optional)
          requestedBy := `2c91808568c529c60168cca6f90c1313` // string | The identity that requested the activity. *me* indicates the current user. Mutually exclusive with *regarding-identity*. (optional) # string | The identity that requested the activity. *me* indicates the current user. Mutually exclusive with *regarding-identity*. (optional)
          regardingIdentity := `2c91808568c529c60168cca6f90c1313` // string | The specified identity will be either the requester or target of the account activity. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*. (optional) # string | The specified identity will be either the requester or target of the account activity. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*. (optional)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `type eq "Identity Refresh"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **type**: *eq, in, ge, le, lt, ne, isnull, sw*  **created**: *gt, lt, ge, le, eq, in, ne, isnull, sw*  **modified**: *gt, lt, ge, le, eq, in, ne, isnull, sw* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **type**: *eq, in, ge, le, lt, ne, isnull, sw*  **created**: *gt, lt, ge, le, eq, in, ne, isnull, sw*  **modified**: *gt, lt, ge, le, eq, in, ne, isnull, sw* (optional)
          sorters := `created` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **type, created, modified** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **type, created, modified** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccountActivitiesAPI.ListAccountActivities(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.AccountActivitiesAPI.ListAccountActivities(context.Background()).RequestedFor(requestedFor).RequestedBy(requestedBy).RegardingIdentity(regardingIdentity).Limit(limit).Offset(offset).Count(count).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccountActivitiesAPI.ListAccountActivities``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListAccountActivities`: []AccountActivity
          fmt.Fprintf(os.Stdout, "Response from `AccountActivitiesAPI.ListAccountActivities`: %v\n", resp)
        }
- path: /account-aggregations/{id}/status
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/account-aggregations#get-account-aggregation-status
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808477a6b0c60177a81146b8110b` // string | The account aggregation id # string | The account aggregation id

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccountAggregationsAPI.GetAccountAggregationStatus(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.AccountAggregationsAPI.GetAccountAggregationStatus(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccountAggregationsAPI.GetAccountAggregationStatus``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetAccountAggregationStatus`: AccountAggregationStatus
          fmt.Fprintf(os.Stdout, "Response from `AccountAggregationsAPI.GetAccountAggregationStatus`: %v\n", resp)
        }
- path: /account-usages/{accountId}/summaries
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/account-usages#get-usages-by-account-id
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          accountId := `ef38f94347e94562b5bb8424a56397d8` // string | ID of IDN account # string | ID of IDN account
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          sorters := `-date` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **date** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **date** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccountUsagesAPI.GetUsagesByAccountId(context.Background(), accountId).Execute()
          //resp, r, err := apiClient.V2025.AccountUsagesAPI.GetUsagesByAccountId(context.Background(), accountId).Limit(limit).Offset(offset).Count(count).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccountUsagesAPI.GetUsagesByAccountId``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetUsagesByAccountId`: []AccountUsage
          fmt.Fprintf(os.Stdout, "Response from `AccountUsagesAPI.GetUsagesByAccountId`: %v\n", resp)
        }
- path: /accounts
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/accounts#create-account
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           accountattributescreate := []byte(`{
          "attributes" : {
            "sourceId" : "34bfcbe116c9407464af37acbaf7a4dc",
            "city" : "Austin",
            "displayName" : "John Doe",
            "userName" : "jdoe",
            "sAMAccountName" : "jDoe",
            "mail" : "john.doe@sailpoint.com"
          }
        }`) // AccountAttributesCreate | 

          
          var accountAttributesCreate v2025.AccountAttributesCreate
          if err := json.Unmarshal(accountattributescreate, &accountAttributesCreate); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccountsAPI.CreateAccount(context.Background()).AccountAttributesCreate(accountAttributesCreate).Execute()
          //resp, r, err := apiClient.V2025.AccountsAPI.CreateAccount(context.Background()).AccountAttributesCreate(accountAttributesCreate).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccountsAPI.CreateAccount``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateAccount`: AccountsAsyncResult
          fmt.Fprintf(os.Stdout, "Response from `AccountsAPI.CreateAccount`: %v\n", resp)
        }
- path: /accounts/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/accounts#delete-account
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | Account ID. # string | Account ID.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccountsAPI.DeleteAccount(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.AccountsAPI.DeleteAccount(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccountsAPI.DeleteAccount``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `DeleteAccount`: AccountsAsyncResult
          fmt.Fprintf(os.Stdout, "Response from `AccountsAPI.DeleteAccount`: %v\n", resp)
        }
- path: /accounts/{id}/remove
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/accounts#delete-account-async
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `c350d6aa4f104c61b062cb632421ad10` // string | The account id # string | The account id

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccountsAPI.DeleteAccountAsync(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.AccountsAPI.DeleteAccountAsync(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccountsAPI.DeleteAccountAsync``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `DeleteAccountAsync`: TaskResultDto
          fmt.Fprintf(os.Stdout, "Response from `AccountsAPI.DeleteAccountAsync`: %v\n", resp)
        }
- path: /accounts/{id}/disable
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/accounts#disable-account
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The account id # string | The account id
           accounttogglerequest := []byte(`{
          "forceProvisioning" : false,
          "externalVerificationId" : "3f9180835d2e5168015d32f890ca1581"
        }`) // AccountToggleRequest | 

          
          var accountToggleRequest v2025.AccountToggleRequest
          if err := json.Unmarshal(accounttogglerequest, &accountToggleRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccountsAPI.DisableAccount(context.Background(), id).AccountToggleRequest(accountToggleRequest).Execute()
          //resp, r, err := apiClient.V2025.AccountsAPI.DisableAccount(context.Background(), id).AccountToggleRequest(accountToggleRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccountsAPI.DisableAccount``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `DisableAccount`: AccountsAsyncResult
          fmt.Fprintf(os.Stdout, "Response from `AccountsAPI.DisableAccount`: %v\n", resp)
        }
- path: /identities-accounts/{id}/disable
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/accounts#disable-account-for-identity
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808384203c2d018437e631158309` // string | The identity id. # string | The identity id.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccountsAPI.DisableAccountForIdentity(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.AccountsAPI.DisableAccountForIdentity(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccountsAPI.DisableAccountForIdentity``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `DisableAccountForIdentity`: map[string]interface{}
          fmt.Fprintf(os.Stdout, "Response from `AccountsAPI.DisableAccountForIdentity`: %v\n", resp)
        }
- path: /identities-accounts/disable
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/accounts#disable-accounts-for-identities
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           identitiesaccountsbulkrequest := []byte(`{
          "identityIds" : [ "2c91808384203c2d018437e631158308", "2c9180858082150f0180893dbaf553fe" ]
        }`) // IdentitiesAccountsBulkRequest | 

          
          var identitiesAccountsBulkRequest v2025.IdentitiesAccountsBulkRequest
          if err := json.Unmarshal(identitiesaccountsbulkrequest, &identitiesAccountsBulkRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccountsAPI.DisableAccountsForIdentities(context.Background()).IdentitiesAccountsBulkRequest(identitiesAccountsBulkRequest).Execute()
          //resp, r, err := apiClient.V2025.AccountsAPI.DisableAccountsForIdentities(context.Background()).IdentitiesAccountsBulkRequest(identitiesAccountsBulkRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccountsAPI.DisableAccountsForIdentities``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `DisableAccountsForIdentities`: []BulkIdentitiesAccountsResponse
          fmt.Fprintf(os.Stdout, "Response from `AccountsAPI.DisableAccountsForIdentities`: %v\n", resp)
        }
- path: /accounts/{id}/enable
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/accounts#enable-account
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The account id # string | The account id
           accounttogglerequest := []byte(`{
          "forceProvisioning" : false,
          "externalVerificationId" : "3f9180835d2e5168015d32f890ca1581"
        }`) // AccountToggleRequest | 

          
          var accountToggleRequest v2025.AccountToggleRequest
          if err := json.Unmarshal(accounttogglerequest, &accountToggleRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccountsAPI.EnableAccount(context.Background(), id).AccountToggleRequest(accountToggleRequest).Execute()
          //resp, r, err := apiClient.V2025.AccountsAPI.EnableAccount(context.Background(), id).AccountToggleRequest(accountToggleRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccountsAPI.EnableAccount``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `EnableAccount`: AccountsAsyncResult
          fmt.Fprintf(os.Stdout, "Response from `AccountsAPI.EnableAccount`: %v\n", resp)
        }
- path: /identities-accounts/{id}/enable
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/accounts#enable-account-for-identity
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808384203c2d018437e631158309` // string | The identity id. # string | The identity id.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccountsAPI.EnableAccountForIdentity(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.AccountsAPI.EnableAccountForIdentity(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccountsAPI.EnableAccountForIdentity``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `EnableAccountForIdentity`: map[string]interface{}
          fmt.Fprintf(os.Stdout, "Response from `AccountsAPI.EnableAccountForIdentity`: %v\n", resp)
        }
- path: /identities-accounts/enable
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/accounts#enable-accounts-for-identities
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           identitiesaccountsbulkrequest := []byte(`{
          "identityIds" : [ "2c91808384203c2d018437e631158308", "2c9180858082150f0180893dbaf553fe" ]
        }`) // IdentitiesAccountsBulkRequest | 

          
          var identitiesAccountsBulkRequest v2025.IdentitiesAccountsBulkRequest
          if err := json.Unmarshal(identitiesaccountsbulkrequest, &identitiesAccountsBulkRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccountsAPI.EnableAccountsForIdentities(context.Background()).IdentitiesAccountsBulkRequest(identitiesAccountsBulkRequest).Execute()
          //resp, r, err := apiClient.V2025.AccountsAPI.EnableAccountsForIdentities(context.Background()).IdentitiesAccountsBulkRequest(identitiesAccountsBulkRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccountsAPI.EnableAccountsForIdentities``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `EnableAccountsForIdentities`: []BulkIdentitiesAccountsResponse
          fmt.Fprintf(os.Stdout, "Response from `AccountsAPI.EnableAccountsForIdentities`: %v\n", resp)
        }
- path: /accounts/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/accounts#get-account
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | Account ID. # string | Account ID.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccountsAPI.GetAccount(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.AccountsAPI.GetAccount(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccountsAPI.GetAccount``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetAccount`: Account
          fmt.Fprintf(os.Stdout, "Response from `AccountsAPI.GetAccount`: %v\n", resp)
        }
- path: /accounts/{id}/entitlements
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/accounts#get-account-entitlements
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The account id # string | The account id
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccountsAPI.GetAccountEntitlements(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.AccountsAPI.GetAccountEntitlements(context.Background(), id).Limit(limit).Offset(offset).Count(count).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccountsAPI.GetAccountEntitlements``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetAccountEntitlements`: []Entitlement
          fmt.Fprintf(os.Stdout, "Response from `AccountsAPI.GetAccountEntitlements`: %v\n", resp)
        }
- path: /accounts
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/accounts#list-accounts
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          detailLevel := `FULL` // string | This value determines whether the API provides `SLIM` or increased level of detail (`FULL`) for each account in the returned list. `FULL` is the default behavior. (optional) # string | This value determines whether the API provides `SLIM` or increased level of detail (`FULL`) for each account in the returned list. `FULL` is the default behavior. (optional)
          filters := `identityId eq "2c9180858082150f0180893dbaf44201"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, sw*  **identityId**: *eq, in, sw*  **name**: *eq, in, sw*  **nativeIdentity**: *eq, in, sw*  **hasEntitlements**: *eq*  **sourceId**: *eq, in, sw*  **uncorrelated**: *eq*  **entitlements**: *eq*  **origin**: *eq, in*  **manuallyCorrelated**: *eq*  **identity.name**: *eq, in, sw*  **identity.correlated**: *eq*  **identity.identityState**: *eq, in*  **source.displayableName**: *eq, in*  **source.authoritative**: *eq*  **source.connectionType**: *eq, in*  **recommendation.method**: *eq, in, isnull*  **created**: *eq, ge, gt, le, lt*  **modified**: *eq, ge, gt, le, lt* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, sw*  **identityId**: *eq, in, sw*  **name**: *eq, in, sw*  **nativeIdentity**: *eq, in, sw*  **hasEntitlements**: *eq*  **sourceId**: *eq, in, sw*  **uncorrelated**: *eq*  **entitlements**: *eq*  **origin**: *eq, in*  **manuallyCorrelated**: *eq*  **identity.name**: *eq, in, sw*  **identity.correlated**: *eq*  **identity.identityState**: *eq, in*  **source.displayableName**: *eq, in*  **source.authoritative**: *eq*  **source.connectionType**: *eq, in*  **recommendation.method**: *eq, in, isnull*  **created**: *eq, ge, gt, le, lt*  **modified**: *eq, ge, gt, le, lt* (optional)
          sorters := `id,name` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, sourceId, identityId, nativeIdentity, uuid, manuallyCorrelated, entitlements, origin, identity.name, identity.identityState, identity.correlated, source.displayableName, source.authoritative, source.connectionType** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, sourceId, identityId, nativeIdentity, uuid, manuallyCorrelated, entitlements, origin, identity.name, identity.identityState, identity.correlated, source.displayableName, source.authoritative, source.connectionType** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccountsAPI.ListAccounts(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.AccountsAPI.ListAccounts(context.Background()).Limit(limit).Offset(offset).Count(count).DetailLevel(detailLevel).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccountsAPI.ListAccounts``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListAccounts`: []Account
          fmt.Fprintf(os.Stdout, "Response from `AccountsAPI.ListAccounts`: %v\n", resp)
        }
- path: /accounts/{id}
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/accounts#put-account
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | Account ID. # string | Account ID.
           accountattributes := []byte(`{
          "attributes" : {
            "city" : "Austin",
            "displayName" : "John Doe",
            "userName" : "jdoe",
            "sAMAccountName" : "jDoe",
            "mail" : "john.doe@sailpoint.com"
          }
        }`) // AccountAttributes | 

          
          var accountAttributes v2025.AccountAttributes
          if err := json.Unmarshal(accountattributes, &accountAttributes); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccountsAPI.PutAccount(context.Background(), id).AccountAttributes(accountAttributes).Execute()
          //resp, r, err := apiClient.V2025.AccountsAPI.PutAccount(context.Background(), id).AccountAttributes(accountAttributes).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccountsAPI.PutAccount``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PutAccount`: AccountsAsyncResult
          fmt.Fprintf(os.Stdout, "Response from `AccountsAPI.PutAccount`: %v\n", resp)
        }
- path: /accounts/{id}/reload
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/accounts#submit-reload-account
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The account id # string | The account id

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccountsAPI.SubmitReloadAccount(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.AccountsAPI.SubmitReloadAccount(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccountsAPI.SubmitReloadAccount``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SubmitReloadAccount`: AccountsAsyncResult
          fmt.Fprintf(os.Stdout, "Response from `AccountsAPI.SubmitReloadAccount`: %v\n", resp)
        }
- path: /accounts/{id}/unlock
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/accounts#unlock-account
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The account ID. # string | The account ID.
           accountunlockrequest := []byte(`{
          "forceProvisioning" : false,
          "externalVerificationId" : "3f9180835d2e5168015d32f890ca1581",
          "unlockIDNAccount" : false
        }`) // AccountUnlockRequest | 

          
          var accountUnlockRequest v2025.AccountUnlockRequest
          if err := json.Unmarshal(accountunlockrequest, &accountUnlockRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccountsAPI.UnlockAccount(context.Background(), id).AccountUnlockRequest(accountUnlockRequest).Execute()
          //resp, r, err := apiClient.V2025.AccountsAPI.UnlockAccount(context.Background(), id).AccountUnlockRequest(accountUnlockRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccountsAPI.UnlockAccount``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UnlockAccount`: AccountsAsyncResult
          fmt.Fprintf(os.Stdout, "Response from `AccountsAPI.UnlockAccount`: %v\n", resp)
        }
- path: /accounts/{id}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/accounts#update-account
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | Account ID. # string | Account ID.
          requestbody := []byte(`[{op=remove, path=/identityId}]`) // []map[string]interface{} | A list of account update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.

          
          var requestBody []v2025.RequestBody
          if err := json.Unmarshal(requestbody, &requestBody); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AccountsAPI.UpdateAccount(context.Background(), id).RequestBody(requestBody).Execute()
          //resp, r, err := apiClient.V2025.AccountsAPI.UpdateAccount(context.Background(), id).RequestBody(requestBody).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AccountsAPI.UpdateAccount``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateAccount`: map[string]interface{}
          fmt.Fprintf(os.Stdout, "Response from `AccountsAPI.UpdateAccount`: %v\n", resp)
        }
- path: /discovered-applications
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/application-discovery#get-discovered-applications
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          detail := `FULL` // string | Determines whether slim, or increased level of detail is provided for each discovered application in the returned list. SLIM is the default behavior. (optional) # string | Determines whether slim, or increased level of detail is provided for each discovered application in the returned list. SLIM is the default behavior. (optional)
          filter := `name eq "Okta" and description co "Okta" and discoverySource in ("csv", "Okta Saas")` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)       Filtering is supported for the following fields and operators:  **name**: *eq, sw, co*  **description**: *eq, sw, co*  **createdAtStart**: *eq, le, ge*  **createdAtEnd**: *eq, le, ge*  **discoveredAtStart**: *eq, le, ge*  **discoveredAtEnd**: *eq, le, ge*  **discoverySource**: *eq, in*  (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)       Filtering is supported for the following fields and operators:  **name**: *eq, sw, co*  **description**: *eq, sw, co*  **createdAtStart**: *eq, le, ge*  **createdAtEnd**: *eq, le, ge*  **discoveredAtStart**: *eq, le, ge*  **discoveredAtEnd**: *eq, le, ge*  **discoverySource**: *eq, in*  (optional)
          sorters := `name` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, description, discoveredAt, discoverySource** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, description, discoveredAt, discoverySource** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ApplicationDiscoveryAPI.GetDiscoveredApplications(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.ApplicationDiscoveryAPI.GetDiscoveredApplications(context.Background()).Limit(limit).Offset(offset).Detail(detail).Filter(filter).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ApplicationDiscoveryAPI.GetDiscoveredApplications``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetDiscoveredApplications`: []GetDiscoveredApplications200ResponseInner
          fmt.Fprintf(os.Stdout, "Response from `ApplicationDiscoveryAPI.GetDiscoveredApplications`: %v\n", resp)
        }
- path: /manual-discover-applications-template
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/application-discovery#get-manual-discover-applications-csv-template
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ApplicationDiscoveryAPI.GetManualDiscoverApplicationsCsvTemplate(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.ApplicationDiscoveryAPI.GetManualDiscoverApplicationsCsvTemplate(context.Background()).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ApplicationDiscoveryAPI.GetManualDiscoverApplicationsCsvTemplate``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetManualDiscoverApplicationsCsvTemplate`: ManualDiscoverApplicationsTemplate
          fmt.Fprintf(os.Stdout, "Response from `ApplicationDiscoveryAPI.GetManualDiscoverApplicationsCsvTemplate`: %v\n", resp)
        }
- path: /manual-discover-applications
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/application-discovery#send-manual-discover-applications-csv-template
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          file := BINARY_DATA_HERE // *os.File | The CSV file to upload containing `application_name` and `description` columns. Each row represents an application to be discovered. # *os.File | The CSV file to upload containing `application_name` and `description` columns. Each row represents an application to be discovered.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.ApplicationDiscoveryAPI.SendManualDiscoverApplicationsCsvTemplate(context.Background()).File(file).Execute()
          //r, err := apiClient.V2025.ApplicationDiscoveryAPI.SendManualDiscoverApplicationsCsvTemplate(context.Background()).File(file).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ApplicationDiscoveryAPI.SendManualDiscoverApplicationsCsvTemplate``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /generic-approvals/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/approvals#get-approval
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `38453251-6be2-5f8f-df93-5ce19e295837` // string | ID of the approval that is to be returned # string | ID of the approval that is to be returned
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ApprovalsAPI.GetApproval(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.ApprovalsAPI.GetApproval(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ApprovalsAPI.GetApproval``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetApproval`: Approval
          fmt.Fprintf(os.Stdout, "Response from `ApprovalsAPI.GetApproval`: %v\n", resp)
        }
- path: /generic-approvals
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/approvals#get-approvals
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          mine := true // bool | Returns the list of approvals for the current caller (optional) # bool | Returns the list of approvals for the current caller (optional)
          requesterId := `17e633e7d57e481569df76323169deb6a` // string | Returns the list of approvals for a given requester ID (optional) # string | Returns the list of approvals for a given requester ID (optional)
          filters := `filters=status eq PENDING` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **status**: *eq*  **referenceType**: *eq* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **status**: *eq*  **referenceType**: *eq* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ApprovalsAPI.GetApprovals(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.ApprovalsAPI.GetApprovals(context.Background()).XSailPointExperimental(xSailPointExperimental).Mine(mine).RequesterId(requesterId).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ApprovalsAPI.GetApprovals``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetApprovals`: []Approval
          fmt.Fprintf(os.Stdout, "Response from `ApprovalsAPI.GetApprovals`: %v\n", resp)
        }
- path: /source-apps
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/apps#create-source-app
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           sourceappcreatedto := []byte(`{
          "name" : "my app",
          "description" : "the source app for engineers",
          "accountSource" : {
            "name" : "ODS-AD-Source",
            "id" : "2c9180827ca885d7017ca8ce28a000eb",
            "type" : "SOURCE"
          },
          "matchAllAccounts" : true
        }`) // SourceAppCreateDto | 

          
          var sourceAppCreateDto v2025.SourceAppCreateDto
          if err := json.Unmarshal(sourceappcreatedto, &sourceAppCreateDto); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AppsAPI.CreateSourceApp(context.Background()).XSailPointExperimental(xSailPointExperimental).SourceAppCreateDto(sourceAppCreateDto).Execute()
          //resp, r, err := apiClient.V2025.AppsAPI.CreateSourceApp(context.Background()).XSailPointExperimental(xSailPointExperimental).SourceAppCreateDto(sourceAppCreateDto).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AppsAPI.CreateSourceApp``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateSourceApp`: SourceApp
          fmt.Fprintf(os.Stdout, "Response from `AppsAPI.CreateSourceApp`: %v\n", resp)
        }
- path: /source-apps/{id}/access-profiles/bulk-remove
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/apps#delete-access-profiles-from-source-app-by-bulk
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808a7813090a017814121e121518` // string | ID of the source app # string | ID of the source app
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          requestbody := []byte(`[c9575abb5e3a4e3db82b2f989a738aa2, c9dc28e148a24d65b3ccb5fb8ca5ddd9]`) // []string | 
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)

          
          var requestBody []v2025.RequestBody
          if err := json.Unmarshal(requestbody, &requestBody); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AppsAPI.DeleteAccessProfilesFromSourceAppByBulk(context.Background(), id).XSailPointExperimental(xSailPointExperimental).RequestBody(requestBody).Execute()
          //resp, r, err := apiClient.V2025.AppsAPI.DeleteAccessProfilesFromSourceAppByBulk(context.Background(), id).XSailPointExperimental(xSailPointExperimental).RequestBody(requestBody).Limit(limit).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AppsAPI.DeleteAccessProfilesFromSourceAppByBulk``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `DeleteAccessProfilesFromSourceAppByBulk`: []AccessProfileDetails
          fmt.Fprintf(os.Stdout, "Response from `AppsAPI.DeleteAccessProfilesFromSourceAppByBulk`: %v\n", resp)
        }
- path: /source-apps/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/apps#delete-source-app
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c9180835d191a86015d28455b4a2329` // string | source app ID. # string | source app ID.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AppsAPI.DeleteSourceApp(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.AppsAPI.DeleteSourceApp(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AppsAPI.DeleteSourceApp``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `DeleteSourceApp`: SourceApp
          fmt.Fprintf(os.Stdout, "Response from `AppsAPI.DeleteSourceApp`: %v\n", resp)
        }
- path: /source-apps/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/apps#get-source-app
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808a7813090a017814121e121518` // string | ID of the source app # string | ID of the source app
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AppsAPI.GetSourceApp(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.AppsAPI.GetSourceApp(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AppsAPI.GetSourceApp``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetSourceApp`: SourceApp
          fmt.Fprintf(os.Stdout, "Response from `AppsAPI.GetSourceApp`: %v\n", resp)
        }
- path: /source-apps/{id}/access-profiles
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/apps#list-access-profiles-for-source-app
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808a7813090a017814121e121518` // string | ID of the source app # string | ID of the source app
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          filters := `name eq "developer access profile"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AppsAPI.ListAccessProfilesForSourceApp(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.AppsAPI.ListAccessProfilesForSourceApp(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Limit(limit).Offset(offset).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AppsAPI.ListAccessProfilesForSourceApp``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListAccessProfilesForSourceApp`: []AccessProfileDetails
          fmt.Fprintf(os.Stdout, "Response from `AppsAPI.ListAccessProfilesForSourceApp`: %v\n", resp)
        }
- path: /source-apps/all
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/apps#list-all-source-app
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          sorters := `name,-modified` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, owner.id, accountSource.id** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, owner.id, accountSource.id** (optional)
          filters := `enabled eq true` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, co, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **accountSource.id**: *eq, in*  **enabled**: *eq* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, co, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **accountSource.id**: *eq, in*  **enabled**: *eq* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AppsAPI.ListAllSourceApp(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.AppsAPI.ListAllSourceApp(context.Background()).XSailPointExperimental(xSailPointExperimental).Limit(limit).Count(count).Offset(offset).Sorters(sorters).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AppsAPI.ListAllSourceApp``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListAllSourceApp`: []SourceApp
          fmt.Fprintf(os.Stdout, "Response from `AppsAPI.ListAllSourceApp`: %v\n", resp)
        }
- path: /user-apps/all
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/apps#list-all-user-apps
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          filters := `name eq "user app name"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*  **ownerId**: *eq*  **ownerName**: *eq, sw*  **ownerAlias**: *eq, sw*  **accountId**: *eq*  **sourceAppId**: *eq* # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*  **ownerId**: *eq*  **ownerName**: *eq, sw*  **ownerAlias**: *eq, sw*  **accountId**: *eq*  **sourceAppId**: *eq*
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AppsAPI.ListAllUserApps(context.Background()).Filters(filters).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.AppsAPI.ListAllUserApps(context.Background()).Filters(filters).XSailPointExperimental(xSailPointExperimental).Limit(limit).Count(count).Offset(offset).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AppsAPI.ListAllUserApps``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListAllUserApps`: []UserApp
          fmt.Fprintf(os.Stdout, "Response from `AppsAPI.ListAllUserApps`: %v\n", resp)
        }
- path: /source-apps/assigned
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/apps#list-assigned-source-app
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          sorters := `name,-modified` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, accountSource.id** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, accountSource.id** (optional)
          filters := `name eq "source app name"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, co, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **accountSource.id**: *eq, in* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, co, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **accountSource.id**: *eq, in* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AppsAPI.ListAssignedSourceApp(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.AppsAPI.ListAssignedSourceApp(context.Background()).XSailPointExperimental(xSailPointExperimental).Limit(limit).Count(count).Offset(offset).Sorters(sorters).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AppsAPI.ListAssignedSourceApp``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListAssignedSourceApp`: []SourceApp
          fmt.Fprintf(os.Stdout, "Response from `AppsAPI.ListAssignedSourceApp`: %v\n", resp)
        }
- path: /user-apps/{id}/available-accounts
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/apps#list-available-accounts-for-user-app
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808a7813090a017814121e121518` // string | ID of the user app # string | ID of the user app
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AppsAPI.ListAvailableAccountsForUserApp(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.AppsAPI.ListAvailableAccountsForUserApp(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Limit(limit).Count(count).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AppsAPI.ListAvailableAccountsForUserApp``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListAvailableAccountsForUserApp`: []AppAccountDetails
          fmt.Fprintf(os.Stdout, "Response from `AppsAPI.ListAvailableAccountsForUserApp`: %v\n", resp)
        }
- path: /source-apps
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/apps#list-available-source-apps
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          sorters := `name,-modified` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, owner.id, accountSource.id** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, owner.id, accountSource.id** (optional)
          filters := `name eq "source app name"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, co, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **accountSource.id**: *eq, in* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, co, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **accountSource.id**: *eq, in* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AppsAPI.ListAvailableSourceApps(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.AppsAPI.ListAvailableSourceApps(context.Background()).XSailPointExperimental(xSailPointExperimental).Limit(limit).Count(count).Offset(offset).Sorters(sorters).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AppsAPI.ListAvailableSourceApps``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListAvailableSourceApps`: []SourceApp
          fmt.Fprintf(os.Stdout, "Response from `AppsAPI.ListAvailableSourceApps`: %v\n", resp)
        }
- path: /user-apps
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/apps#list-owned-user-apps
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          filters := `name eq "user app name"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*  **ownerName**: *eq, sw*  **ownerAlias**: *eq, sw*  **accountId**: *eq*  **sourceAppId**: *eq* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*  **ownerName**: *eq, sw*  **ownerAlias**: *eq, sw*  **accountId**: *eq*  **sourceAppId**: *eq* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AppsAPI.ListOwnedUserApps(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.AppsAPI.ListOwnedUserApps(context.Background()).XSailPointExperimental(xSailPointExperimental).Limit(limit).Count(count).Offset(offset).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AppsAPI.ListOwnedUserApps``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListOwnedUserApps`: []UserApp
          fmt.Fprintf(os.Stdout, "Response from `AppsAPI.ListOwnedUserApps`: %v\n", resp)
        }
- path: /source-apps/{id}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/apps#patch-source-app
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808a7813090a017814121e121518` // string | ID of the source app to patch # string | ID of the source app to patch
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          jsonpatchoperation := []byte(`[{op=replace, path=/enabled, value=true}, {op=replace, path=/matchAllAccounts, value=true}]`) // []JsonPatchOperation |  (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AppsAPI.PatchSourceApp(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.AppsAPI.PatchSourceApp(context.Background(), id).XSailPointExperimental(xSailPointExperimental).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AppsAPI.PatchSourceApp``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchSourceApp`: SourceAppPatchDto
          fmt.Fprintf(os.Stdout, "Response from `AppsAPI.PatchSourceApp`: %v\n", resp)
        }
- path: /user-apps/{id}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/apps#patch-user-app
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808a7813090a017814121e121518` // string | ID of the user app to patch # string | ID of the user app to patch
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          jsonpatchoperation := []byte(``) // []JsonPatchOperation |  (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AppsAPI.PatchUserApp(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.AppsAPI.PatchUserApp(context.Background(), id).XSailPointExperimental(xSailPointExperimental).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AppsAPI.PatchUserApp``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchUserApp`: UserApp
          fmt.Fprintf(os.Stdout, "Response from `AppsAPI.PatchUserApp`: %v\n", resp)
        }
- path: /source-apps/bulk-update
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/apps#update-source-apps-in-bulk
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           sourceappbulkupdaterequest := []byte(`{
          "appIds" : [ "2c91808a7624751a01762f19d665220d", "2c91808a7624751a01762f19d67c220e", "2c91808a7624751a01762f19d692220f" ],
          "jsonPatch" : [ {
            "op" : "replace",
            "path" : "/enabled",
            "value" : false
          }, {
            "op" : "replace",
            "path" : "/matchAllAccounts",
            "value" : false
          } ]
        }`) // SourceAppBulkUpdateRequest |  (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.AppsAPI.UpdateSourceAppsInBulk(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //r, err := apiClient.V2025.AppsAPI.UpdateSourceAppsInBulk(context.Background()).XSailPointExperimental(xSailPointExperimental).SourceAppBulkUpdateRequest(sourceAppBulkUpdateRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AppsAPI.UpdateSourceAppsInBulk``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /auth-profiles/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/auth-profile#get-profile-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          id := `2c91808a7813090a017814121919ecca` // string | ID of the Auth Profile to patch. # string | ID of the Auth Profile to patch.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AuthProfileAPI.GetProfileConfig(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.AuthProfileAPI.GetProfileConfig(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AuthProfileAPI.GetProfileConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetProfileConfig`: AuthProfile
          fmt.Fprintf(os.Stdout, "Response from `AuthProfileAPI.GetProfileConfig`: %v\n", resp)
        }
- path: /auth-profiles
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/auth-profile#get-profile-config-list
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AuthProfileAPI.GetProfileConfigList(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.AuthProfileAPI.GetProfileConfigList(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AuthProfileAPI.GetProfileConfigList``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetProfileConfigList`: []AuthProfileSummary
          fmt.Fprintf(os.Stdout, "Response from `AuthProfileAPI.GetProfileConfigList`: %v\n", resp)
        }
- path: /auth-profiles/{id}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/auth-profile#patch-profile-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808a7813090a017814121919ecca` // string | ID of the Auth Profile to patch. # string | ID of the Auth Profile to patch.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          jsonpatchoperation := []byte(``) // []JsonPatchOperation | 

          
          var jsonPatchOperation []v2025.JsonPatchOperation
          if err := json.Unmarshal(jsonpatchoperation, &jsonPatchOperation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AuthProfileAPI.PatchProfileConfig(context.Background(), id).XSailPointExperimental(xSailPointExperimental).JsonPatchOperation(jsonPatchOperation).Execute()
          //resp, r, err := apiClient.V2025.AuthProfileAPI.PatchProfileConfig(context.Background(), id).XSailPointExperimental(xSailPointExperimental).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AuthProfileAPI.PatchProfileConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchProfileConfig`: AuthProfile
          fmt.Fprintf(os.Stdout, "Response from `AuthProfileAPI.PatchProfileConfig`: %v\n", resp)
        }
- path: /auth-users/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/auth-users#get-auth-user
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | Identity ID # string | Identity ID

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AuthUsersAPI.GetAuthUser(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.AuthUsersAPI.GetAuthUser(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AuthUsersAPI.GetAuthUser``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetAuthUser`: AuthUser
          fmt.Fprintf(os.Stdout, "Response from `AuthUsersAPI.GetAuthUser`: %v\n", resp)
        }
- path: /auth-users/{id}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/auth-users#patch-auth-user
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | Identity ID # string | Identity ID
          jsonpatchoperation := []byte(`[{op=replace, path=/capabilities, value=[ORG_ADMIN]}]`) // []JsonPatchOperation | A list of auth user update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.

          
          var jsonPatchOperation []v2025.JsonPatchOperation
          if err := json.Unmarshal(jsonpatchoperation, &jsonPatchOperation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.AuthUsersAPI.PatchAuthUser(context.Background(), id).JsonPatchOperation(jsonPatchOperation).Execute()
          //resp, r, err := apiClient.V2025.AuthUsersAPI.PatchAuthUser(context.Background(), id).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `AuthUsersAPI.PatchAuthUser``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchAuthUser`: AuthUser
          fmt.Fprintf(os.Stdout, "Response from `AuthUsersAPI.PatchAuthUser`: %v\n", resp)
        }
- path: /brandings
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/branding#create-branding-item
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          name := `name_example` // string | name of branding item # string | name of branding item
          productName := `productName_example` // string | product name # string | product name
          actionButtonColor := `actionButtonColor_example` // string | hex value of color for action button (optional) # string | hex value of color for action button (optional)
          activeLinkColor := `activeLinkColor_example` // string | hex value of color for link (optional) # string | hex value of color for link (optional)
          navigationColor := `navigationColor_example` // string | hex value of color for navigation bar (optional) # string | hex value of color for navigation bar (optional)
          emailFromAddress := `emailFromAddress_example` // string | email from address (optional) # string | email from address (optional)
          loginInformationalMessage := `loginInformationalMessage_example` // string | login information message (optional) # string | login information message (optional)
          fileStandard := BINARY_DATA_HERE // *os.File | png file with logo (optional) # *os.File | png file with logo (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.BrandingAPI.CreateBrandingItem(context.Background()).Name(name).ProductName(productName).Execute()
          //resp, r, err := apiClient.V2025.BrandingAPI.CreateBrandingItem(context.Background()).Name(name).ProductName(productName).ActionButtonColor(actionButtonColor).ActiveLinkColor(activeLinkColor).NavigationColor(navigationColor).EmailFromAddress(emailFromAddress).LoginInformationalMessage(loginInformationalMessage).FileStandard(fileStandard).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `BrandingAPI.CreateBrandingItem``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateBrandingItem`: BrandingItem
          fmt.Fprintf(os.Stdout, "Response from `BrandingAPI.CreateBrandingItem`: %v\n", resp)
        }
- path: /brandings/{name}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/branding#delete-branding
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          name := `default` // string | The name of the branding item to be deleted # string | The name of the branding item to be deleted

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.BrandingAPI.DeleteBranding(context.Background(), name).Execute()
          //r, err := apiClient.V2025.BrandingAPI.DeleteBranding(context.Background(), name).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `BrandingAPI.DeleteBranding``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /brandings/{name}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/branding#get-branding
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          name := `default` // string | The name of the branding item to be retrieved # string | The name of the branding item to be retrieved

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.BrandingAPI.GetBranding(context.Background(), name).Execute()
          //resp, r, err := apiClient.V2025.BrandingAPI.GetBranding(context.Background(), name).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `BrandingAPI.GetBranding``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetBranding`: BrandingItem
          fmt.Fprintf(os.Stdout, "Response from `BrandingAPI.GetBranding`: %v\n", resp)
        }
- path: /brandings
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/branding#get-branding-list
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.BrandingAPI.GetBrandingList(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.BrandingAPI.GetBrandingList(context.Background()).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `BrandingAPI.GetBrandingList``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetBrandingList`: []BrandingItem
          fmt.Fprintf(os.Stdout, "Response from `BrandingAPI.GetBrandingList`: %v\n", resp)
        }
- path: /brandings/{name}
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/branding#set-branding-item
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          name := `default` // string | The name of the branding item to be retrieved # string | The name of the branding item to be retrieved
          name2 := `name_example` // string | name of branding item # string | name of branding item
          productName := `productName_example` // string | product name # string | product name
          actionButtonColor := `actionButtonColor_example` // string | hex value of color for action button (optional) # string | hex value of color for action button (optional)
          activeLinkColor := `activeLinkColor_example` // string | hex value of color for link (optional) # string | hex value of color for link (optional)
          navigationColor := `navigationColor_example` // string | hex value of color for navigation bar (optional) # string | hex value of color for navigation bar (optional)
          emailFromAddress := `emailFromAddress_example` // string | email from address (optional) # string | email from address (optional)
          loginInformationalMessage := `loginInformationalMessage_example` // string | login information message (optional) # string | login information message (optional)
          fileStandard := BINARY_DATA_HERE // *os.File | png file with logo (optional) # *os.File | png file with logo (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.BrandingAPI.SetBrandingItem(context.Background(), name).Name2(name2).ProductName(productName).Execute()
          //resp, r, err := apiClient.V2025.BrandingAPI.SetBrandingItem(context.Background(), name).Name2(name2).ProductName(productName).ActionButtonColor(actionButtonColor).ActiveLinkColor(activeLinkColor).NavigationColor(navigationColor).EmailFromAddress(emailFromAddress).LoginInformationalMessage(loginInformationalMessage).FileStandard(fileStandard).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `BrandingAPI.SetBrandingItem``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SetBrandingItem`: BrandingItem
          fmt.Fprintf(os.Stdout, "Response from `BrandingAPI.SetBrandingItem`: %v\n", resp)
        }
- path: /campaign-filters
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certification-campaign-filters#create-campaign-filter
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           campaignfilterdetails := []byte(`{
          "owner" : "SailPoint Support",
          "mode" : "INCLUSION",
          "isSystemFilter" : false,
          "name" : "Identity Attribute Campaign Filter",
          "description" : "Campaign filter to certify data based on an identity attribute's specified property.",
          "id" : "5ec18cef39020d6fd7a60ad3970aba61",
          "criteriaList" : [ {
            "type" : "IDENTITY_ATTRIBUTE",
            "property" : "displayName",
            "value" : "support",
            "operation" : "CONTAINS",
            "negateResult" : false,
            "shortCircuit" : false,
            "recordChildMatches" : false,
            "suppressMatchedItems" : false
          } ]
        }`) // CampaignFilterDetails | 

          
          var campaignFilterDetails v2025.CampaignFilterDetails
          if err := json.Unmarshal(campaignfilterdetails, &campaignFilterDetails); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationCampaignFiltersAPI.CreateCampaignFilter(context.Background()).CampaignFilterDetails(campaignFilterDetails).Execute()
          //resp, r, err := apiClient.V2025.CertificationCampaignFiltersAPI.CreateCampaignFilter(context.Background()).CampaignFilterDetails(campaignFilterDetails).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationCampaignFiltersAPI.CreateCampaignFilter``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateCampaignFilter`: CampaignFilterDetails
          fmt.Fprintf(os.Stdout, "Response from `CertificationCampaignFiltersAPI.CreateCampaignFilter`: %v\n", resp)
        }
- path: /campaign-filters/delete
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certification-campaign-filters#delete-campaign-filters
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          requestbody := []byte(``) // []string | A json list of IDs of campaign filters to delete.

          
          var requestBody []v2025.RequestBody
          if err := json.Unmarshal(requestbody, &requestBody); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.CertificationCampaignFiltersAPI.DeleteCampaignFilters(context.Background()).RequestBody(requestBody).Execute()
          //r, err := apiClient.V2025.CertificationCampaignFiltersAPI.DeleteCampaignFilters(context.Background()).RequestBody(requestBody).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationCampaignFiltersAPI.DeleteCampaignFilters``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /campaign-filters/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certification-campaign-filters#get-campaign-filter-by-id
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `e9f9a1397b842fd5a65842087040d3ac` // string | The ID of the campaign filter to be retrieved. # string | The ID of the campaign filter to be retrieved.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationCampaignFiltersAPI.GetCampaignFilterById(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.CertificationCampaignFiltersAPI.GetCampaignFilterById(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationCampaignFiltersAPI.GetCampaignFilterById``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetCampaignFilterById`: CampaignFilterDetails
          fmt.Fprintf(os.Stdout, "Response from `CertificationCampaignFiltersAPI.GetCampaignFilterById`: %v\n", resp)
        }
- path: /campaign-filters
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certification-campaign-filters#list-campaign-filters
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          start := 0 // int32 | Start/Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Start/Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          includeSystemFilters := true // bool | If this is true, the API includes system filters in the count and results. Otherwise it excludes them. If no value is provided, the default is true.  (optional) (default to true) # bool | If this is true, the API includes system filters in the count and results. Otherwise it excludes them. If no value is provided, the default is true.  (optional) (default to true)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationCampaignFiltersAPI.ListCampaignFilters(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.CertificationCampaignFiltersAPI.ListCampaignFilters(context.Background()).Limit(limit).Start(start).IncludeSystemFilters(includeSystemFilters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationCampaignFiltersAPI.ListCampaignFilters``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListCampaignFilters`: ListCampaignFilters200Response
          fmt.Fprintf(os.Stdout, "Response from `CertificationCampaignFiltersAPI.ListCampaignFilters`: %v\n", resp)
        }
- path: /campaign-filters/{id}
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certification-campaign-filters#update-campaign-filter
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          filterId := `e9f9a1397b842fd5a65842087040d3ac` // string | The ID of the campaign filter being modified. # string | The ID of the campaign filter being modified.
           campaignfilterdetails := []byte(`{
          "owner" : "SailPoint Support",
          "mode" : "INCLUSION",
          "isSystemFilter" : false,
          "name" : "Identity Attribute Campaign Filter",
          "description" : "Campaign filter to certify data based on an identity attribute's specified property.",
          "id" : "5ec18cef39020d6fd7a60ad3970aba61",
          "criteriaList" : [ {
            "type" : "IDENTITY_ATTRIBUTE",
            "property" : "displayName",
            "value" : "support",
            "operation" : "CONTAINS",
            "negateResult" : false,
            "shortCircuit" : false,
            "recordChildMatches" : false,
            "suppressMatchedItems" : false
          } ]
        }`) // CampaignFilterDetails | A campaign filter details with updated field values.

          
          var campaignFilterDetails v2025.CampaignFilterDetails
          if err := json.Unmarshal(campaignfilterdetails, &campaignFilterDetails); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationCampaignFiltersAPI.UpdateCampaignFilter(context.Background(), filterId).CampaignFilterDetails(campaignFilterDetails).Execute()
          //resp, r, err := apiClient.V2025.CertificationCampaignFiltersAPI.UpdateCampaignFilter(context.Background(), filterId).CampaignFilterDetails(campaignFilterDetails).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationCampaignFiltersAPI.UpdateCampaignFilter``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateCampaignFilter`: CampaignFilterDetails
          fmt.Fprintf(os.Stdout, "Response from `CertificationCampaignFiltersAPI.UpdateCampaignFilter`: %v\n", resp)
        }
- path: /campaigns/{id}/complete
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certification-campaigns#complete-campaign
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | Campaign ID. # string | Campaign ID.
           campaigncompleteoptions := []byte(`{
          "autoCompleteAction" : "REVOKE"
        }`) // CampaignCompleteOptions | Optional. Default behavior is for the campaign to auto-approve upon completion, unless autoCompleteAction=REVOKE (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationCampaignsAPI.CompleteCampaign(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.CertificationCampaignsAPI.CompleteCampaign(context.Background(), id).CampaignCompleteOptions(campaignCompleteOptions).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationCampaignsAPI.CompleteCampaign``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CompleteCampaign`: map[string]interface{}
          fmt.Fprintf(os.Stdout, "Response from `CertificationCampaignsAPI.CompleteCampaign`: %v\n", resp)
        }
- path: /campaigns
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certification-campaigns#create-campaign
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           campaign := []byte(`{
          "totalCertifications" : 100,
          "sourcesWithOrphanEntitlements" : [ {
            "name" : "Source with orphan entitlements",
            "id" : "2c90ad2a70ace7d50170acf22ca90010",
            "type" : "SOURCE"
          }, {
            "name" : "Source with orphan entitlements",
            "id" : "2c90ad2a70ace7d50170acf22ca90010",
            "type" : "SOURCE"
          } ],
          "recommendationsEnabled" : true,
          "sunsetCommentsRequired" : true,
          "created" : "2020-03-03T22:15:13.611Z",
          "machineAccountCampaignInfo" : {
            "reviewerType" : "ACCOUNT_OWNER",
            "sourceIds" : [ "0fbe863c063c4c88a35fd7f17e8a3df5" ]
          },
          "description" : "Everyone needs to be reviewed by their manager",
          "type" : "MANAGER",
          "sourceOwnerCampaignInfo" : {
            "sourceIds" : [ "0fbe863c063c4c88a35fd7f17e8a3df5" ]
          },
          "emailNotificationEnabled" : false,
          "alerts" : [ {
            "level" : "ERROR",
            "localizations" : [ {
              "localeOrigin" : "DEFAULT",
              "text" : "The request was syntactically correct but its content is semantically invalid.",
              "locale" : "en-US"
            }, {
              "localeOrigin" : "DEFAULT",
              "text" : "The request was syntactically correct but its content is semantically invalid.",
              "locale" : "en-US"
            } ]
          }, {
            "level" : "ERROR",
            "localizations" : [ {
              "localeOrigin" : "DEFAULT",
              "text" : "The request was syntactically correct but its content is semantically invalid.",
              "locale" : "en-US"
            }, {
              "localeOrigin" : "DEFAULT",
              "text" : "The request was syntactically correct but its content is semantically invalid.",
              "locale" : "en-US"
            } ]
          } ],
          "filter" : {
            "name" : "Test Filter",
            "id" : "0fbe863c063c4c88a35fd7f17e8a3df5",
            "type" : "CAMPAIGN_FILTER"
          },
          "searchCampaignInfo" : {
            "identityIds" : [ "0fbe863c063c4c88a35fd7f17e8a3df5" ],
            "query" : "Search Campaign query description",
            "description" : "Search Campaign description",
            "reviewer" : {
              "name" : "William Wilson",
              "id" : "2c91808568c529c60168cca6f90c1313",
              "type" : "IDENTITY"
            },
            "type" : "ACCESS",
            "accessConstraints" : [ {
              "ids" : [ "2c90ad2a70ace7d50170acf22ca90010" ],
              "type" : "ENTITLEMENT",
              "operator" : "SELECTED"
            }, {
              "ids" : [ "2c90ad2a70ace7d50170acf22ca90010" ],
              "type" : "ENTITLEMENT",
              "operator" : "SELECTED"
            }, {
              "ids" : [ "2c90ad2a70ace7d50170acf22ca90010" ],
              "type" : "ENTITLEMENT",
              "operator" : "SELECTED"
            }, {
              "ids" : [ "2c90ad2a70ace7d50170acf22ca90010" ],
              "type" : "ENTITLEMENT",
              "operator" : "SELECTED"
            }, {
              "ids" : [ "2c90ad2a70ace7d50170acf22ca90010" ],
              "type" : "ENTITLEMENT",
              "operator" : "SELECTED"
            } ]
          },
          "autoRevokeAllowed" : false,
          "name" : "Manager Campaign",
          "mandatoryCommentRequirement" : "NO_DECISIONS",
          "modified" : "2020-03-03T22:20:12.674Z",
          "roleCompositionCampaignInfo" : {
            "remediatorRef" : {
              "name" : "Role Admin",
              "id" : "2c90ad2a70ace7d50170acf22ca90010",
              "type" : "IDENTITY"
            },
            "reviewerId" : "2c91808568c529c60168cca6f90c1313",
            "roleIds" : [ "2c90ad2a70ace7d50170acf22ca90010" ],
            "query" : "Search Query",
            "description" : "Role Composition Description",
            "reviewer" : {
              "name" : "William Wilson",
              "id" : "2c91808568c529c60168cca6f90c1313",
              "type" : "IDENTITY"
            }
          },
          "completedCertifications" : 10,
          "id" : "2c9079b270a266a60170a2779fcb0007",
          "deadline" : "2020-03-15T10:00:01.456Z",
          "status" : "ACTIVE",
          "correlatedStatus" : "CORRELATED"
        }`) // Campaign | 

          
          var campaign v2025.Campaign
          if err := json.Unmarshal(campaign, &campaign); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationCampaignsAPI.CreateCampaign(context.Background()).Campaign(campaign).Execute()
          //resp, r, err := apiClient.V2025.CertificationCampaignsAPI.CreateCampaign(context.Background()).Campaign(campaign).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationCampaignsAPI.CreateCampaign``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateCampaign`: Campaign
          fmt.Fprintf(os.Stdout, "Response from `CertificationCampaignsAPI.CreateCampaign`: %v\n", resp)
        }
- path: /campaign-templates
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certification-campaigns#create-campaign-template
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            "time"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           campaigntemplate := []byte(`{
          "ownerRef" : {
            "name" : "Mister Manager",
            "id" : "2c918086676d3e0601677611dbde220f",
            "type" : "IDENTITY",
            "email" : "mr.manager@example.com"
          },
          "deadlineDuration" : "P2W",
          "created" : "2020-03-05T22:44:00.364Z",
          "scheduled" : false,
          "name" : "Manager Campaign Template",
          "description" : "Template for the annual manager campaign.",
          "modified" : "2020-03-05T22:52:09.969Z",
          "campaign" : {
            "totalCertifications" : 100,
            "sourcesWithOrphanEntitlements" : [ {
              "name" : "Source with orphan entitlements",
              "id" : "2c90ad2a70ace7d50170acf22ca90010",
              "type" : "SOURCE"
            }, {
              "name" : "Source with orphan entitlements",
              "id" : "2c90ad2a70ace7d50170acf22ca90010",
              "type" : "SOURCE"
            } ],
            "recommendationsEnabled" : true,
            "sunsetCommentsRequired" : true,
            "created" : "2020-03-03T22:15:13.611Z",
            "machineAccountCampaignInfo" : {
              "reviewerType" : "ACCOUNT_OWNER",
              "sourceIds" : [ "0fbe863c063c4c88a35fd7f17e8a3df5" ]
            },
            "description" : "Everyone needs to be reviewed by their manager",
            "type" : "MANAGER",
            "sourceOwnerCampaignInfo" : {
              "sourceIds" : [ "0fbe863c063c4c88a35fd7f17e8a3df5" ]
            },
            "emailNotificationEnabled" : false,
            "alerts" : [ {
              "level" : "ERROR",
              "localizations" : [ {
                "localeOrigin" : "DEFAULT",
                "text" : "The request was syntactically correct but its content is semantically invalid.",
                "locale" : "en-US"
              }, {
                "localeOrigin" : "DEFAULT",
                "text" : "The request was syntactically correct but its content is semantically invalid.",
                "locale" : "en-US"
              } ]
            }, {
              "level" : "ERROR",
              "localizations" : [ {
                "localeOrigin" : "DEFAULT",
                "text" : "The request was syntactically correct but its content is semantically invalid.",
                "locale" : "en-US"
              }, {
                "localeOrigin" : "DEFAULT",
                "text" : "The request was syntactically correct but its content is semantically invalid.",
                "locale" : "en-US"
              } ]
            } ],
            "filter" : {
              "name" : "Test Filter",
              "id" : "0fbe863c063c4c88a35fd7f17e8a3df5",
              "type" : "CAMPAIGN_FILTER"
            },
            "searchCampaignInfo" : {
              "identityIds" : [ "0fbe863c063c4c88a35fd7f17e8a3df5" ],
              "query" : "Search Campaign query description",
              "description" : "Search Campaign description",
              "reviewer" : {
                "name" : "William Wilson",
                "id" : "2c91808568c529c60168cca6f90c1313",
                "type" : "IDENTITY"
              },
              "type" : "ACCESS",
              "accessConstraints" : [ {
                "ids" : [ "2c90ad2a70ace7d50170acf22ca90010" ],
                "type" : "ENTITLEMENT",
                "operator" : "SELECTED"
              }, {
                "ids" : [ "2c90ad2a70ace7d50170acf22ca90010" ],
                "type" : "ENTITLEMENT",
                "operator" : "SELECTED"
              }, {
                "ids" : [ "2c90ad2a70ace7d50170acf22ca90010" ],
                "type" : "ENTITLEMENT",
                "operator" : "SELECTED"
              }, {
                "ids" : [ "2c90ad2a70ace7d50170acf22ca90010" ],
                "type" : "ENTITLEMENT",
                "operator" : "SELECTED"
              }, {
                "ids" : [ "2c90ad2a70ace7d50170acf22ca90010" ],
                "type" : "ENTITLEMENT",
                "operator" : "SELECTED"
              } ]
            },
            "autoRevokeAllowed" : false,
            "name" : "Manager Campaign",
            "mandatoryCommentRequirement" : "NO_DECISIONS",
            "modified" : "2020-03-03T22:20:12.674Z",
            "roleCompositionCampaignInfo" : {
              "remediatorRef" : {
                "name" : "Role Admin",
                "id" : "2c90ad2a70ace7d50170acf22ca90010",
                "type" : "IDENTITY"
              },
              "reviewerId" : "2c91808568c529c60168cca6f90c1313",
              "roleIds" : [ "2c90ad2a70ace7d50170acf22ca90010" ],
              "query" : "Search Query",
              "description" : "Role Composition Description",
              "reviewer" : {
                "name" : "William Wilson",
                "id" : "2c91808568c529c60168cca6f90c1313",
                "type" : "IDENTITY"
              }
            },
            "completedCertifications" : 10,
            "id" : "2c9079b270a266a60170a2779fcb0007",
            "deadline" : "2020-03-15T10:00:01.456Z",
            "status" : "ACTIVE",
            "correlatedStatus" : "CORRELATED"
          },
          "id" : "2c9079b270a266a60170a277bb960008"
        }`) // CampaignTemplate | 

          
          var campaignTemplate v2025.CampaignTemplate
          if err := json.Unmarshal(campaigntemplate, &campaignTemplate); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationCampaignsAPI.CreateCampaignTemplate(context.Background()).CampaignTemplate(campaignTemplate).Execute()
          //resp, r, err := apiClient.V2025.CertificationCampaignsAPI.CreateCampaignTemplate(context.Background()).CampaignTemplate(campaignTemplate).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationCampaignsAPI.CreateCampaignTemplate``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateCampaignTemplate`: CampaignTemplate
          fmt.Fprintf(os.Stdout, "Response from `CertificationCampaignsAPI.CreateCampaignTemplate`: %v\n", resp)
        }
- path: /campaign-templates/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certification-campaigns#delete-campaign-template
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c9180835d191a86015d28455b4a2329` // string | ID of the campaign template being deleted. # string | ID of the campaign template being deleted.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.CertificationCampaignsAPI.DeleteCampaignTemplate(context.Background(), id).Execute()
          //r, err := apiClient.V2025.CertificationCampaignsAPI.DeleteCampaignTemplate(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationCampaignsAPI.DeleteCampaignTemplate``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /campaign-templates/{id}/schedule
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certification-campaigns#delete-campaign-template-schedule
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `04bedce387bd47b2ae1f86eb0bb36dee` // string | ID of the campaign template whose schedule is being deleted. # string | ID of the campaign template whose schedule is being deleted.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.CertificationCampaignsAPI.DeleteCampaignTemplateSchedule(context.Background(), id).Execute()
          //r, err := apiClient.V2025.CertificationCampaignsAPI.DeleteCampaignTemplateSchedule(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationCampaignsAPI.DeleteCampaignTemplateSchedule``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /campaigns/delete
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certification-campaigns#delete-campaigns
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           campaignsdeleterequest := []byte(`{
          "ids" : [ "2c9180887335cee10173490db1776c26", "2c9180836a712436016a7125a90c0021" ]
        }`) // CampaignsDeleteRequest | IDs of the campaigns to delete.

          
          var campaignsDeleteRequest v2025.CampaignsDeleteRequest
          if err := json.Unmarshal(campaignsdeleterequest, &campaignsDeleteRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationCampaignsAPI.DeleteCampaigns(context.Background()).CampaignsDeleteRequest(campaignsDeleteRequest).Execute()
          //resp, r, err := apiClient.V2025.CertificationCampaignsAPI.DeleteCampaigns(context.Background()).CampaignsDeleteRequest(campaignsDeleteRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationCampaignsAPI.DeleteCampaigns``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `DeleteCampaigns`: map[string]interface{}
          fmt.Fprintf(os.Stdout, "Response from `CertificationCampaignsAPI.DeleteCampaigns`: %v\n", resp)
        }
- path: /campaigns
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certification-campaigns#get-active-campaigns
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          detail := `FULL` // string | Determines whether slim, or increased level of detail is provided for each campaign in the returned list. Slim is the default behavior. (optional) # string | Determines whether slim, or increased level of detail is provided for each campaign in the returned list. Slim is the default behavior. (optional)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `name eq "Manager Campaign"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **status**: *eq, in* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **status**: *eq, in* (optional)
          sorters := `name` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationCampaignsAPI.GetActiveCampaigns(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.CertificationCampaignsAPI.GetActiveCampaigns(context.Background()).Detail(detail).Limit(limit).Offset(offset).Count(count).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationCampaignsAPI.GetActiveCampaigns``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetActiveCampaigns`: []GetActiveCampaigns200ResponseInner
          fmt.Fprintf(os.Stdout, "Response from `CertificationCampaignsAPI.GetActiveCampaigns`: %v\n", resp)
        }
- path: /campaigns/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certification-campaigns#get-campaign
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808571bcfcf80171c23e4b4221fc` // string | ID of the campaign to be retrieved. # string | ID of the campaign to be retrieved.
          detail := `FULL` // string | Determines whether slim, or increased level of detail is provided for each campaign in the returned list. Slim is the default behavior. (optional) # string | Determines whether slim, or increased level of detail is provided for each campaign in the returned list. Slim is the default behavior. (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationCampaignsAPI.GetCampaign(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.CertificationCampaignsAPI.GetCampaign(context.Background(), id).Detail(detail).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationCampaignsAPI.GetCampaign``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetCampaign`: GetCampaign200Response
          fmt.Fprintf(os.Stdout, "Response from `CertificationCampaignsAPI.GetCampaign`: %v\n", resp)
        }
- path: /campaigns/{id}/reports
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certification-campaigns#get-campaign-reports
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808571bcfcf80171c23e4b4221fc` // string | ID of the campaign whose reports are being fetched. # string | ID of the campaign whose reports are being fetched.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationCampaignsAPI.GetCampaignReports(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.CertificationCampaignsAPI.GetCampaignReports(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationCampaignsAPI.GetCampaignReports``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetCampaignReports`: []CampaignReport
          fmt.Fprintf(os.Stdout, "Response from `CertificationCampaignsAPI.GetCampaignReports`: %v\n", resp)
        }
- path: /campaigns/reports-configuration
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certification-campaigns#get-campaign-reports-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationCampaignsAPI.GetCampaignReportsConfig(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.CertificationCampaignsAPI.GetCampaignReportsConfig(context.Background()).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationCampaignsAPI.GetCampaignReportsConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetCampaignReportsConfig`: CampaignReportsConfig
          fmt.Fprintf(os.Stdout, "Response from `CertificationCampaignsAPI.GetCampaignReportsConfig`: %v\n", resp)
        }
- path: /campaign-templates/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certification-campaigns#get-campaign-template
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c9180835d191a86015d28455b4a2329` // string | Requested campaign template's ID. # string | Requested campaign template's ID.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationCampaignsAPI.GetCampaignTemplate(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.CertificationCampaignsAPI.GetCampaignTemplate(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationCampaignsAPI.GetCampaignTemplate``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetCampaignTemplate`: CampaignTemplate
          fmt.Fprintf(os.Stdout, "Response from `CertificationCampaignsAPI.GetCampaignTemplate`: %v\n", resp)
        }
- path: /campaign-templates/{id}/schedule
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certification-campaigns#get-campaign-template-schedule
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `04bedce387bd47b2ae1f86eb0bb36dee` // string | ID of the campaign template whose schedule is being fetched. # string | ID of the campaign template whose schedule is being fetched.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationCampaignsAPI.GetCampaignTemplateSchedule(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.CertificationCampaignsAPI.GetCampaignTemplateSchedule(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationCampaignsAPI.GetCampaignTemplateSchedule``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetCampaignTemplateSchedule`: Schedule
          fmt.Fprintf(os.Stdout, "Response from `CertificationCampaignsAPI.GetCampaignTemplateSchedule`: %v\n", resp)
        }
- path: /campaign-templates
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certification-campaigns#get-campaign-templates
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          sorters := `name` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified** (optional)
          filters := `name eq "manager template"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq, ge, gt, in, le, lt, ne, sw*  **id**: *eq, ge, gt, in, le, lt, ne, sw* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq, ge, gt, in, le, lt, ne, sw*  **id**: *eq, ge, gt, in, le, lt, ne, sw* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationCampaignsAPI.GetCampaignTemplates(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.CertificationCampaignsAPI.GetCampaignTemplates(context.Background()).Limit(limit).Offset(offset).Count(count).Sorters(sorters).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationCampaignsAPI.GetCampaignTemplates``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetCampaignTemplates`: []CampaignTemplate
          fmt.Fprintf(os.Stdout, "Response from `CertificationCampaignsAPI.GetCampaignTemplates`: %v\n", resp)
        }
- path: /campaigns/{id}/reassign
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certification-campaigns#move
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The certification campaign ID # string | The certification campaign ID
           adminreviewreassign := []byte(`{
          "certificationIds" : [ "af3859464779471211bb8424a563abc1", "af3859464779471211bb8424a563abc2", "af3859464779471211bb8424a563abc3" ],
          "reason" : "reassigned for some reason",
          "reassignTo" : {
            "id" : "ef38f94347e94562b5bb8424a56397d8",
            "type" : "IDENTITY"
          }
        }`) // AdminReviewReassign | 

          
          var adminReviewReassign v2025.AdminReviewReassign
          if err := json.Unmarshal(adminreviewreassign, &adminReviewReassign); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationCampaignsAPI.Move(context.Background(), id).AdminReviewReassign(adminReviewReassign).Execute()
          //resp, r, err := apiClient.V2025.CertificationCampaignsAPI.Move(context.Background(), id).AdminReviewReassign(adminReviewReassign).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationCampaignsAPI.Move``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `Move`: CertificationTask
          fmt.Fprintf(os.Stdout, "Response from `CertificationCampaignsAPI.Move`: %v\n", resp)
        }
- path: /campaign-templates/{id}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certification-campaigns#patch-campaign-template
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c9180835d191a86015d28455b4a2329` // string | ID of the campaign template being modified. # string | ID of the campaign template being modified.
          jsonpatchoperation := []byte(`[{op=replace, path=/description, value=Updated description!}, {op=replace, path=/campaign/filter/id, value=ff80818155fe8c080155fe8d925b0316}]`) // []JsonPatchOperation | A list of campaign update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * deadlineDuration * campaign (all fields that are allowed during create) 

          
          var jsonPatchOperation []v2025.JsonPatchOperation
          if err := json.Unmarshal(jsonpatchoperation, &jsonPatchOperation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationCampaignsAPI.PatchCampaignTemplate(context.Background(), id).JsonPatchOperation(jsonPatchOperation).Execute()
          //resp, r, err := apiClient.V2025.CertificationCampaignsAPI.PatchCampaignTemplate(context.Background(), id).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationCampaignsAPI.PatchCampaignTemplate``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchCampaignTemplate`: CampaignTemplate
          fmt.Fprintf(os.Stdout, "Response from `CertificationCampaignsAPI.PatchCampaignTemplate`: %v\n", resp)
        }
- path: /campaigns/reports-configuration
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certification-campaigns#set-campaign-reports-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           campaignreportsconfig := []byte(`{
          "identityAttributeColumns" : [ "firstname", "lastname" ]
        }`) // CampaignReportsConfig | Campaign report configuration.

          
          var campaignReportsConfig v2025.CampaignReportsConfig
          if err := json.Unmarshal(campaignreportsconfig, &campaignReportsConfig); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationCampaignsAPI.SetCampaignReportsConfig(context.Background()).CampaignReportsConfig(campaignReportsConfig).Execute()
          //resp, r, err := apiClient.V2025.CertificationCampaignsAPI.SetCampaignReportsConfig(context.Background()).CampaignReportsConfig(campaignReportsConfig).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationCampaignsAPI.SetCampaignReportsConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SetCampaignReportsConfig`: CampaignReportsConfig
          fmt.Fprintf(os.Stdout, "Response from `CertificationCampaignsAPI.SetCampaignReportsConfig`: %v\n", resp)
        }
- path: /campaign-templates/{id}/schedule
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certification-campaigns#set-campaign-template-schedule
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `04bedce387bd47b2ae1f86eb0bb36dee` // string | ID of the campaign template being scheduled. # string | ID of the campaign template being scheduled.
           schedule := []byte(`{
          "hours" : {
            "values" : [ "1" ],
            "interval" : 2,
            "type" : "LIST"
          },
          "months" : {
            "values" : [ "1" ],
            "interval" : 2,
            "type" : "LIST"
          },
          "timeZoneId" : "CST",
          "days" : {
            "values" : [ "1" ],
            "interval" : 2,
            "type" : "LIST"
          },
          "expiration" : "2000-01-23T04:56:07.000+00:00",
          "type" : "WEEKLY"
        }`) // Schedule |  (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.CertificationCampaignsAPI.SetCampaignTemplateSchedule(context.Background(), id).Execute()
          //r, err := apiClient.V2025.CertificationCampaignsAPI.SetCampaignTemplateSchedule(context.Background(), id).Schedule(schedule).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationCampaignsAPI.SetCampaignTemplateSchedule``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /campaigns/{id}/activate
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certification-campaigns#start-campaign
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | Campaign ID. # string | Campaign ID.
           activatecampaignoptions := []byte(`{
          "timeZone" : "-05:00"
        }`) // ActivateCampaignOptions | Optional. If no timezone is specified, the standard UTC timezone is used (i.e. UTC+00:00). Although this can take any timezone, the intended value is the caller's timezone. The activation time calculated from the given timezone may cause the campaign deadline time to be modified, but it will remain within the original date. The timezone must be in a valid ISO 8601 format. (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationCampaignsAPI.StartCampaign(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.CertificationCampaignsAPI.StartCampaign(context.Background(), id).ActivateCampaignOptions(activateCampaignOptions).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationCampaignsAPI.StartCampaign``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `StartCampaign`: map[string]interface{}
          fmt.Fprintf(os.Stdout, "Response from `CertificationCampaignsAPI.StartCampaign`: %v\n", resp)
        }
- path: /campaigns/{id}/run-remediation-scan
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certification-campaigns#start-campaign-remediation-scan
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808571bcfcf80171c23e4b4221fc` // string | ID of the campaign the remediation scan is being run for. # string | ID of the campaign the remediation scan is being run for.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationCampaignsAPI.StartCampaignRemediationScan(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.CertificationCampaignsAPI.StartCampaignRemediationScan(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationCampaignsAPI.StartCampaignRemediationScan``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `StartCampaignRemediationScan`: map[string]interface{}
          fmt.Fprintf(os.Stdout, "Response from `CertificationCampaignsAPI.StartCampaignRemediationScan`: %v\n", resp)
        }
- path: /campaigns/{id}/run-report/{type}
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certification-campaigns#start-campaign-report
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808571bcfcf80171c23e4b4221fc` // string | ID of the campaign the report is being run for. # string | ID of the campaign the report is being run for.
          type_ :=  // ReportType | Type of the report to run. # ReportType | Type of the report to run.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationCampaignsAPI.StartCampaignReport(context.Background(), id, type_).Execute()
          //resp, r, err := apiClient.V2025.CertificationCampaignsAPI.StartCampaignReport(context.Background(), id, type_).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationCampaignsAPI.StartCampaignReport``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `StartCampaignReport`: map[string]interface{}
          fmt.Fprintf(os.Stdout, "Response from `CertificationCampaignsAPI.StartCampaignReport`: %v\n", resp)
        }
- path: /campaign-templates/{id}/generate
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certification-campaigns#start-generate-campaign-template
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c9180835d191a86015d28455b4a2329` // string | ID of the campaign template to use for generation. # string | ID of the campaign template to use for generation.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationCampaignsAPI.StartGenerateCampaignTemplate(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.CertificationCampaignsAPI.StartGenerateCampaignTemplate(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationCampaignsAPI.StartGenerateCampaignTemplate``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `StartGenerateCampaignTemplate`: CampaignReference
          fmt.Fprintf(os.Stdout, "Response from `CertificationCampaignsAPI.StartGenerateCampaignTemplate`: %v\n", resp)
        }
- path: /campaigns/{id}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certification-campaigns#update-campaign
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808571bcfcf80171c23e4b4221fc` // string | ID of the campaign template being modified. # string | ID of the campaign template being modified.
          jsonpatchoperation := []byte(`[{op=replace, path=/name, value=This field has been updated!}, {op=copy, from=/name, path=/description}]`) // []JsonPatchOperation | A list of campaign update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. The fields that can be patched differ based on the status of the campaign.  When the campaign is in the *STAGED* status, you can patch these fields: * name * description * recommendationsEnabled * deadline * emailNotificationEnabled * autoRevokeAllowed  When the campaign is in the *ACTIVE* status, you can patch these fields: * deadline 

          
          var jsonPatchOperation []v2025.JsonPatchOperation
          if err := json.Unmarshal(jsonpatchoperation, &jsonPatchOperation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationCampaignsAPI.UpdateCampaign(context.Background(), id).JsonPatchOperation(jsonPatchOperation).Execute()
          //resp, r, err := apiClient.V2025.CertificationCampaignsAPI.UpdateCampaign(context.Background(), id).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationCampaignsAPI.UpdateCampaign``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateCampaign`: SlimCampaign
          fmt.Fprintf(os.Stdout, "Response from `CertificationCampaignsAPI.UpdateCampaign`: %v\n", resp)
        }
- path: /certifications/{id}/access-summaries/{type}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certification-summaries#get-identity-access-summaries
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The identity campaign certification ID # string | The identity campaign certification ID
          type_ := `ACCESS_PROFILE` // string | The type of access review item to retrieve summaries for # string | The type of access review item to retrieve summaries for
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `access.id eq "ef38f94347e94562b5bb8424a56397d8"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **completed**: *eq, ne*  **access.id**: *eq, in*  **access.name**: *eq, sw*  **entitlement.sourceName**: *eq, sw*  **accessProfile.sourceName**: *eq, sw* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **completed**: *eq, ne*  **access.id**: *eq, in*  **access.name**: *eq, sw*  **entitlement.sourceName**: *eq, sw*  **accessProfile.sourceName**: *eq, sw* (optional)
          sorters := `access.name` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.name** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.name** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationSummariesAPI.GetIdentityAccessSummaries(context.Background(), id, type_).Execute()
          //resp, r, err := apiClient.V2025.CertificationSummariesAPI.GetIdentityAccessSummaries(context.Background(), id, type_).Limit(limit).Offset(offset).Count(count).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationSummariesAPI.GetIdentityAccessSummaries``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetIdentityAccessSummaries`: []AccessSummary
          fmt.Fprintf(os.Stdout, "Response from `CertificationSummariesAPI.GetIdentityAccessSummaries`: %v\n", resp)
        }
- path: /certifications/{id}/decision-summary
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certification-summaries#get-identity-decision-summary
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The certification ID # string | The certification ID
          filters := `identitySummary.id eq "ef38f94347e94562b5bb8424a56397d8"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **identitySummary.id**: *eq, in* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **identitySummary.id**: *eq, in* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationSummariesAPI.GetIdentityDecisionSummary(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.CertificationSummariesAPI.GetIdentityDecisionSummary(context.Background(), id).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationSummariesAPI.GetIdentityDecisionSummary``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetIdentityDecisionSummary`: IdentityCertDecisionSummary
          fmt.Fprintf(os.Stdout, "Response from `CertificationSummariesAPI.GetIdentityDecisionSummary`: %v\n", resp)
        }
- path: /certifications/{id}/identity-summaries
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certification-summaries#get-identity-summaries
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The identity campaign certification ID # string | The identity campaign certification ID
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `id eq "ef38f94347e94562b5bb8424a56397d8"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **completed**: *eq, ne*  **name**: *eq, sw* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **completed**: *eq, ne*  **name**: *eq, sw* (optional)
          sorters := `name` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationSummariesAPI.GetIdentitySummaries(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.CertificationSummariesAPI.GetIdentitySummaries(context.Background(), id).Limit(limit).Offset(offset).Count(count).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationSummariesAPI.GetIdentitySummaries``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetIdentitySummaries`: []CertificationIdentitySummary
          fmt.Fprintf(os.Stdout, "Response from `CertificationSummariesAPI.GetIdentitySummaries`: %v\n", resp)
        }
- path: /certifications/{id}/identity-summaries/{identitySummaryId}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certification-summaries#get-identity-summary
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The identity campaign certification ID # string | The identity campaign certification ID
          identitySummaryId := `2c91808772a504f50172a9540e501ba8` // string | The identity summary ID # string | The identity summary ID

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationSummariesAPI.GetIdentitySummary(context.Background(), id, identitySummaryId).Execute()
          //resp, r, err := apiClient.V2025.CertificationSummariesAPI.GetIdentitySummary(context.Background(), id, identitySummaryId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationSummariesAPI.GetIdentitySummary``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetIdentitySummary`: CertificationIdentitySummary
          fmt.Fprintf(os.Stdout, "Response from `CertificationSummariesAPI.GetIdentitySummary`: %v\n", resp)
        }
- path: /certification-tasks/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certifications#get-certification-task
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `63b32151-26c0-42f4-9299-8898dc1c9daa` // string | The task ID # string | The task ID

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationsAPI.GetCertificationTask(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.CertificationsAPI.GetCertificationTask(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationsAPI.GetCertificationTask``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetCertificationTask`: CertificationTask
          fmt.Fprintf(os.Stdout, "Response from `CertificationsAPI.GetCertificationTask`: %v\n", resp)
        }
- path: /certifications/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certifications#get-identity-certification
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The certification id # string | The certification id

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationsAPI.GetIdentityCertification(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.CertificationsAPI.GetIdentityCertification(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationsAPI.GetIdentityCertification``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetIdentityCertification`: IdentityCertificationDto
          fmt.Fprintf(os.Stdout, "Response from `CertificationsAPI.GetIdentityCertification`: %v\n", resp)
        }
- path: /certifications/{certificationId}/access-review-items/{itemId}/permissions
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certifications#get-identity-certification-item-permissions
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          certificationId := `ef38f94347e94562b5bb8424a56397d8` // string | The certification ID # string | The certification ID
          itemId := `2c91808671bcbab40171bd945d961227` // string | The certification item ID # string | The certification item ID
          filters := `target eq "SYS.OBJAUTH2"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **target**: *eq, sw*  **rights**: *ca*  Supported composite operators: *and, or*  All field values (second filter operands) are case-insensitive for this API.  Only a single *and* or *or* composite filter operator may be used. It must also be used between a target filter and a rights filter, not between 2 filters for the same field.  For example, the following is valid: `?filters=rights+ca+(%22CREATE%22)+and+target+eq+%22SYS.OBJAUTH2%22`  The following is invalid: 1?filters=rights+ca+(%22CREATE%22)+and+rights+ca+(%SELECT%22)1 (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **target**: *eq, sw*  **rights**: *ca*  Supported composite operators: *and, or*  All field values (second filter operands) are case-insensitive for this API.  Only a single *and* or *or* composite filter operator may be used. It must also be used between a target filter and a rights filter, not between 2 filters for the same field.  For example, the following is valid: `?filters=rights+ca+(%22CREATE%22)+and+target+eq+%22SYS.OBJAUTH2%22`  The following is invalid: 1?filters=rights+ca+(%22CREATE%22)+and+rights+ca+(%SELECT%22)1 (optional)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationsAPI.GetIdentityCertificationItemPermissions(context.Background(), certificationId, itemId).Execute()
          //resp, r, err := apiClient.V2025.CertificationsAPI.GetIdentityCertificationItemPermissions(context.Background(), certificationId, itemId).Filters(filters).Limit(limit).Offset(offset).Count(count).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationsAPI.GetIdentityCertificationItemPermissions``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetIdentityCertificationItemPermissions`: []PermissionDto
          fmt.Fprintf(os.Stdout, "Response from `CertificationsAPI.GetIdentityCertificationItemPermissions`: %v\n", resp)
        }
- path: /certification-tasks
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certifications#get-pending-certification-tasks
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          reviewerIdentity := `Ada.1de82e55078344` // string | The ID of reviewer identity. *me* indicates the current user. (optional) # string | The ID of reviewer identity. *me* indicates the current user. (optional)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `type eq "ADMIN_REASSIGN"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **targetId**: *eq, in*  **type**: *eq, in* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **targetId**: *eq, in*  **type**: *eq, in* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationsAPI.GetPendingCertificationTasks(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.CertificationsAPI.GetPendingCertificationTasks(context.Background()).ReviewerIdentity(reviewerIdentity).Limit(limit).Offset(offset).Count(count).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationsAPI.GetPendingCertificationTasks``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetPendingCertificationTasks`: []CertificationTask
          fmt.Fprintf(os.Stdout, "Response from `CertificationsAPI.GetPendingCertificationTasks`: %v\n", resp)
        }
- path: /certifications/{id}/reviewers
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certifications#list-certification-reviewers
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The certification ID # string | The certification ID
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `name eq "Bob"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **email**: *eq, sw* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **email**: *eq, sw* (optional)
          sorters := `name` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, email** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, email** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationsAPI.ListCertificationReviewers(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.CertificationsAPI.ListCertificationReviewers(context.Background(), id).Limit(limit).Offset(offset).Count(count).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationsAPI.ListCertificationReviewers``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListCertificationReviewers`: []IdentityReferenceWithNameAndEmail
          fmt.Fprintf(os.Stdout, "Response from `CertificationsAPI.ListCertificationReviewers`: %v\n", resp)
        }
- path: /certifications/{id}/access-review-items
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certifications#list-identity-access-review-items
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The identity campaign certification ID # string | The identity campaign certification ID
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `id eq "ef38f94347e94562b5bb8424a56397d8"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **type**: *eq*  **access.type**: *eq*  **completed**: *eq, ne*  **identitySummary.id**: *eq, in*  **identitySummary.name**: *eq, sw*  **access.id**: *eq, in*  **access.name**: *eq, sw*  **entitlement.sourceName**: *eq, sw*  **accessProfile.sourceName**: *eq, sw* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **type**: *eq*  **access.type**: *eq*  **completed**: *eq, ne*  **identitySummary.id**: *eq, in*  **identitySummary.name**: *eq, sw*  **access.id**: *eq, in*  **access.name**: *eq, sw*  **entitlement.sourceName**: *eq, sw*  **accessProfile.sourceName**: *eq, sw* (optional)
          sorters := `access.name,-accessProfile.sourceName` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **identitySummary.name, access.name, access.type, entitlement.sourceName, accessProfile.sourceName** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **identitySummary.name, access.name, access.type, entitlement.sourceName, accessProfile.sourceName** (optional)
          entitlements := `identityEntitlement` // string | Filter results to view access review items that pertain to any of the specified comma-separated entitlement IDs.  An error will occur if this param is used with **access-profiles** or **roles** as only one of these query params can be used at a time. (optional) # string | Filter results to view access review items that pertain to any of the specified comma-separated entitlement IDs.  An error will occur if this param is used with **access-profiles** or **roles** as only one of these query params can be used at a time. (optional)
          accessProfiles := `accessProfile1` // string | Filter results to view access review items that pertain to any of the specified comma-separated access-profle IDs.  An error will occur if this param is used with **entitlements** or **roles** as only one of these query params can be used at a time. (optional) # string | Filter results to view access review items that pertain to any of the specified comma-separated access-profle IDs.  An error will occur if this param is used with **entitlements** or **roles** as only one of these query params can be used at a time. (optional)
          roles := `userRole` // string | Filter results to view access review items that pertain to any of the specified comma-separated role IDs.  An error will occur if this param is used with **entitlements** or **access-profiles** as only one of these query params can be used at a time. (optional) # string | Filter results to view access review items that pertain to any of the specified comma-separated role IDs.  An error will occur if this param is used with **entitlements** or **access-profiles** as only one of these query params can be used at a time. (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationsAPI.ListIdentityAccessReviewItems(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.CertificationsAPI.ListIdentityAccessReviewItems(context.Background(), id).Limit(limit).Offset(offset).Count(count).Filters(filters).Sorters(sorters).Entitlements(entitlements).AccessProfiles(accessProfiles).Roles(roles).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationsAPI.ListIdentityAccessReviewItems``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListIdentityAccessReviewItems`: []AccessReviewItem
          fmt.Fprintf(os.Stdout, "Response from `CertificationsAPI.ListIdentityAccessReviewItems`: %v\n", resp)
        }
- path: /certifications
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certifications#list-identity-certifications
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          reviewerIdentity := `me` // string | Reviewer's identity. *me* indicates the current user. (optional) # string | Reviewer's identity. *me* indicates the current user. (optional)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `id eq "ef38f94347e94562b5bb8424a56397d8"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **campaign.id**: *eq, in*  **phase**: *eq*  **completed**: *eq* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **campaign.id**: *eq, in*  **phase**: *eq*  **completed**: *eq* (optional)
          sorters := `name,due` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, due, signed** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, due, signed** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationsAPI.ListIdentityCertifications(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.CertificationsAPI.ListIdentityCertifications(context.Background()).ReviewerIdentity(reviewerIdentity).Limit(limit).Offset(offset).Count(count).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationsAPI.ListIdentityCertifications``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListIdentityCertifications`: []IdentityCertificationDto
          fmt.Fprintf(os.Stdout, "Response from `CertificationsAPI.ListIdentityCertifications`: %v\n", resp)
        }
- path: /certifications/{id}/decide
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certifications#make-identity-decision
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The ID of the identity campaign certification on which to make decisions # string | The ID of the identity campaign certification on which to make decisions
          reviewdecision := []byte(`[{id=ef38f94347e94562b5bb8424a56396b5, decision=APPROVE, bulk=true, comments=This user still needs access to this source.}, {id=ef38f94347e94562b5bb8424a56397d8, decision=APPROVE, bulk=true, comments=This user still needs access to this source too.}]`) // []ReviewDecision | A non-empty array of decisions to be made.

          
          var reviewDecision []v2025.ReviewDecision
          if err := json.Unmarshal(reviewdecision, &reviewDecision); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationsAPI.MakeIdentityDecision(context.Background(), id).ReviewDecision(reviewDecision).Execute()
          //resp, r, err := apiClient.V2025.CertificationsAPI.MakeIdentityDecision(context.Background(), id).ReviewDecision(reviewDecision).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationsAPI.MakeIdentityDecision``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `MakeIdentityDecision`: IdentityCertificationDto
          fmt.Fprintf(os.Stdout, "Response from `CertificationsAPI.MakeIdentityDecision`: %v\n", resp)
        }
- path: /certifications/{id}/reassign
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certifications#reassign-identity-certifications
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The identity campaign certification ID # string | The identity campaign certification ID
           reviewreassign := []byte(`{
          "reason" : "reassigned for some reason",
          "reassignTo" : "ef38f94347e94562b5bb8424a56397d8",
          "reassign" : [ {
            "id" : "ef38f94347e94562b5bb8424a56397d8",
            "type" : "ITEM"
          }, {
            "id" : "ef38f94347e94562b5bb8424a56397d8",
            "type" : "ITEM"
          } ]
        }`) // ReviewReassign | 

          
          var reviewReassign v2025.ReviewReassign
          if err := json.Unmarshal(reviewreassign, &reviewReassign); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationsAPI.ReassignIdentityCertifications(context.Background(), id).ReviewReassign(reviewReassign).Execute()
          //resp, r, err := apiClient.V2025.CertificationsAPI.ReassignIdentityCertifications(context.Background(), id).ReviewReassign(reviewReassign).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationsAPI.ReassignIdentityCertifications``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ReassignIdentityCertifications`: IdentityCertificationDto
          fmt.Fprintf(os.Stdout, "Response from `CertificationsAPI.ReassignIdentityCertifications`: %v\n", resp)
        }
- path: /certifications/{id}/sign-off
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certifications#sign-off-identity-certification
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The identity campaign certification ID # string | The identity campaign certification ID

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationsAPI.SignOffIdentityCertification(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.CertificationsAPI.SignOffIdentityCertification(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationsAPI.SignOffIdentityCertification``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SignOffIdentityCertification`: IdentityCertificationDto
          fmt.Fprintf(os.Stdout, "Response from `CertificationsAPI.SignOffIdentityCertification`: %v\n", resp)
        }
- path: /certifications/{id}/reassign-async
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/certifications#submit-reassign-certs-async
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The identity campaign certification ID # string | The identity campaign certification ID
           reviewreassign := []byte(`{
          "reason" : "reassigned for some reason",
          "reassignTo" : "ef38f94347e94562b5bb8424a56397d8",
          "reassign" : [ {
            "id" : "ef38f94347e94562b5bb8424a56397d8",
            "type" : "ITEM"
          }, {
            "id" : "ef38f94347e94562b5bb8424a56397d8",
            "type" : "ITEM"
          } ]
        }`) // ReviewReassign | 

          
          var reviewReassign v2025.ReviewReassign
          if err := json.Unmarshal(reviewreassign, &reviewReassign); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CertificationsAPI.SubmitReassignCertsAsync(context.Background(), id).ReviewReassign(reviewReassign).Execute()
          //resp, r, err := apiClient.V2025.CertificationsAPI.SubmitReassignCertsAsync(context.Background(), id).ReviewReassign(reviewReassign).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CertificationsAPI.SubmitReassignCertsAsync``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SubmitReassignCertsAsync`: CertificationTask
          fmt.Fprintf(os.Stdout, "Response from `CertificationsAPI.SubmitReassignCertsAsync`: %v\n", resp)
        }
- path: /sources/{sourceId}/classify
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/classify-source#delete-classify-machine-account-from-source
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | Source ID. # string | Source ID.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.ClassifySourceAPI.DeleteClassifyMachineAccountFromSource(context.Background(), id).Execute()
          //r, err := apiClient.V2025.ClassifySourceAPI.DeleteClassifyMachineAccountFromSource(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ClassifySourceAPI.DeleteClassifyMachineAccountFromSource``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /sources/{sourceId}/classify
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/classify-source#get-classify-machine-account-from-source-status
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | Source ID. # string | Source ID.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ClassifySourceAPI.GetClassifyMachineAccountFromSourceStatus(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.ClassifySourceAPI.GetClassifyMachineAccountFromSourceStatus(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ClassifySourceAPI.GetClassifyMachineAccountFromSourceStatus``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetClassifyMachineAccountFromSourceStatus`: SourceClassificationStatus
          fmt.Fprintf(os.Stdout, "Response from `ClassifySourceAPI.GetClassifyMachineAccountFromSourceStatus`: %v\n", resp)
        }
- path: /sources/{sourceId}/classify
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/classify-source#send-classify-machine-account-from-source
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | Source ID. # string | Source ID.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ClassifySourceAPI.SendClassifyMachineAccountFromSource(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.ClassifySourceAPI.SendClassifyMachineAccountFromSource(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ClassifySourceAPI.SendClassifyMachineAccountFromSource``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SendClassifyMachineAccountFromSource`: SendClassifyMachineAccountFromSource200Response
          fmt.Fprintf(os.Stdout, "Response from `ClassifySourceAPI.SendClassifyMachineAccountFromSource`: %v\n", resp)
        }
- path: /configuration-hub/deploys
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/configuration-hub#create-deploy
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           deployrequest := []byte(`{
          "draftId" : "3d0fe04b-57df-4a46-a83b-8f04b0f9d10b"
        }`) // DeployRequest | The deploy request body.

          
          var deployRequest v2025.DeployRequest
          if err := json.Unmarshal(deployrequest, &deployRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConfigurationHubAPI.CreateDeploy(context.Background()).DeployRequest(deployRequest).Execute()
          //resp, r, err := apiClient.V2025.ConfigurationHubAPI.CreateDeploy(context.Background()).DeployRequest(deployRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConfigurationHubAPI.CreateDeploy``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateDeploy`: DeployResponse
          fmt.Fprintf(os.Stdout, "Response from `ConfigurationHubAPI.CreateDeploy`: %v\n", resp)
        }
- path: /configuration-hub/object-mappings/{sourceOrg}
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/configuration-hub#create-object-mapping
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceOrg := `source-org` // string | The name of the source org. # string | The name of the source org.
           objectmappingrequest := []byte(`{
          "targetValue" : "My New Governance Group Name",
          "jsonPath" : "$.name",
          "sourceValue" : "My Governance Group Name",
          "enabled" : false,
          "objectType" : "IDENTITY"
        }`) // ObjectMappingRequest | The object mapping request body.

          
          var objectMappingRequest v2025.ObjectMappingRequest
          if err := json.Unmarshal(objectmappingrequest, &objectMappingRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConfigurationHubAPI.CreateObjectMapping(context.Background(), sourceOrg).ObjectMappingRequest(objectMappingRequest).Execute()
          //resp, r, err := apiClient.V2025.ConfigurationHubAPI.CreateObjectMapping(context.Background(), sourceOrg).ObjectMappingRequest(objectMappingRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConfigurationHubAPI.CreateObjectMapping``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateObjectMapping`: ObjectMappingResponse
          fmt.Fprintf(os.Stdout, "Response from `ConfigurationHubAPI.CreateObjectMapping`: %v\n", resp)
        }
- path: /configuration-hub/object-mappings/{sourceOrg}/bulk-create
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/configuration-hub#create-object-mappings
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceOrg := `source-org` // string | The name of the source org. # string | The name of the source org.
           objectmappingbulkcreaterequest := []byte(`{
          "newObjectsMappings" : [ {
            "targetValue" : "My New Governance Group Name",
            "jsonPath" : "$.name",
            "sourceValue" : "My Governance Group Name",
            "enabled" : false,
            "objectType" : "IDENTITY"
          }, {
            "targetValue" : "My New Governance Group Name",
            "jsonPath" : "$.name",
            "sourceValue" : "My Governance Group Name",
            "enabled" : false,
            "objectType" : "IDENTITY"
          } ]
        }`) // ObjectMappingBulkCreateRequest | The bulk create object mapping request body.

          
          var objectMappingBulkCreateRequest v2025.ObjectMappingBulkCreateRequest
          if err := json.Unmarshal(objectmappingbulkcreaterequest, &objectMappingBulkCreateRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConfigurationHubAPI.CreateObjectMappings(context.Background(), sourceOrg).ObjectMappingBulkCreateRequest(objectMappingBulkCreateRequest).Execute()
          //resp, r, err := apiClient.V2025.ConfigurationHubAPI.CreateObjectMappings(context.Background(), sourceOrg).ObjectMappingBulkCreateRequest(objectMappingBulkCreateRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConfigurationHubAPI.CreateObjectMappings``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateObjectMappings`: ObjectMappingBulkCreateResponse
          fmt.Fprintf(os.Stdout, "Response from `ConfigurationHubAPI.CreateObjectMappings`: %v\n", resp)
        }
- path: /configuration-hub/scheduled-actions
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/configuration-hub#create-scheduled-action
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           scheduledactionpayload := []byte(`{
          "cronString" : "0 0 * * * *",
          "timeZoneId" : "America/Chicago",
          "startTime" : "2024-08-16T14:16:58.389Z",
          "jobType" : "BACKUP",
          "content" : {
            "sourceTenant" : "tenant-name",
            "draftId" : "9012b87d-48ca-439a-868f-2160001da8c3",
            "name" : "Daily Backup",
            "backupOptions" : {
              "includeTypes" : [ "ROLE", "IDENTITY_PROFILE" ],
              "objectOptions" : {
                "SOURCE" : {
                  "includedNames" : [ "Source1", "Source2" ]
                },
                "ROLE" : {
                  "includedNames" : [ "Admin Role", "User Role" ]
                }
              }
            },
            "sourceBackupId" : "5678b87d-48ca-439a-868f-2160001da8c2"
          }
        }`) // ScheduledActionPayload | The scheduled action creation request body.

          
          var scheduledActionPayload v2025.ScheduledActionPayload
          if err := json.Unmarshal(scheduledactionpayload, &scheduledActionPayload); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConfigurationHubAPI.CreateScheduledAction(context.Background()).ScheduledActionPayload(scheduledActionPayload).Execute()
          //resp, r, err := apiClient.V2025.ConfigurationHubAPI.CreateScheduledAction(context.Background()).ScheduledActionPayload(scheduledActionPayload).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConfigurationHubAPI.CreateScheduledAction``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateScheduledAction`: ScheduledActionResponse
          fmt.Fprintf(os.Stdout, "Response from `ConfigurationHubAPI.CreateScheduledAction`: %v\n", resp)
        }
- path: /configuration-hub/backups/uploads
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/configuration-hub#create-uploaded-configuration
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          data := BINARY_DATA_HERE // *os.File | JSON file containing the objects to be imported. # *os.File | JSON file containing the objects to be imported.
          name := `name_example` // string | Name that will be assigned to the uploaded configuration file. # string | Name that will be assigned to the uploaded configuration file.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConfigurationHubAPI.CreateUploadedConfiguration(context.Background()).Data(data).Name(name).Execute()
          //resp, r, err := apiClient.V2025.ConfigurationHubAPI.CreateUploadedConfiguration(context.Background()).Data(data).Name(name).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConfigurationHubAPI.CreateUploadedConfiguration``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateUploadedConfiguration`: BackupResponse
          fmt.Fprintf(os.Stdout, "Response from `ConfigurationHubAPI.CreateUploadedConfiguration`: %v\n", resp)
        }
- path: /configuration-hub/backups/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/configuration-hub#delete-backup
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `07659d7d-2cce-47c0-9e49-185787ee565a` // string | The id of the backup to delete. # string | The id of the backup to delete.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.ConfigurationHubAPI.DeleteBackup(context.Background(), id).Execute()
          //r, err := apiClient.V2025.ConfigurationHubAPI.DeleteBackup(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConfigurationHubAPI.DeleteBackup``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /configuration-hub/drafts/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/configuration-hub#delete-draft
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `07659d7d-2cce-47c0-9e49-185787ee565a` // string | The id of the draft to delete. # string | The id of the draft to delete.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.ConfigurationHubAPI.DeleteDraft(context.Background(), id).Execute()
          //r, err := apiClient.V2025.ConfigurationHubAPI.DeleteDraft(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConfigurationHubAPI.DeleteDraft``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /configuration-hub/object-mappings/{sourceOrg}/{objectMappingId}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/configuration-hub#delete-object-mapping
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceOrg := `source-org` // string | The name of the source org. # string | The name of the source org.
          objectMappingId := `3d6e0144-963f-4bd6-8d8d-d77b4e507ce4` // string | The id of the object mapping to be deleted. # string | The id of the object mapping to be deleted.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.ConfigurationHubAPI.DeleteObjectMapping(context.Background(), sourceOrg, objectMappingId).Execute()
          //r, err := apiClient.V2025.ConfigurationHubAPI.DeleteObjectMapping(context.Background(), sourceOrg, objectMappingId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConfigurationHubAPI.DeleteObjectMapping``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /configuration-hub/scheduled-actions/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/configuration-hub#delete-scheduled-action
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          scheduledActionId := `0f11f2a4-7c94-4bf3-a2bd-742580fe3bde` // string | The ID of the scheduled action. # string | The ID of the scheduled action.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.ConfigurationHubAPI.DeleteScheduledAction(context.Background(), scheduledActionId).Execute()
          //r, err := apiClient.V2025.ConfigurationHubAPI.DeleteScheduledAction(context.Background(), scheduledActionId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConfigurationHubAPI.DeleteScheduledAction``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /configuration-hub/backups/uploads/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/configuration-hub#delete-uploaded-configuration
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `3d0fe04b-57df-4a46-a83b-8f04b0f9d10b` // string | The id of the uploaded configuration. # string | The id of the uploaded configuration.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.ConfigurationHubAPI.DeleteUploadedConfiguration(context.Background(), id).Execute()
          //r, err := apiClient.V2025.ConfigurationHubAPI.DeleteUploadedConfiguration(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConfigurationHubAPI.DeleteUploadedConfiguration``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /configuration-hub/deploys/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/configuration-hub#get-deploy
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `3d0fe04b-57df-4a46-a83b-8f04b0f9d10b` // string | The id of the deploy. # string | The id of the deploy.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConfigurationHubAPI.GetDeploy(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.ConfigurationHubAPI.GetDeploy(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConfigurationHubAPI.GetDeploy``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetDeploy`: DeployResponse
          fmt.Fprintf(os.Stdout, "Response from `ConfigurationHubAPI.GetDeploy`: %v\n", resp)
        }
- path: /configuration-hub/object-mappings/{sourceOrg}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/configuration-hub#get-object-mappings
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceOrg := `source-org` // string | The name of the source org. # string | The name of the source org.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConfigurationHubAPI.GetObjectMappings(context.Background(), sourceOrg).Execute()
          //resp, r, err := apiClient.V2025.ConfigurationHubAPI.GetObjectMappings(context.Background(), sourceOrg).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConfigurationHubAPI.GetObjectMappings``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetObjectMappings`: []ObjectMappingResponse
          fmt.Fprintf(os.Stdout, "Response from `ConfigurationHubAPI.GetObjectMappings`: %v\n", resp)
        }
- path: /configuration-hub/backups/uploads/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/configuration-hub#get-uploaded-configuration
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `3d0fe04b-57df-4a46-a83b-8f04b0f9d10b` // string | The id of the uploaded configuration. # string | The id of the uploaded configuration.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConfigurationHubAPI.GetUploadedConfiguration(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.ConfigurationHubAPI.GetUploadedConfiguration(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConfigurationHubAPI.GetUploadedConfiguration``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetUploadedConfiguration`: BackupResponse
          fmt.Fprintf(os.Stdout, "Response from `ConfigurationHubAPI.GetUploadedConfiguration`: %v\n", resp)
        }
- path: /configuration-hub/backups
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/configuration-hub#list-backups
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          filters := `status eq "COMPLETE"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **status**: *eq* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **status**: *eq* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConfigurationHubAPI.ListBackups(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.ConfigurationHubAPI.ListBackups(context.Background()).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConfigurationHubAPI.ListBackups``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListBackups`: []BackupResponse1
          fmt.Fprintf(os.Stdout, "Response from `ConfigurationHubAPI.ListBackups`: %v\n", resp)
        }
- path: /configuration-hub/deploys
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/configuration-hub#list-deploys
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConfigurationHubAPI.ListDeploys(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.ConfigurationHubAPI.ListDeploys(context.Background()).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConfigurationHubAPI.ListDeploys``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListDeploys`: ListDeploys200Response
          fmt.Fprintf(os.Stdout, "Response from `ConfigurationHubAPI.ListDeploys`: %v\n", resp)
        }
- path: /configuration-hub/drafts
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/configuration-hub#list-drafts
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          filters := `status eq "COMPLETE"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **status**: *eq*  **approvalStatus**: *eq* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **status**: *eq*  **approvalStatus**: *eq* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConfigurationHubAPI.ListDrafts(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.ConfigurationHubAPI.ListDrafts(context.Background()).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConfigurationHubAPI.ListDrafts``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListDrafts`: []DraftResponse
          fmt.Fprintf(os.Stdout, "Response from `ConfigurationHubAPI.ListDrafts`: %v\n", resp)
        }
- path: /configuration-hub/scheduled-actions
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/configuration-hub#list-scheduled-actions
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConfigurationHubAPI.ListScheduledActions(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.ConfigurationHubAPI.ListScheduledActions(context.Background()).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConfigurationHubAPI.ListScheduledActions``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListScheduledActions`: []ScheduledActionResponse
          fmt.Fprintf(os.Stdout, "Response from `ConfigurationHubAPI.ListScheduledActions`: %v\n", resp)
        }
- path: /configuration-hub/backups/uploads
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/configuration-hub#list-uploaded-configurations
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          filters := `status eq "COMPLETE"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **status**: *eq* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **status**: *eq* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConfigurationHubAPI.ListUploadedConfigurations(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.ConfigurationHubAPI.ListUploadedConfigurations(context.Background()).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConfigurationHubAPI.ListUploadedConfigurations``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListUploadedConfigurations`: []BackupResponse
          fmt.Fprintf(os.Stdout, "Response from `ConfigurationHubAPI.ListUploadedConfigurations`: %v\n", resp)
        }
- path: /configuration-hub/object-mappings/{sourceOrg}/bulk-patch
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/configuration-hub#update-object-mappings
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceOrg := `source-org` // string | The name of the source org. # string | The name of the source org.
           objectmappingbulkpatchrequest := []byte(`{
          "patches" : {
            "603b1a61-d03d-4ed1-864f-a508fbd1995d" : [ {
              "op" : "replace",
              "path" : "/enabled",
              "value" : true
            } ],
            "00bece34-f50d-4227-8878-76f620b5a971" : [ {
              "op" : "replace",
              "path" : "/targetValue",
              "value" : "New Target Value"
            } ]
          }
        }`) // ObjectMappingBulkPatchRequest | The object mapping request body.

          
          var objectMappingBulkPatchRequest v2025.ObjectMappingBulkPatchRequest
          if err := json.Unmarshal(objectmappingbulkpatchrequest, &objectMappingBulkPatchRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConfigurationHubAPI.UpdateObjectMappings(context.Background(), sourceOrg).ObjectMappingBulkPatchRequest(objectMappingBulkPatchRequest).Execute()
          //resp, r, err := apiClient.V2025.ConfigurationHubAPI.UpdateObjectMappings(context.Background(), sourceOrg).ObjectMappingBulkPatchRequest(objectMappingBulkPatchRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConfigurationHubAPI.UpdateObjectMappings``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateObjectMappings`: ObjectMappingBulkPatchResponse
          fmt.Fprintf(os.Stdout, "Response from `ConfigurationHubAPI.UpdateObjectMappings`: %v\n", resp)
        }
- path: /configuration-hub/scheduled-actions/{id}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/configuration-hub#update-scheduled-action
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          scheduledActionId := `0f11f2a4-7c94-4bf3-a2bd-742580fe3bde` // string | The ID of the scheduled action. # string | The ID of the scheduled action.
           jsonpatch := []byte(`{
          "operations" : [ {
            "op" : "replace",
            "path" : "/description",
            "value" : "New description"
          }, {
            "op" : "replace",
            "path" : "/description",
            "value" : "New description"
          } ]
        }`) // JsonPatch | The JSON Patch document containing the changes to apply to the scheduled action.

          
          var jsonPatch v2025.JsonPatch
          if err := json.Unmarshal(jsonpatch, &jsonPatch); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConfigurationHubAPI.UpdateScheduledAction(context.Background(), scheduledActionId).JsonPatch(jsonPatch).Execute()
          //resp, r, err := apiClient.V2025.ConfigurationHubAPI.UpdateScheduledAction(context.Background(), scheduledActionId).JsonPatch(jsonPatch).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConfigurationHubAPI.UpdateScheduledAction``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateScheduledAction`: ScheduledActionResponse
          fmt.Fprintf(os.Stdout, "Response from `ConfigurationHubAPI.UpdateScheduledAction`: %v\n", resp)
        }
- path: /connector-customizers
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/connector-customizers#create-connector-customizer
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           connectorcustomizercreaterequest := []byte(`{
          "name" : "My Custom Connector"
        }`) // ConnectorCustomizerCreateRequest | Connector customizer to create.

          
          var connectorCustomizerCreateRequest v2025.ConnectorCustomizerCreateRequest
          if err := json.Unmarshal(connectorcustomizercreaterequest, &connectorCustomizerCreateRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConnectorCustomizersAPI.CreateConnectorCustomizer(context.Background()).ConnectorCustomizerCreateRequest(connectorCustomizerCreateRequest).Execute()
          //resp, r, err := apiClient.V2025.ConnectorCustomizersAPI.CreateConnectorCustomizer(context.Background()).ConnectorCustomizerCreateRequest(connectorCustomizerCreateRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConnectorCustomizersAPI.CreateConnectorCustomizer``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateConnectorCustomizer`: ConnectorCustomizerCreateResponse
          fmt.Fprintf(os.Stdout, "Response from `ConnectorCustomizersAPI.CreateConnectorCustomizer`: %v\n", resp)
        }
- path: /connector-customizers/{id}/versions
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/connector-customizers#create-connector-customizer-version
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `b07dc46a-1498-4de8-bfbb-259a68e70c8a` // string | The id of the connector customizer. # string | The id of the connector customizer.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConnectorCustomizersAPI.CreateConnectorCustomizerVersion(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.ConnectorCustomizersAPI.CreateConnectorCustomizerVersion(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConnectorCustomizersAPI.CreateConnectorCustomizerVersion``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateConnectorCustomizerVersion`: ConnectorCustomizerVersionCreateResponse
          fmt.Fprintf(os.Stdout, "Response from `ConnectorCustomizersAPI.CreateConnectorCustomizerVersion`: %v\n", resp)
        }
- path: /connector-customizers/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/connector-customizers#delete-connector-customizer
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `b07dc46a-1498-4de8-bfbb-259a68e70c8a` // string | ID of the connector customizer to delete. # string | ID of the connector customizer to delete.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.ConnectorCustomizersAPI.DeleteConnectorCustomizer(context.Background(), id).Execute()
          //r, err := apiClient.V2025.ConnectorCustomizersAPI.DeleteConnectorCustomizer(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConnectorCustomizersAPI.DeleteConnectorCustomizer``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /connector-customizers/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/connector-customizers#get-connector-customizer
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `b07dc46a-1498-4de8-bfbb-259a68e70c8a` // string | ID of the connector customizer to get. # string | ID of the connector customizer to get.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConnectorCustomizersAPI.GetConnectorCustomizer(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.ConnectorCustomizersAPI.GetConnectorCustomizer(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConnectorCustomizersAPI.GetConnectorCustomizer``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetConnectorCustomizer`: ConnectorCustomizersResponse
          fmt.Fprintf(os.Stdout, "Response from `ConnectorCustomizersAPI.GetConnectorCustomizer`: %v\n", resp)
        }
- path: /connector-customizers
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/connector-customizers#list-connector-customizers
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConnectorCustomizersAPI.ListConnectorCustomizers(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.ConnectorCustomizersAPI.ListConnectorCustomizers(context.Background()).Offset(offset).Limit(limit).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConnectorCustomizersAPI.ListConnectorCustomizers``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListConnectorCustomizers`: []ConnectorCustomizersResponse
          fmt.Fprintf(os.Stdout, "Response from `ConnectorCustomizersAPI.ListConnectorCustomizers`: %v\n", resp)
        }
- path: /connector-customizers/{id}
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/connector-customizers#put-connector-customizer
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `b07dc46a-1498-4de8-bfbb-259a68e70c8a` // string | ID of the connector customizer to update. # string | ID of the connector customizer to update.
           connectorcustomizerupdaterequest := []byte(`{
          "name" : "My Custom Connector"
        }`) // ConnectorCustomizerUpdateRequest | Connector rule with updated data. (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConnectorCustomizersAPI.PutConnectorCustomizer(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.ConnectorCustomizersAPI.PutConnectorCustomizer(context.Background(), id).ConnectorCustomizerUpdateRequest(connectorCustomizerUpdateRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConnectorCustomizersAPI.PutConnectorCustomizer``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PutConnectorCustomizer`: ConnectorCustomizerUpdateResponse
          fmt.Fprintf(os.Stdout, "Response from `ConnectorCustomizersAPI.PutConnectorCustomizer`: %v\n", resp)
        }
- path: /connector-rules
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/connector-rule-management#create-connector-rule
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           connectorrulecreaterequest := []byte(`{
          "sourceCode" : {
            "version" : "1.0",
            "script" : "return \"Mr. \" + firstName;"
          },
          "signature" : {
            "output" : {
              "name" : "firstName",
              "description" : "the first name of the identity",
              "type" : "String"
            },
            "input" : [ {
              "name" : "firstName",
              "description" : "the first name of the identity",
              "type" : "String"
            }, {
              "name" : "firstName",
              "description" : "the first name of the identity",
              "type" : "String"
            } ]
          },
          "name" : "WebServiceBeforeOperationRule",
          "description" : "This rule does that",
          "attributes" : { },
          "type" : "BuildMap"
        }`) // ConnectorRuleCreateRequest | Connector rule to create.

          
          var connectorRuleCreateRequest v2025.ConnectorRuleCreateRequest
          if err := json.Unmarshal(connectorrulecreaterequest, &connectorRuleCreateRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConnectorRuleManagementAPI.CreateConnectorRule(context.Background()).ConnectorRuleCreateRequest(connectorRuleCreateRequest).Execute()
          //resp, r, err := apiClient.V2025.ConnectorRuleManagementAPI.CreateConnectorRule(context.Background()).ConnectorRuleCreateRequest(connectorRuleCreateRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConnectorRuleManagementAPI.CreateConnectorRule``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateConnectorRule`: ConnectorRuleResponse
          fmt.Fprintf(os.Stdout, "Response from `ConnectorRuleManagementAPI.CreateConnectorRule`: %v\n", resp)
        }
- path: /connector-rules/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/connector-rule-management#delete-connector-rule
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `8c190e6787aa4ed9a90bd9d5344523fb` // string | ID of the connector rule to delete. # string | ID of the connector rule to delete.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.ConnectorRuleManagementAPI.DeleteConnectorRule(context.Background(), id).Execute()
          //r, err := apiClient.V2025.ConnectorRuleManagementAPI.DeleteConnectorRule(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConnectorRuleManagementAPI.DeleteConnectorRule``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /connector-rules/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/connector-rule-management#get-connector-rule
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `8c190e6787aa4ed9a90bd9d5344523fb` // string | ID of the connector rule to get. # string | ID of the connector rule to get.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConnectorRuleManagementAPI.GetConnectorRule(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.ConnectorRuleManagementAPI.GetConnectorRule(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConnectorRuleManagementAPI.GetConnectorRule``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetConnectorRule`: ConnectorRuleResponse
          fmt.Fprintf(os.Stdout, "Response from `ConnectorRuleManagementAPI.GetConnectorRule`: %v\n", resp)
        }
- path: /connector-rules
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/connector-rule-management#get-connector-rule-list
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          limit := 50 // int32 | Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 50) # int32 | Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 50)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConnectorRuleManagementAPI.GetConnectorRuleList(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.ConnectorRuleManagementAPI.GetConnectorRuleList(context.Background()).Limit(limit).Offset(offset).Count(count).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConnectorRuleManagementAPI.GetConnectorRuleList``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetConnectorRuleList`: []ConnectorRuleResponse
          fmt.Fprintf(os.Stdout, "Response from `ConnectorRuleManagementAPI.GetConnectorRuleList`: %v\n", resp)
        }
- path: /connector-rules/{id}
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/connector-rule-management#put-connector-rule
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `8c190e6787aa4ed9a90bd9d5344523fb` // string | ID of the connector rule to update. # string | ID of the connector rule to update.
           connectorruleupdaterequest := []byte(`{
          "sourceCode" : {
            "version" : "1.0",
            "script" : "return \"Mr. \" + firstName;"
          },
          "signature" : {
            "output" : {
              "name" : "firstName",
              "description" : "the first name of the identity",
              "type" : "String"
            },
            "input" : [ {
              "name" : "firstName",
              "description" : "the first name of the identity",
              "type" : "String"
            }, {
              "name" : "firstName",
              "description" : "the first name of the identity",
              "type" : "String"
            } ]
          },
          "name" : "WebServiceBeforeOperationRule",
          "description" : "This rule does that",
          "attributes" : { },
          "id" : "8113d48c0b914f17b4c6072d4dcb9dfe",
          "type" : "BuildMap"
        }`) // ConnectorRuleUpdateRequest | Connector rule with updated data. (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConnectorRuleManagementAPI.PutConnectorRule(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.ConnectorRuleManagementAPI.PutConnectorRule(context.Background(), id).ConnectorRuleUpdateRequest(connectorRuleUpdateRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConnectorRuleManagementAPI.PutConnectorRule``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PutConnectorRule`: ConnectorRuleResponse
          fmt.Fprintf(os.Stdout, "Response from `ConnectorRuleManagementAPI.PutConnectorRule`: %v\n", resp)
        }
- path: /connector-rules/validate
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/connector-rule-management#test-connector-rule
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           sourcecode := []byte(`{
          "version" : "1.0",
          "script" : "return \"Mr. \" + firstName;"
        }`) // SourceCode | Code to validate.

          
          var sourceCode v2025.SourceCode
          if err := json.Unmarshal(sourcecode, &sourceCode); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConnectorRuleManagementAPI.TestConnectorRule(context.Background()).SourceCode(sourceCode).Execute()
          //resp, r, err := apiClient.V2025.ConnectorRuleManagementAPI.TestConnectorRule(context.Background()).SourceCode(sourceCode).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConnectorRuleManagementAPI.TestConnectorRule``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `TestConnectorRule`: ConnectorRuleValidationResponse
          fmt.Fprintf(os.Stdout, "Response from `ConnectorRuleManagementAPI.TestConnectorRule`: %v\n", resp)
        }
- path: /connectors
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/connectors#create-custom-connector
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           v3createconnectordto := []byte(`{
          "name" : "custom connector",
          "directConnect" : true,
          "className" : "sailpoint.connector.OpenConnectorAdapter",
          "type" : "custom connector type",
          "status" : "RELEASED"
        }`) // V3CreateConnectorDto | 

          
          var v3CreateConnectorDto v2025.V3CreateConnectorDto
          if err := json.Unmarshal(v3createconnectordto, &v3CreateConnectorDto); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConnectorsAPI.CreateCustomConnector(context.Background()).V3CreateConnectorDto(v3CreateConnectorDto).Execute()
          //resp, r, err := apiClient.V2025.ConnectorsAPI.CreateCustomConnector(context.Background()).V3CreateConnectorDto(v3CreateConnectorDto).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConnectorsAPI.CreateCustomConnector``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateCustomConnector`: V3ConnectorDto
          fmt.Fprintf(os.Stdout, "Response from `ConnectorsAPI.CreateCustomConnector`: %v\n", resp)
        }
- path: /connectors/{scriptName}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/connectors#delete-custom-connector
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          scriptName := `aScriptName` // string | The scriptName value of the connector. ScriptName is the unique id generated at connector creation. # string | The scriptName value of the connector. ScriptName is the unique id generated at connector creation.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.ConnectorsAPI.DeleteCustomConnector(context.Background(), scriptName).Execute()
          //r, err := apiClient.V2025.ConnectorsAPI.DeleteCustomConnector(context.Background(), scriptName).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConnectorsAPI.DeleteCustomConnector``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /connectors/{scriptName}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/connectors#get-connector
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          scriptName := `aScriptName` // string | The scriptName value of the connector. ScriptName is the unique id generated at connector creation. # string | The scriptName value of the connector. ScriptName is the unique id generated at connector creation.
          locale := `de` // string | The locale to apply to the config. If no viable locale is given, it will default to \"en\" (optional) # string | The locale to apply to the config. If no viable locale is given, it will default to \"en\" (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConnectorsAPI.GetConnector(context.Background(), scriptName).Execute()
          //resp, r, err := apiClient.V2025.ConnectorsAPI.GetConnector(context.Background(), scriptName).Locale(locale).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConnectorsAPI.GetConnector``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetConnector`: ConnectorDetail
          fmt.Fprintf(os.Stdout, "Response from `ConnectorsAPI.GetConnector`: %v\n", resp)
        }
- path: /connectors/{scriptName}/correlation-config
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/connectors#get-connector-correlation-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          scriptName := `aScriptName` // string | The scriptName value of the connector. Scriptname is the unique id generated at connector creation. # string | The scriptName value of the connector. Scriptname is the unique id generated at connector creation.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConnectorsAPI.GetConnectorCorrelationConfig(context.Background(), scriptName).Execute()
          //resp, r, err := apiClient.V2025.ConnectorsAPI.GetConnectorCorrelationConfig(context.Background(), scriptName).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConnectorsAPI.GetConnectorCorrelationConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetConnectorCorrelationConfig`: string
          fmt.Fprintf(os.Stdout, "Response from `ConnectorsAPI.GetConnectorCorrelationConfig`: %v\n", resp)
        }
- path: /connectors
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/connectors#get-connector-list
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          filters := `directConnect eq "true"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw, co*  **type**: *sw, co, eq*  **directConnect**: *eq*  **category**: *eq*  **features**: *ca*  **labels**: *ca* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw, co*  **type**: *sw, co, eq*  **directConnect**: *eq*  **category**: *eq*  **features**: *ca*  **labels**: *ca* (optional)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          locale := `de` // string | The locale to apply to the config. If no viable locale is given, it will default to \"en\" (optional) # string | The locale to apply to the config. If no viable locale is given, it will default to \"en\" (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConnectorsAPI.GetConnectorList(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.ConnectorsAPI.GetConnectorList(context.Background()).Filters(filters).Limit(limit).Offset(offset).Count(count).Locale(locale).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConnectorsAPI.GetConnectorList``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetConnectorList`: []V3ConnectorDto
          fmt.Fprintf(os.Stdout, "Response from `ConnectorsAPI.GetConnectorList`: %v\n", resp)
        }
- path: /connectors/{scriptName}/source-config
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/connectors#get-connector-source-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          scriptName := `aScriptName` // string | The scriptName value of the connector. ScriptName is the unique id generated at connector creation. # string | The scriptName value of the connector. ScriptName is the unique id generated at connector creation.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConnectorsAPI.GetConnectorSourceConfig(context.Background(), scriptName).Execute()
          //resp, r, err := apiClient.V2025.ConnectorsAPI.GetConnectorSourceConfig(context.Background(), scriptName).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConnectorsAPI.GetConnectorSourceConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetConnectorSourceConfig`: string
          fmt.Fprintf(os.Stdout, "Response from `ConnectorsAPI.GetConnectorSourceConfig`: %v\n", resp)
        }
- path: /connectors/{scriptName}/source-template
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/connectors#get-connector-source-template
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          scriptName := `aScriptName` // string | The scriptName value of the connector. ScriptName is the unique id generated at connector creation. # string | The scriptName value of the connector. ScriptName is the unique id generated at connector creation.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConnectorsAPI.GetConnectorSourceTemplate(context.Background(), scriptName).Execute()
          //resp, r, err := apiClient.V2025.ConnectorsAPI.GetConnectorSourceTemplate(context.Background(), scriptName).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConnectorsAPI.GetConnectorSourceTemplate``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetConnectorSourceTemplate`: string
          fmt.Fprintf(os.Stdout, "Response from `ConnectorsAPI.GetConnectorSourceTemplate`: %v\n", resp)
        }
- path: /connectors/{scriptName}/translations/{locale}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/connectors#get-connector-translations
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          scriptName := `aScriptName` // string | The scriptName value of the connector. Scriptname is the unique id generated at connector creation. # string | The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
          locale := `de` // string | The locale to apply to the config. If no viable locale is given, it will default to \"en\" # string | The locale to apply to the config. If no viable locale is given, it will default to \"en\"

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConnectorsAPI.GetConnectorTranslations(context.Background(), scriptName, locale).Execute()
          //resp, r, err := apiClient.V2025.ConnectorsAPI.GetConnectorTranslations(context.Background(), scriptName, locale).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConnectorsAPI.GetConnectorTranslations``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetConnectorTranslations`: string
          fmt.Fprintf(os.Stdout, "Response from `ConnectorsAPI.GetConnectorTranslations`: %v\n", resp)
        }
- path: /connectors/{scriptName}/correlation-config
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/connectors#put-connector-correlation-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          scriptName := `aScriptName` // string | The scriptName value of the connector. Scriptname is the unique id generated at connector creation. # string | The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
          file := BINARY_DATA_HERE // *os.File | connector correlation config xml file # *os.File | connector correlation config xml file

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConnectorsAPI.PutConnectorCorrelationConfig(context.Background(), scriptName).File(file).Execute()
          //resp, r, err := apiClient.V2025.ConnectorsAPI.PutConnectorCorrelationConfig(context.Background(), scriptName).File(file).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConnectorsAPI.PutConnectorCorrelationConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PutConnectorCorrelationConfig`: UpdateDetail
          fmt.Fprintf(os.Stdout, "Response from `ConnectorsAPI.PutConnectorCorrelationConfig`: %v\n", resp)
        }
- path: /connectors/{scriptName}/source-config
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/connectors#put-connector-source-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          scriptName := `aScriptName` // string | The scriptName value of the connector. ScriptName is the unique id generated at connector creation. # string | The scriptName value of the connector. ScriptName is the unique id generated at connector creation.
          file := BINARY_DATA_HERE // *os.File | connector source config xml file # *os.File | connector source config xml file

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConnectorsAPI.PutConnectorSourceConfig(context.Background(), scriptName).File(file).Execute()
          //resp, r, err := apiClient.V2025.ConnectorsAPI.PutConnectorSourceConfig(context.Background(), scriptName).File(file).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConnectorsAPI.PutConnectorSourceConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PutConnectorSourceConfig`: UpdateDetail
          fmt.Fprintf(os.Stdout, "Response from `ConnectorsAPI.PutConnectorSourceConfig`: %v\n", resp)
        }
- path: /connectors/{scriptName}/source-template
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/connectors#put-connector-source-template
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          scriptName := `aScriptName` // string | The scriptName value of the connector. ScriptName is the unique id generated at connector creation. # string | The scriptName value of the connector. ScriptName is the unique id generated at connector creation.
          file := BINARY_DATA_HERE // *os.File | connector source template xml file # *os.File | connector source template xml file

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConnectorsAPI.PutConnectorSourceTemplate(context.Background(), scriptName).File(file).Execute()
          //resp, r, err := apiClient.V2025.ConnectorsAPI.PutConnectorSourceTemplate(context.Background(), scriptName).File(file).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConnectorsAPI.PutConnectorSourceTemplate``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PutConnectorSourceTemplate`: UpdateDetail
          fmt.Fprintf(os.Stdout, "Response from `ConnectorsAPI.PutConnectorSourceTemplate`: %v\n", resp)
        }
- path: /connectors/{scriptName}/translations/{locale}
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/connectors#put-connector-translations
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          scriptName := `aScriptName` // string | The scriptName value of the connector. Scriptname is the unique id generated at connector creation. # string | The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
          locale := `de` // string | The locale to apply to the config. If no viable locale is given, it will default to \"en\" # string | The locale to apply to the config. If no viable locale is given, it will default to \"en\"

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConnectorsAPI.PutConnectorTranslations(context.Background(), scriptName, locale).Execute()
          //resp, r, err := apiClient.V2025.ConnectorsAPI.PutConnectorTranslations(context.Background(), scriptName, locale).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConnectorsAPI.PutConnectorTranslations``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PutConnectorTranslations`: UpdateDetail
          fmt.Fprintf(os.Stdout, "Response from `ConnectorsAPI.PutConnectorTranslations`: %v\n", resp)
        }
- path: /connectors/{scriptName}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/connectors#update-connector
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          scriptName := `aScriptName` // string | The scriptName value of the connector. ScriptName is the unique id generated at connector creation. # string | The scriptName value of the connector. ScriptName is the unique id generated at connector creation.
          jsonpatchoperation := []byte(``) // []JsonPatchOperation | A list of connector detail update operations 

          
          var jsonPatchOperation []v2025.JsonPatchOperation
          if err := json.Unmarshal(jsonpatchoperation, &jsonPatchOperation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ConnectorsAPI.UpdateConnector(context.Background(), scriptName).JsonPatchOperation(jsonPatchOperation).Execute()
          //resp, r, err := apiClient.V2025.ConnectorsAPI.UpdateConnector(context.Background(), scriptName).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ConnectorsAPI.UpdateConnector``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateConnector`: ConnectorDetail
          fmt.Fprintf(os.Stdout, "Response from `ConnectorsAPI.UpdateConnector`: %v\n", resp)
        }
- path: /form-definitions
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/custom-forms#create-form-definition
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           body := []byte(`{
          "owner" : {
            "name" : "Grant Smith",
            "id" : "2c9180867624cbd7017642d8c8c81f67",
            "type" : "IDENTITY"
          },
          "formConditions" : [ {
            "ruleOperator" : "AND",
            "effects" : [ {
              "config" : {
                "defaultValueLabel" : "Access to Remove",
                "element" : "8110662963316867"
              },
              "effectType" : "HIDE"
            }, {
              "config" : {
                "defaultValueLabel" : "Access to Remove",
                "element" : "8110662963316867"
              },
              "effectType" : "HIDE"
            } ],
            "rules" : [ {
              "sourceType" : "ELEMENT",
              "valueType" : "STRING",
              "source" : "department",
              "value" : "Engineering",
              "operator" : "EQ"
            }, {
              "sourceType" : "ELEMENT",
              "valueType" : "STRING",
              "source" : "department",
              "value" : "Engineering",
              "operator" : "EQ"
            } ]
          }, {
            "ruleOperator" : "AND",
            "effects" : [ {
              "config" : {
                "defaultValueLabel" : "Access to Remove",
                "element" : "8110662963316867"
              },
              "effectType" : "HIDE"
            }, {
              "config" : {
                "defaultValueLabel" : "Access to Remove",
                "element" : "8110662963316867"
              },
              "effectType" : "HIDE"
            } ],
            "rules" : [ {
              "sourceType" : "ELEMENT",
              "valueType" : "STRING",
              "source" : "department",
              "value" : "Engineering",
              "operator" : "EQ"
            }, {
              "sourceType" : "ELEMENT",
              "valueType" : "STRING",
              "source" : "department",
              "value" : "Engineering",
              "operator" : "EQ"
            } ]
          } ],
          "formInput" : [ {
            "description" : "A single dynamic scalar value (i.e. number, string, date, etc.) that can be passed into the form for use in conditional logic",
            "id" : "00000000-0000-0000-0000-000000000000",
            "label" : "input1",
            "type" : "STRING"
          }, {
            "description" : "A single dynamic scalar value (i.e. number, string, date, etc.) that can be passed into the form for use in conditional logic",
            "id" : "00000000-0000-0000-0000-000000000000",
            "label" : "input1",
            "type" : "STRING"
          } ],
          "name" : "My form",
          "description" : "My form description",
          "usedBy" : [ {
            "name" : "Access Request Form",
            "id" : "61940a92-5484-42bc-bc10-b9982b218cdf",
            "type" : "WORKFLOW"
          }, {
            "name" : "Access Request Form",
            "id" : "61940a92-5484-42bc-bc10-b9982b218cdf",
            "type" : "WORKFLOW"
          } ],
          "formElements" : [ {
            "id" : "00000000-0000-0000-0000-000000000000",
            "validations" : [ {
              "validationType" : "REQUIRED"
            }, {
              "validationType" : "REQUIRED"
            } ],
            "elementType" : "TEXT",
            "config" : {
              "label" : "Department"
            },
            "key" : "department"
          }, {
            "id" : "00000000-0000-0000-0000-000000000000",
            "validations" : [ {
              "validationType" : "REQUIRED"
            }, {
              "validationType" : "REQUIRED"
            } ],
            "elementType" : "TEXT",
            "config" : {
              "label" : "Department"
            },
            "key" : "department"
          } ]
        }`) // CreateFormDefinitionRequest | Body is the request payload to create form definition request (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CustomFormsAPI.CreateFormDefinition(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.CustomFormsAPI.CreateFormDefinition(context.Background()).Body(body).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CustomFormsAPI.CreateFormDefinition``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateFormDefinition`: FormDefinitionResponse
          fmt.Fprintf(os.Stdout, "Response from `CustomFormsAPI.CreateFormDefinition`: %v\n", resp)
        }
- path: /form-definitions/forms-action-dynamic-schema
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/custom-forms#create-form-definition-dynamic-schema
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           body := []byte(`{
          "description" : "A description",
          "attributes" : {
            "formDefinitionId" : "00000000-0000-0000-0000-000000000000"
          },
          "id" : "00000000-0000-0000-0000-000000000000",
          "type" : "action",
          "versionNumber" : 1
        }`) // FormDefinitionDynamicSchemaRequest | Body is the request payload to create a form definition dynamic schema (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CustomFormsAPI.CreateFormDefinitionDynamicSchema(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.CustomFormsAPI.CreateFormDefinitionDynamicSchema(context.Background()).Body(body).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CustomFormsAPI.CreateFormDefinitionDynamicSchema``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateFormDefinitionDynamicSchema`: FormDefinitionDynamicSchemaResponse
          fmt.Fprintf(os.Stdout, "Response from `CustomFormsAPI.CreateFormDefinitionDynamicSchema`: %v\n", resp)
        }
- path: /form-definitions/{formDefinitionID}/upload
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/custom-forms#create-form-definition-file-request
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          formDefinitionID := `00000000-0000-0000-0000-000000000000` // string | FormDefinitionID  String specifying FormDefinitionID # string | FormDefinitionID  String specifying FormDefinitionID
          file := BINARY_DATA_HERE // *os.File | File specifying the multipart # *os.File | File specifying the multipart

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CustomFormsAPI.CreateFormDefinitionFileRequest(context.Background(), formDefinitionID).File(file).Execute()
          //resp, r, err := apiClient.V2025.CustomFormsAPI.CreateFormDefinitionFileRequest(context.Background(), formDefinitionID).File(file).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CustomFormsAPI.CreateFormDefinitionFileRequest``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateFormDefinitionFileRequest`: FormDefinitionFileUploadResponse
          fmt.Fprintf(os.Stdout, "Response from `CustomFormsAPI.CreateFormDefinitionFileRequest`: %v\n", resp)
        }
- path: /form-instances
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/custom-forms#create-form-instance
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           body := []byte(`{
          "formInput" : {
            "input1" : "Sales"
          },
          "standAloneForm" : false,
          "createdBy" : {
            "id" : "00000000-0000-0000-0000-000000000000",
            "type" : "WORKFLOW_EXECUTION"
          },
          "recipients" : [ {
            "id" : "00000000-0000-0000-0000-000000000000",
            "type" : "IDENTITY"
          }, {
            "id" : "00000000-0000-0000-0000-000000000000",
            "type" : "IDENTITY"
          } ],
          "expire" : "2023-08-12T20:14:57.74486Z",
          "formDefinitionId" : "00000000-0000-0000-0000-000000000000",
          "state" : "ASSIGNED",
          "ttl" : 1571827560
        }`) // CreateFormInstanceRequest | Body is the request payload to create a form instance (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CustomFormsAPI.CreateFormInstance(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.CustomFormsAPI.CreateFormInstance(context.Background()).Body(body).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CustomFormsAPI.CreateFormInstance``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateFormInstance`: FormInstanceResponse
          fmt.Fprintf(os.Stdout, "Response from `CustomFormsAPI.CreateFormInstance`: %v\n", resp)
        }
- path: /form-definitions/{formDefinitionID}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/custom-forms#delete-form-definition
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          formDefinitionID := `00000000-0000-0000-0000-000000000000` // string | Form definition ID # string | Form definition ID

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CustomFormsAPI.DeleteFormDefinition(context.Background(), formDefinitionID).Execute()
          //resp, r, err := apiClient.V2025.CustomFormsAPI.DeleteFormDefinition(context.Background(), formDefinitionID).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CustomFormsAPI.DeleteFormDefinition``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `DeleteFormDefinition`: map[string]interface{}
          fmt.Fprintf(os.Stdout, "Response from `CustomFormsAPI.DeleteFormDefinition`: %v\n", resp)
        }
- path: /form-definitions/export
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/custom-forms#export-form-definitions-by-tenant
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          offset := 0 // int64 | Offset  Integer specifying the offset of the first result from the beginning of the collection. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). The offset value is record-based, not page-based, and the index starts at 0. (optional) (default to 0) # int64 | Offset  Integer specifying the offset of the first result from the beginning of the collection. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). The offset value is record-based, not page-based, and the index starts at 0. (optional) (default to 0)
          limit := 250 // int64 | Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used. (optional) (default to 250) # int64 | Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used. (optional) (default to 250)
          filters := `name sw "my form"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq, gt, sw, in*  **description**: *eq, gt, sw, in*  **created**: *eq, gt, sw, in*  **modified**: *eq, gt, sw, in* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq, gt, sw, in*  **description**: *eq, gt, sw, in*  **created**: *eq, gt, sw, in*  **modified**: *eq, gt, sw, in* (optional)
          sorters := `name` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, description, created, modified** (optional) (default to "name") # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, description, created, modified** (optional) (default to "name")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CustomFormsAPI.ExportFormDefinitionsByTenant(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.CustomFormsAPI.ExportFormDefinitionsByTenant(context.Background()).Offset(offset).Limit(limit).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CustomFormsAPI.ExportFormDefinitionsByTenant``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ExportFormDefinitionsByTenant`: []ExportFormDefinitionsByTenant200ResponseInner
          fmt.Fprintf(os.Stdout, "Response from `CustomFormsAPI.ExportFormDefinitionsByTenant`: %v\n", resp)
        }
- path: /form-definitions/{formDefinitionID}/file/{fileID}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/custom-forms#get-file-from-s3
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          formDefinitionID := `00000000-0000-0000-0000-000000000000` // string | FormDefinitionID  Form definition ID # string | FormDefinitionID  Form definition ID
          fileID := `00000031N0J7R2B57M8YG73J7M.png` // string | FileID  String specifying the hashed name of the uploaded file we are retrieving. # string | FileID  String specifying the hashed name of the uploaded file we are retrieving.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CustomFormsAPI.GetFileFromS3(context.Background(), formDefinitionID, fileID).Execute()
          //resp, r, err := apiClient.V2025.CustomFormsAPI.GetFileFromS3(context.Background(), formDefinitionID, fileID).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CustomFormsAPI.GetFileFromS3``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetFileFromS3`: *os.File
          fmt.Fprintf(os.Stdout, "Response from `CustomFormsAPI.GetFileFromS3`: %v\n", resp)
        }
- path: /form-definitions/{formDefinitionID}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/custom-forms#get-form-definition-by-key
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          formDefinitionID := `00000000-0000-0000-0000-000000000000` // string | Form definition ID # string | Form definition ID

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CustomFormsAPI.GetFormDefinitionByKey(context.Background(), formDefinitionID).Execute()
          //resp, r, err := apiClient.V2025.CustomFormsAPI.GetFormDefinitionByKey(context.Background(), formDefinitionID).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CustomFormsAPI.GetFormDefinitionByKey``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetFormDefinitionByKey`: FormDefinitionResponse
          fmt.Fprintf(os.Stdout, "Response from `CustomFormsAPI.GetFormDefinitionByKey`: %v\n", resp)
        }
- path: /form-instances/{formInstanceID}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/custom-forms#get-form-instance-by-key
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          formInstanceID := `00000000-0000-0000-0000-000000000000` // string | Form instance ID # string | Form instance ID

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CustomFormsAPI.GetFormInstanceByKey(context.Background(), formInstanceID).Execute()
          //resp, r, err := apiClient.V2025.CustomFormsAPI.GetFormInstanceByKey(context.Background(), formInstanceID).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CustomFormsAPI.GetFormInstanceByKey``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetFormInstanceByKey`: FormInstanceResponse
          fmt.Fprintf(os.Stdout, "Response from `CustomFormsAPI.GetFormInstanceByKey`: %v\n", resp)
        }
- path: /form-instances/{formInstanceID}/file/{fileID}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/custom-forms#get-form-instance-file
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          formInstanceID := `00000000-0000-0000-0000-000000000000` // string | FormInstanceID  Form instance ID # string | FormInstanceID  Form instance ID
          fileID := `00000031N0J7R2B57M8YG73J7M.png` // string | FileID  String specifying the hashed name of the uploaded file we are retrieving. # string | FileID  String specifying the hashed name of the uploaded file we are retrieving.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CustomFormsAPI.GetFormInstanceFile(context.Background(), formInstanceID, fileID).Execute()
          //resp, r, err := apiClient.V2025.CustomFormsAPI.GetFormInstanceFile(context.Background(), formInstanceID, fileID).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CustomFormsAPI.GetFormInstanceFile``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetFormInstanceFile`: *os.File
          fmt.Fprintf(os.Stdout, "Response from `CustomFormsAPI.GetFormInstanceFile`: %v\n", resp)
        }
- path: /form-definitions/import
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/custom-forms#import-form-definitions
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          body := []byte(`[{version=1, self={name=All fields not required, id=05ed4edb-d0a9-41d9-ad0c-2f6e486ec4aa, type=FORM_DEFINITION}, object={id=05ed4edb-d0a9-41d9-ad0c-2f6e486ec4aa, name=All fields not required, description=description, owner={type=IDENTITY, id=3447d8ec2602455ab6f1e8408a0f0150}, usedBy=[{type=WORKFLOW, id=5008594c-dacc-4295-8fee-41df60477304}, {type=WORKFLOW, id=97e75a75-c179-4fbc-a2da-b5fa4aaa8743}], formInput=[{type=STRING, label=input1, description=A single dynamic scalar value (i.e. number, string, date, etc) that can be passed into the form for use in conditional logic}], formElements=[{id=3069272797630701, elementType=SECTION, config={label=First Section, formElements=[{id=3069272797630700, elementType=TEXT, key=firstName, config={label=First Name}}, {id=3498415402897539, elementType=TEXT, key=lastName, config={label=Last Name}}]}}], formConditions=[{ruleOperator=AND, rules=[{sourceType=INPUT, source=Department, operator=EQ, valueType=STRING, value=Sales}], effects=[{effectType=HIDE, config={element=2614088730489570}}]}], created=2022-10-04T19:27:04.456Z, modified=2022-11-16T20:45:02.172Z}}]`) // []ImportFormDefinitionsRequestInner | Body is the request payload to import form definitions (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CustomFormsAPI.ImportFormDefinitions(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.CustomFormsAPI.ImportFormDefinitions(context.Background()).Body(body).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CustomFormsAPI.ImportFormDefinitions``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ImportFormDefinitions`: ImportFormDefinitions202Response
          fmt.Fprintf(os.Stdout, "Response from `CustomFormsAPI.ImportFormDefinitions`: %v\n", resp)
        }
- path: /form-definitions/{formDefinitionID}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/custom-forms#patch-form-definition
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          formDefinitionID := `00000000-0000-0000-0000-000000000000` // string | Form definition ID # string | Form definition ID
          body := []byte(`[{op=replace, path=/description, value=test-description}]`) // []map[string]map[string]interface{} | Body is the request payload to patch a form definition, check: https://jsonpatch.com (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CustomFormsAPI.PatchFormDefinition(context.Background(), formDefinitionID).Execute()
          //resp, r, err := apiClient.V2025.CustomFormsAPI.PatchFormDefinition(context.Background(), formDefinitionID).Body(body).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CustomFormsAPI.PatchFormDefinition``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchFormDefinition`: FormDefinitionResponse
          fmt.Fprintf(os.Stdout, "Response from `CustomFormsAPI.PatchFormDefinition`: %v\n", resp)
        }
- path: /form-instances/{formInstanceID}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/custom-forms#patch-form-instance
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          formInstanceID := `00000000-0000-0000-0000-000000000000` // string | Form instance ID # string | Form instance ID
          body := []byte(`[{op=replace, path=/state, value=SUBMITTED}, {op=replace, path=/formData, value={a-key-1=a-value-1, a-key-2=true, a-key-3=1}}]`) // []map[string]map[string]interface{} | Body is the request payload to patch a form instance, check: https://jsonpatch.com (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CustomFormsAPI.PatchFormInstance(context.Background(), formInstanceID).Execute()
          //resp, r, err := apiClient.V2025.CustomFormsAPI.PatchFormInstance(context.Background(), formInstanceID).Body(body).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CustomFormsAPI.PatchFormInstance``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchFormInstance`: FormInstanceResponse
          fmt.Fprintf(os.Stdout, "Response from `CustomFormsAPI.PatchFormInstance`: %v\n", resp)
        }
- path: /form-definitions
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/custom-forms#search-form-definitions-by-tenant
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          offset := 250 // int64 | Offset  Integer specifying the offset of the first result from the beginning of the collection. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). The offset value is record-based, not page-based, and the index starts at 0. (optional) (default to 0) # int64 | Offset  Integer specifying the offset of the first result from the beginning of the collection. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). The offset value is record-based, not page-based, and the index starts at 0. (optional) (default to 0)
          limit := 250 // int64 | Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used. (optional) (default to 250) # int64 | Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used. (optional) (default to 250)
          filters := `name sw "my form"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq, gt, sw, in*  **description**: *eq, gt, sw, in*  **created**: *eq, gt, sw, in*  **modified**: *eq, gt, sw, in* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq, gt, sw, in*  **description**: *eq, gt, sw, in*  **created**: *eq, gt, sw, in*  **modified**: *eq, gt, sw, in* (optional)
          sorters := `name` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, description, created, modified** (optional) (default to "name") # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, description, created, modified** (optional) (default to "name")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CustomFormsAPI.SearchFormDefinitionsByTenant(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.CustomFormsAPI.SearchFormDefinitionsByTenant(context.Background()).Offset(offset).Limit(limit).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CustomFormsAPI.SearchFormDefinitionsByTenant``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SearchFormDefinitionsByTenant`: ListFormDefinitionsByTenantResponse
          fmt.Fprintf(os.Stdout, "Response from `CustomFormsAPI.SearchFormDefinitionsByTenant`: %v\n", resp)
        }
- path: /form-instances/{formInstanceID}/data-source/{formElementID}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/custom-forms#search-form-element-data-by-element-id
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          formInstanceID := `00000000-0000-0000-0000-000000000000` // string | Form instance ID # string | Form instance ID
          formElementID := `1` // string | Form element ID # string | Form element ID
          limit := 250 // int64 | Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used. (optional) (default to 250) # int64 | Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used. (optional) (default to 250)
          filters := `value eq "ID01"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **value**: *eq, ne, in*  Supported composite operators: *not*  Only a single *not* may be used, and it can only be used with the `in` operator. The `not` composite operator must be used in front of the field. For example, the following is valid: `not value in (\"ID01\")` (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **value**: *eq, ne, in*  Supported composite operators: *not*  Only a single *not* may be used, and it can only be used with the `in` operator. The `not` composite operator must be used in front of the field. For example, the following is valid: `not value in (\"ID01\")` (optional)
          query := `support` // string | String that is passed to the underlying API to filter other (non-ID) fields.  For example, for access  profile data sources, this string will be passed to the access profile api and used with a \"starts with\" filter against  several fields. (optional) # string | String that is passed to the underlying API to filter other (non-ID) fields.  For example, for access  profile data sources, this string will be passed to the access profile api and used with a \"starts with\" filter against  several fields. (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CustomFormsAPI.SearchFormElementDataByElementID(context.Background(), formInstanceID, formElementID).Execute()
          //resp, r, err := apiClient.V2025.CustomFormsAPI.SearchFormElementDataByElementID(context.Background(), formInstanceID, formElementID).Limit(limit).Filters(filters).Query(query).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CustomFormsAPI.SearchFormElementDataByElementID``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SearchFormElementDataByElementID`: ListFormElementDataByElementIDResponse
          fmt.Fprintf(os.Stdout, "Response from `CustomFormsAPI.SearchFormElementDataByElementID`: %v\n", resp)
        }
- path: /form-instances
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/custom-forms#search-form-instances-by-tenant
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CustomFormsAPI.SearchFormInstancesByTenant(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.CustomFormsAPI.SearchFormInstancesByTenant(context.Background()).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CustomFormsAPI.SearchFormInstancesByTenant``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SearchFormInstancesByTenant`: []ListFormInstancesByTenantResponse
          fmt.Fprintf(os.Stdout, "Response from `CustomFormsAPI.SearchFormInstancesByTenant`: %v\n", resp)
        }
- path: /form-definitions/predefined-select-options
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/custom-forms#search-pre-defined-select-options
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CustomFormsAPI.SearchPreDefinedSelectOptions(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.CustomFormsAPI.SearchPreDefinedSelectOptions(context.Background()).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CustomFormsAPI.SearchPreDefinedSelectOptions``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SearchPreDefinedSelectOptions`: ListPredefinedSelectOptionsResponse
          fmt.Fprintf(os.Stdout, "Response from `CustomFormsAPI.SearchPreDefinedSelectOptions`: %v\n", resp)
        }
- path: /form-definitions/{formDefinitionID}/data-source
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/custom-forms#show-preview-data-source
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          formDefinitionID := `00000000-0000-0000-0000-000000000000` // string | Form definition ID # string | Form definition ID
          limit := 10 // int64 | Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used. (optional) (default to 10) # int64 | Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used. (optional) (default to 10)
          filters := `value eq "ID01"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **value**: *eq, ne, in*  Supported composite operators: *not*  Only a single *not* may be used, and it can only be used with the `in` operator. The `not` composite operator must be used in front of the field. For example, the following is valid: `not value in (\"ID01\")` (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **value**: *eq, ne, in*  Supported composite operators: *not*  Only a single *not* may be used, and it can only be used with the `in` operator. The `not` composite operator must be used in front of the field. For example, the following is valid: `not value in (\"ID01\")` (optional)
          query := `ac` // string | String that is passed to the underlying API to filter other (non-ID) fields.  For example, for access  profile data sources, this string will be passed to the access profile api and used with a \"starts with\" filter against  several fields. (optional) # string | String that is passed to the underlying API to filter other (non-ID) fields.  For example, for access  profile data sources, this string will be passed to the access profile api and used with a \"starts with\" filter against  several fields. (optional)
           formelementpreviewrequest := []byte(`{
          "dataSource" : {
            "config" : {
              "indices" : [ "identities" ],
              "query" : "*",
              "aggregationBucketField" : "attributes.cloudStatus.exact",
              "objectType" : "IDENTITY"
            },
            "dataSourceType" : "STATIC"
          }
        }`) // FormElementPreviewRequest | Body is the request payload to create a form definition dynamic schema (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CustomFormsAPI.ShowPreviewDataSource(context.Background(), formDefinitionID).Execute()
          //resp, r, err := apiClient.V2025.CustomFormsAPI.ShowPreviewDataSource(context.Background(), formDefinitionID).Limit(limit).Filters(filters).Query(query).FormElementPreviewRequest(formElementPreviewRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CustomFormsAPI.ShowPreviewDataSource``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ShowPreviewDataSource`: PreviewDataSourceResponse
          fmt.Fprintf(os.Stdout, "Response from `CustomFormsAPI.ShowPreviewDataSource`: %v\n", resp)
        }
- path: /custom-password-instructions
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/custom-password-instructions#create-custom-password-instructions
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           custompasswordinstruction := []byte(`{
          "pageContent" : "Please enter a new password. Your password must be at least 8 characters long and contain at least one number and one letter.",
          "pageId" : "change-password:enter-password",
          "locale" : "en"
        }`) // CustomPasswordInstruction | 

          
          var customPasswordInstruction v2025.CustomPasswordInstruction
          if err := json.Unmarshal(custompasswordinstruction, &customPasswordInstruction); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CustomPasswordInstructionsAPI.CreateCustomPasswordInstructions(context.Background()).XSailPointExperimental(xSailPointExperimental).CustomPasswordInstruction(customPasswordInstruction).Execute()
          //resp, r, err := apiClient.V2025.CustomPasswordInstructionsAPI.CreateCustomPasswordInstructions(context.Background()).XSailPointExperimental(xSailPointExperimental).CustomPasswordInstruction(customPasswordInstruction).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CustomPasswordInstructionsAPI.CreateCustomPasswordInstructions``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateCustomPasswordInstructions`: CustomPasswordInstruction
          fmt.Fprintf(os.Stdout, "Response from `CustomPasswordInstructionsAPI.CreateCustomPasswordInstructions`: %v\n", resp)
        }
- path: /custom-password-instructions/{pageId}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/custom-password-instructions#delete-custom-password-instructions
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          pageId := `mfa:select` // string | The page ID of custom password instructions to delete. # string | The page ID of custom password instructions to delete.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          locale := `locale_example` // string | The locale for the custom instructions, a BCP47 language tag. The default value is \\\"default\\\". (optional) # string | The locale for the custom instructions, a BCP47 language tag. The default value is \\\"default\\\". (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.CustomPasswordInstructionsAPI.DeleteCustomPasswordInstructions(context.Background(), pageId).XSailPointExperimental(xSailPointExperimental).Execute()
          //r, err := apiClient.V2025.CustomPasswordInstructionsAPI.DeleteCustomPasswordInstructions(context.Background(), pageId).XSailPointExperimental(xSailPointExperimental).Locale(locale).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CustomPasswordInstructionsAPI.DeleteCustomPasswordInstructions``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /custom-password-instructions/{pageId}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/custom-password-instructions#get-custom-password-instructions
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          pageId := `mfa:select` // string | The page ID of custom password instructions to query. # string | The page ID of custom password instructions to query.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          locale := `locale_example` // string | The locale for the custom instructions, a BCP47 language tag. The default value is \\\"default\\\". (optional) # string | The locale for the custom instructions, a BCP47 language tag. The default value is \\\"default\\\". (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CustomPasswordInstructionsAPI.GetCustomPasswordInstructions(context.Background(), pageId).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.CustomPasswordInstructionsAPI.GetCustomPasswordInstructions(context.Background(), pageId).XSailPointExperimental(xSailPointExperimental).Locale(locale).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CustomPasswordInstructionsAPI.GetCustomPasswordInstructions``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetCustomPasswordInstructions`: CustomPasswordInstruction
          fmt.Fprintf(os.Stdout, "Response from `CustomPasswordInstructionsAPI.GetCustomPasswordInstructions`: %v\n", resp)
        }
- path: /authorization/custom-user-levels
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/custom-user-levels#create-custom-user-level
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           userlevelrequest := []byte(`{
          "owner" : {
            "name" : "William Wilson",
            "id" : "2c91808568c529c60168cca6f90c1313",
            "type" : "IDENTITY"
          },
          "rightSets" : [ "idn:ui-right-set-list-read-example", "idn:ui-right-set-write-example" ],
          "name" : "Custom User Level Name",
          "description" : "This is a description of the custom user level."
        }`) // UserLevelRequest | Payload containing the details of the user level to be created.

          
          var userLevelRequest v2025.UserLevelRequest
          if err := json.Unmarshal(userlevelrequest, &userLevelRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CustomUserLevelsAPI.CreateCustomUserLevel(context.Background()).XSailPointExperimental(xSailPointExperimental).UserLevelRequest(userLevelRequest).Execute()
          //resp, r, err := apiClient.V2025.CustomUserLevelsAPI.CreateCustomUserLevel(context.Background()).XSailPointExperimental(xSailPointExperimental).UserLevelRequest(userLevelRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CustomUserLevelsAPI.CreateCustomUserLevel``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateCustomUserLevel`: UserLevelSummaryDTO
          fmt.Fprintf(os.Stdout, "Response from `CustomUserLevelsAPI.CreateCustomUserLevel`: %v\n", resp)
        }
- path: /authorization/custom-user-levels/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/custom-user-levels#delete-user-level
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          id := `6e110911-5984-491b-be74-2707980a46a7` // string | The unique identifier of the user level. # string | The unique identifier of the user level.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.CustomUserLevelsAPI.DeleteUserLevel(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //r, err := apiClient.V2025.CustomUserLevelsAPI.DeleteUserLevel(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CustomUserLevelsAPI.DeleteUserLevel``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /authorization/custom-user-levels/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/custom-user-levels#get-user-level
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          id := `6e110911-5984-491b-be74-2707980a46a7` // string | The unique identifier of the user level. # string | The unique identifier of the user level.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CustomUserLevelsAPI.GetUserLevel(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.CustomUserLevelsAPI.GetUserLevel(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CustomUserLevelsAPI.GetUserLevel``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetUserLevel`: UserLevelSummaryDTO
          fmt.Fprintf(os.Stdout, "Response from `CustomUserLevelsAPI.GetUserLevel`: %v\n", resp)
        }
- path: /authorization/authorization-assignable-right-sets
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/custom-user-levels#list-all-authorization-right-sets
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          filters := `category eq "identity"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **category**: *eq* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **category**: *eq* (optional)
          sorters := `name, -id, -category` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, category** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, category** (optional)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CustomUserLevelsAPI.ListAllAuthorizationRightSets(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.CustomUserLevelsAPI.ListAllAuthorizationRightSets(context.Background()).XSailPointExperimental(xSailPointExperimental).Filters(filters).Sorters(sorters).Limit(limit).Offset(offset).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CustomUserLevelsAPI.ListAllAuthorizationRightSets``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListAllAuthorizationRightSets`: []HierarchicalRightSet
          fmt.Fprintf(os.Stdout, "Response from `CustomUserLevelsAPI.ListAllAuthorizationRightSets`: %v\n", resp)
        }
- path: /authorization/custom-user-levels
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/custom-user-levels#list-user-levels
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          detailLevel := `detailLevel=FULL` // string | Specifies the level of detail for the user levels. (optional) # string | Specifies the level of detail for the user levels. (optional)
          filters := `name co "identity", owner co "john", status eq "active"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *co*    **owner**: *co*    **status**: *eq* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *co*    **owner**: *co*    **status**: *eq* (optional)
          sorters := `name, -created` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created** (optional)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CustomUserLevelsAPI.ListUserLevels(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.CustomUserLevelsAPI.ListUserLevels(context.Background()).XSailPointExperimental(xSailPointExperimental).DetailLevel(detailLevel).Filters(filters).Sorters(sorters).Limit(limit).Offset(offset).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CustomUserLevelsAPI.ListUserLevels``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListUserLevels`: []UserLevelSummaryDTO
          fmt.Fprintf(os.Stdout, "Response from `CustomUserLevelsAPI.ListUserLevels`: %v\n", resp)
        }
- path: /authorization/custom-user-levels/{id}/publish
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/custom-user-levels#publish-custom-user-level
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          id := `6e110911-5984-491b-be74-2707980a46a7` // string | The unique identifier of the user level to publish. # string | The unique identifier of the user level to publish.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CustomUserLevelsAPI.PublishCustomUserLevel(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.CustomUserLevelsAPI.PublishCustomUserLevel(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CustomUserLevelsAPI.PublishCustomUserLevel``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PublishCustomUserLevel`: UserLevelPublishSummary
          fmt.Fprintf(os.Stdout, "Response from `CustomUserLevelsAPI.PublishCustomUserLevel`: %v\n", resp)
        }
- path: /authorization/custom-user-levels/{id}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/custom-user-levels#update-user-level
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          id := `6e110911-5984-491b-be74-2707980a46a7` // string | The unique identifier of the user level. # string | The unique identifier of the user level.
           jsonpatch := []byte(`{
          "operations" : [ {
            "op" : "replace",
            "path" : "/description",
            "value" : "New description"
          }, {
            "op" : "replace",
            "path" : "/description",
            "value" : "New description"
          } ]
        }`) // JsonPatch | JSON Patch payload for updating the user level.

          
          var jsonPatch v2025.JsonPatch
          if err := json.Unmarshal(jsonpatch, &jsonPatch); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.CustomUserLevelsAPI.UpdateUserLevel(context.Background(), id).XSailPointExperimental(xSailPointExperimental).JsonPatch(jsonPatch).Execute()
          //resp, r, err := apiClient.V2025.CustomUserLevelsAPI.UpdateUserLevel(context.Background(), id).XSailPointExperimental(xSailPointExperimental).JsonPatch(jsonPatch).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `CustomUserLevelsAPI.UpdateUserLevel``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateUserLevel`: UserLevelSummaryDTO
          fmt.Fprintf(os.Stdout, "Response from `CustomUserLevelsAPI.UpdateUserLevel`: %v\n", resp)
        }
- path: /data-segments
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/data-segmentation#create-data-segment
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           datasegment := []byte(``) // DataSegment | 

          
          var dataSegment v2025.DataSegment
          if err := json.Unmarshal(datasegment, &dataSegment); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.DataSegmentationAPI.CreateDataSegment(context.Background()).DataSegment(dataSegment).Execute()
          //resp, r, err := apiClient.V2025.DataSegmentationAPI.CreateDataSegment(context.Background()).DataSegment(dataSegment).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `DataSegmentationAPI.CreateDataSegment``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateDataSegment`: DataSegment
          fmt.Fprintf(os.Stdout, "Response from `DataSegmentationAPI.CreateDataSegment`: %v\n", resp)
        }
- path: /data-segments/{segmentId}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/data-segmentation#delete-data-segment
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f943-47e9-4562-b5bb-8424a56397d8` // string | The segment ID to delete. # string | The segment ID to delete.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          published := false // bool | This determines which version of the segment to delete (optional) (default to false) # bool | This determines which version of the segment to delete (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.DataSegmentationAPI.DeleteDataSegment(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //r, err := apiClient.V2025.DataSegmentationAPI.DeleteDataSegment(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Published(published).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `DataSegmentationAPI.DeleteDataSegment``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /data-segments/{segmentId}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/data-segmentation#get-data-segment
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f943-47e9-4562-b5bb-8424a56397d8` // string | The segment ID to retrieve. # string | The segment ID to retrieve.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.DataSegmentationAPI.GetDataSegment(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.DataSegmentationAPI.GetDataSegment(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `DataSegmentationAPI.GetDataSegment``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetDataSegment`: DataSegment
          fmt.Fprintf(os.Stdout, "Response from `DataSegmentationAPI.GetDataSegment`: %v\n", resp)
        }
- path: /data-segments/membership/{identityId}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/data-segmentation#get-data-segment-identity-membership
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          identityId := `ef38f943-47e9-4562-b5bb-8424a56397d8` // string | The identity ID to retrieve the segments they are in. # string | The identity ID to retrieve the segments they are in.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.DataSegmentationAPI.GetDataSegmentIdentityMembership(context.Background(), identityId).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.DataSegmentationAPI.GetDataSegmentIdentityMembership(context.Background(), identityId).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `DataSegmentationAPI.GetDataSegmentIdentityMembership``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetDataSegmentIdentityMembership`: map[string]interface{}
          fmt.Fprintf(os.Stdout, "Response from `DataSegmentationAPI.GetDataSegmentIdentityMembership`: %v\n", resp)
        }
- path: /data-segments/user-enabled/{identityId}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/data-segmentation#get-data-segmentation-enabled-for-user
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          identityId := `ef38f943-47e9-4562-b5bb-8424a56397d8` // string | The identity ID to retrieve if segmentation is enabled for the identity. # string | The identity ID to retrieve if segmentation is enabled for the identity.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.DataSegmentationAPI.GetDataSegmentationEnabledForUser(context.Background(), identityId).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.DataSegmentationAPI.GetDataSegmentationEnabledForUser(context.Background(), identityId).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `DataSegmentationAPI.GetDataSegmentationEnabledForUser``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetDataSegmentationEnabledForUser`: bool
          fmt.Fprintf(os.Stdout, "Response from `DataSegmentationAPI.GetDataSegmentationEnabledForUser`: %v\n", resp)
        }
- path: /data-segments
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/data-segmentation#list-data-segments
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          enabled := true // bool | This boolean indicates whether the segment is currently active. Inactive segments have no effect. (optional) (default to true) # bool | This boolean indicates whether the segment is currently active. Inactive segments have no effect. (optional) (default to true)
          unique := false // bool | This returns only one record if set to true and that would be the published record if exists. (optional) (default to false) # bool | This returns only one record if set to true and that would be the published record if exists. (optional) (default to false)
          published := true // bool | This boolean indicates whether the segment is being applied to the accounts. If unpublished its being actively modified until published (optional) (default to true) # bool | This boolean indicates whether the segment is being applied to the accounts. If unpublished its being actively modified until published (optional) (default to true)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `name eq ""` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, sw*  **name**: *eq, in, sw* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, sw*  **name**: *eq, in, sw* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.DataSegmentationAPI.ListDataSegments(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.DataSegmentationAPI.ListDataSegments(context.Background()).XSailPointExperimental(xSailPointExperimental).Enabled(enabled).Unique(unique).Published(published).Limit(limit).Offset(offset).Count(count).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `DataSegmentationAPI.ListDataSegments``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListDataSegments`: []DataSegment
          fmt.Fprintf(os.Stdout, "Response from `DataSegmentationAPI.ListDataSegments`: %v\n", resp)
        }
- path: /data-segments/{segmentId}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/data-segmentation#patch-data-segment
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f943-47e9-4562-b5bb-8424a56397d8` // string | The segment ID to modify. # string | The segment ID to modify.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          requestbody := []byte(`[{op=replace, path=/memberFilter, value={expression={operator=AND, children=[{operator=EQUALS, attribute=location, value={type=STRING, value=Philadelphia}}, {operator=EQUALS, attribute=department, value={type=STRING, value=HR}}]}}}]`) // []map[string]interface{} | A list of segment update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * membership * memberFilter * memberSelection * scopes * enabled 

          
          var requestBody []v2025.RequestBody
          if err := json.Unmarshal(requestbody, &requestBody); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.DataSegmentationAPI.PatchDataSegment(context.Background(), id).XSailPointExperimental(xSailPointExperimental).RequestBody(requestBody).Execute()
          //resp, r, err := apiClient.V2025.DataSegmentationAPI.PatchDataSegment(context.Background(), id).XSailPointExperimental(xSailPointExperimental).RequestBody(requestBody).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `DataSegmentationAPI.PatchDataSegment``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchDataSegment`: DataSegment
          fmt.Fprintf(os.Stdout, "Response from `DataSegmentationAPI.PatchDataSegment`: %v\n", resp)
        }
- path: /data-segments/{segmentId}
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/data-segmentation#publish-data-segment
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          requestbody := []byte(``) // []string | A list of segment ids that you wish to publish
          publishAll := true // bool | This flag decides whether you want to publish all unpublished or a list of specific segment ids (optional) (default to true) # bool | This flag decides whether you want to publish all unpublished or a list of specific segment ids (optional) (default to true)

          
          var requestBody []v2025.RequestBody
          if err := json.Unmarshal(requestbody, &requestBody); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.DataSegmentationAPI.PublishDataSegment(context.Background()).XSailPointExperimental(xSailPointExperimental).RequestBody(requestBody).Execute()
          //r, err := apiClient.V2025.DataSegmentationAPI.PublishDataSegment(context.Background()).XSailPointExperimental(xSailPointExperimental).RequestBody(requestBody).PublishAll(publishAll).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `DataSegmentationAPI.PublishDataSegment``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /roles/{roleId}/dimensions
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/dimensions#create-dimension
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          roleId := `6603fba3004f43c687610a29195252ce` // string | Parent Role Id of the dimension. # string | Parent Role Id of the dimension.
           dimension := []byte(`{
          "owner" : {
            "name" : "support",
            "id" : "2c9180a46faadee4016fb4e018c20639",
            "type" : "IDENTITY"
          },
          "entitlements" : [ {
            "name" : "CN=entitlement.490efde5,OU=OrgCo,OU=ServiceDept,DC=HQAD,DC=local",
            "id" : "2c91809773dee32014e13e122092014e",
            "type" : "ENTITLEMENT"
          }, {
            "name" : "CN=entitlement.490efde5,OU=OrgCo,OU=ServiceDept,DC=HQAD,DC=local",
            "id" : "2c91809773dee32014e13e122092014e",
            "type" : "ENTITLEMENT"
          } ],
          "accessProfiles" : [ {
            "name" : "Access Profile 2567",
            "id" : "ff808081751e6e129f1518161919ecca",
            "type" : "ACCESS_PROFILE"
          }, {
            "name" : "Access Profile 2567",
            "id" : "ff808081751e6e129f1518161919ecca",
            "type" : "ACCESS_PROFILE"
          } ],
          "created" : "2021-03-01T22:32:58.104Z",
          "name" : "Dimension 2567",
          "modified" : "2021-03-02T20:22:28.104Z",
          "description" : "Urna amet cursus pellentesque nisl orci maximus lorem nisl euismod fusce morbi placerat adipiscing maecenas nisi tristique et metus et lacus sed morbi nunc nisl maximus magna arcu varius sollicitudin elementum enim maecenas nisi id ipsum tempus fusce diam ipsum tortor.",
          "id" : "2c918086749d78830174a1a40e121518",
          "membership" : {
            "criteria" : {
              "stringValue" : "carlee.cert1c9f9b6fd@mailinator.com",
              "children" : [ {
                "stringValue" : "carlee.cert1c9f9b6fd@mailinator.com",
                "children" : [ {
                  "stringValue" : "carlee.cert1c9f9b6fd@mailinator.com",
                  "operation" : "EQUALS",
                  "key" : {
                    "property" : "attribute.email",
                    "type" : "IDENTITY"
                  }
                }, {
                  "stringValue" : "carlee.cert1c9f9b6fd@mailinator.com",
                  "operation" : "EQUALS",
                  "key" : {
                    "property" : "attribute.email",
                    "type" : "IDENTITY"
                  }
                } ],
                "operation" : "EQUALS",
                "key" : {
                  "property" : "attribute.email",
                  "type" : "IDENTITY"
                }
              }, {
                "stringValue" : "carlee.cert1c9f9b6fd@mailinator.com",
                "children" : [ {
                  "stringValue" : "carlee.cert1c9f9b6fd@mailinator.com",
                  "operation" : "EQUALS",
                  "key" : {
                    "property" : "attribute.email",
                    "type" : "IDENTITY"
                  }
                }, {
                  "stringValue" : "carlee.cert1c9f9b6fd@mailinator.com",
                  "operation" : "EQUALS",
                  "key" : {
                    "property" : "attribute.email",
                    "type" : "IDENTITY"
                  }
                } ],
                "operation" : "EQUALS",
                "key" : {
                  "property" : "attribute.email",
                  "type" : "IDENTITY"
                }
              } ],
              "operation" : "EQUALS",
              "key" : {
                "property" : "attribute.email",
                "type" : "IDENTITY"
              }
            },
            "type" : "STANDARD"
          },
          "parentId" : "2c918086749d78830174a1a40e121518"
        }`) // Dimension | 

          
          var dimension v2025.Dimension
          if err := json.Unmarshal(dimension, &dimension); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.DimensionsAPI.CreateDimension(context.Background(), roleId).Dimension(dimension).Execute()
          //resp, r, err := apiClient.V2025.DimensionsAPI.CreateDimension(context.Background(), roleId).Dimension(dimension).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `DimensionsAPI.CreateDimension``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateDimension`: Dimension
          fmt.Fprintf(os.Stdout, "Response from `DimensionsAPI.CreateDimension`: %v\n", resp)
        }
- path: /roles/{roleId}/dimensions/bulk-delete
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/dimensions#delete-bulk-dimensions
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          roleId := `6603fba3004f43c687610a29195252ce` // string | Parent Role Id of the dimensions. # string | Parent Role Id of the dimensions.
           dimensionbulkdeleterequest := []byte(`{
          "dimensionIds" : [ "2c9180847812e0b1017817051919ecca", "2c9180887812e0b201781e129f151816" ]
        }`) // DimensionBulkDeleteRequest | 

          
          var dimensionBulkDeleteRequest v2025.DimensionBulkDeleteRequest
          if err := json.Unmarshal(dimensionbulkdeleterequest, &dimensionBulkDeleteRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.DimensionsAPI.DeleteBulkDimensions(context.Background(), roleId).DimensionBulkDeleteRequest(dimensionBulkDeleteRequest).Execute()
          //resp, r, err := apiClient.V2025.DimensionsAPI.DeleteBulkDimensions(context.Background(), roleId).DimensionBulkDeleteRequest(dimensionBulkDeleteRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `DimensionsAPI.DeleteBulkDimensions``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `DeleteBulkDimensions`: TaskResultDto
          fmt.Fprintf(os.Stdout, "Response from `DimensionsAPI.DeleteBulkDimensions`: %v\n", resp)
        }
- path: /roles/{roleId}/dimensions/{dimensionId}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/dimensions#delete-dimension
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          roleId := `6603fba3004f43c687610a29195252ce` // string | Parent Role Id of the dimension. # string | Parent Role Id of the dimension.
          dimensionId := `2c9180835d191a86015d28455b4a2329` // string | Id of the Dimension # string | Id of the Dimension

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.DimensionsAPI.DeleteDimension(context.Background(), roleId, dimensionId).Execute()
          //r, err := apiClient.V2025.DimensionsAPI.DeleteDimension(context.Background(), roleId, dimensionId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `DimensionsAPI.DeleteDimension``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /roles/{roleId}/dimensions/{dimensionId}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/dimensions#get-dimension
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          roleId := `6603fba3004f43c687610a29195252ce` // string | Parent Role Id of the dimension. # string | Parent Role Id of the dimension.
          dimensionId := `2c9180835d191a86015d28455b4a2329` // string | Id of the Dimension # string | Id of the Dimension

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.DimensionsAPI.GetDimension(context.Background(), roleId, dimensionId).Execute()
          //resp, r, err := apiClient.V2025.DimensionsAPI.GetDimension(context.Background(), roleId, dimensionId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `DimensionsAPI.GetDimension``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetDimension`: Dimension
          fmt.Fprintf(os.Stdout, "Response from `DimensionsAPI.GetDimension`: %v\n", resp)
        }
- path: /roles/{roleId}/dimensions/{dimensionId}/entitlements
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/dimensions#get-dimension-entitlements
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          roleId := `6603fba3004f43c687610a29195252ce` // string | Parent Role Id of the dimension. # string | Parent Role Id of the dimension.
          dimensionId := `2c9180835d191a86015d28455b4a2329` // string | Id of the Dimension # string | Id of the Dimension
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `attribute eq "memberOf"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **attribute**: *eq, sw*  **value**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **source.id**: *eq, in* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **attribute**: *eq, sw*  **value**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **source.id**: *eq, in* (optional)
          sorters := `name,-modified` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, attribute, value, created, modified** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, attribute, value, created, modified** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.DimensionsAPI.GetDimensionEntitlements(context.Background(), roleId, dimensionId).Execute()
          //resp, r, err := apiClient.V2025.DimensionsAPI.GetDimensionEntitlements(context.Background(), roleId, dimensionId).Limit(limit).Offset(offset).Count(count).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `DimensionsAPI.GetDimensionEntitlements``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetDimensionEntitlements`: []Entitlement
          fmt.Fprintf(os.Stdout, "Response from `DimensionsAPI.GetDimensionEntitlements`: %v\n", resp)
        }
- path: /roles/{roleId}/dimensions/{dimensionId}/access-profiles
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/dimensions#list-dimension-access-profiles
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          roleId := `6603fba3004f43c687610a29195252ce` // string | Parent Role Id of the dimension. # string | Parent Role Id of the dimension.
          dimensionId := `2c9180835d191a86015d28455b4a2329` // string | Id of the Dimension # string | Id of the Dimension
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `source.id eq "2c91808982f979270182f99e386d00fa"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **source.id**: *eq, in* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **source.id**: *eq, in* (optional)
          sorters := `name,-modified` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.DimensionsAPI.ListDimensionAccessProfiles(context.Background(), roleId, dimensionId).Execute()
          //resp, r, err := apiClient.V2025.DimensionsAPI.ListDimensionAccessProfiles(context.Background(), roleId, dimensionId).Limit(limit).Offset(offset).Count(count).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `DimensionsAPI.ListDimensionAccessProfiles``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListDimensionAccessProfiles`: []AccessProfile
          fmt.Fprintf(os.Stdout, "Response from `DimensionsAPI.ListDimensionAccessProfiles`: %v\n", resp)
        }
- path: /roles/{roleId}/dimensions
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/dimensions#list-dimensions
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          roleId := `6603fba3004f43c687610a29195252ce` // string | Parent Role Id of the dimension. # string | Parent Role Id of the dimension.
          forSubadmin := `5168015d32f890ca15812c9180835d2e` // string | If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN Identity. The value of the parameter is either an Identity ID, or the special value **me**, which is shorthand for the calling Identity's ID. A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an Identity that is not a subadmin. (optional) # string | If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN Identity. The value of the parameter is either an Identity ID, or the special value **me**, which is shorthand for the calling Identity's ID. A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an Identity that is not a subadmin. (optional)
          limit := 50 // int32 | Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 50) # int32 | Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 50)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `id eq '2c918086749d78830174a1a40e121518'` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in* (optional)
          sorters := `name,-modified` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.DimensionsAPI.ListDimensions(context.Background(), roleId).Execute()
          //resp, r, err := apiClient.V2025.DimensionsAPI.ListDimensions(context.Background(), roleId).ForSubadmin(forSubadmin).Limit(limit).Offset(offset).Count(count).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `DimensionsAPI.ListDimensions``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListDimensions`: []Dimension
          fmt.Fprintf(os.Stdout, "Response from `DimensionsAPI.ListDimensions`: %v\n", resp)
        }
- path: /roles/{roleId}/dimensions/{dimensionId}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/dimensions#patch-dimension
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          roleId := `6603fba3004f43c687610a29195252ce` // string | Parent Role Id of the dimension. # string | Parent Role Id of the dimension.
          dimensionId := `2c9180835d191a86015d28455b4a2329` // string | Id of the Dimension # string | Id of the Dimension
          jsonpatchoperation := []byte(`[{op=replace, path=/description, value=Test Description}, {op=replace, path=/name, value=new name}]`) // []JsonPatchOperation | 

          
          var jsonPatchOperation []v2025.JsonPatchOperation
          if err := json.Unmarshal(jsonpatchoperation, &jsonPatchOperation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.DimensionsAPI.PatchDimension(context.Background(), roleId, dimensionId).JsonPatchOperation(jsonPatchOperation).Execute()
          //resp, r, err := apiClient.V2025.DimensionsAPI.PatchDimension(context.Background(), roleId, dimensionId).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `DimensionsAPI.PatchDimension``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchDimension`: Dimension
          fmt.Fprintf(os.Stdout, "Response from `DimensionsAPI.PatchDimension`: %v\n", resp)
        }
- path: /entitlements/{id}/access-model-metadata/{attributeKey}/values/{attributeValue}
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/entitlements#create-access-model-metadata-for-entitlement
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808c74ff913f0175097daa9d59cd` // string | The entitlement id. # string | The entitlement id.
          attributeKey := `iscPrivacy` // string | Technical name of the Attribute. # string | Technical name of the Attribute.
          attributeValue := `public` // string | Technical name of the Attribute Value. # string | Technical name of the Attribute Value.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.EntitlementsAPI.CreateAccessModelMetadataForEntitlement(context.Background(), id, attributeKey, attributeValue).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.EntitlementsAPI.CreateAccessModelMetadataForEntitlement(context.Background(), id, attributeKey, attributeValue).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `EntitlementsAPI.CreateAccessModelMetadataForEntitlement``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateAccessModelMetadataForEntitlement`: Entitlement
          fmt.Fprintf(os.Stdout, "Response from `EntitlementsAPI.CreateAccessModelMetadataForEntitlement`: %v\n", resp)
        }
- path: /entitlements/{id}/access-model-metadata/{attributeKey}/values/{attributeValue}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/entitlements#delete-access-model-metadata-from-entitlement
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808c74ff913f0175097daa9d59cd` // string | The entitlement id. # string | The entitlement id.
          attributeKey := `iscPrivacy` // string | Technical name of the Attribute. # string | Technical name of the Attribute.
          attributeValue := `public` // string | Technical name of the Attribute Value. # string | Technical name of the Attribute Value.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.EntitlementsAPI.DeleteAccessModelMetadataFromEntitlement(context.Background(), id, attributeKey, attributeValue).XSailPointExperimental(xSailPointExperimental).Execute()
          //r, err := apiClient.V2025.EntitlementsAPI.DeleteAccessModelMetadataFromEntitlement(context.Background(), id, attributeKey, attributeValue).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `EntitlementsAPI.DeleteAccessModelMetadataFromEntitlement``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /entitlements/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/entitlements#get-entitlement
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808874ff91550175097daaec161c` // string | The entitlement ID # string | The entitlement ID
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.EntitlementsAPI.GetEntitlement(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.EntitlementsAPI.GetEntitlement(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `EntitlementsAPI.GetEntitlement``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetEntitlement`: Entitlement
          fmt.Fprintf(os.Stdout, "Response from `EntitlementsAPI.GetEntitlement`: %v\n", resp)
        }
- path: /entitlements/{id}/entitlement-request-config
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/entitlements#get-entitlement-request-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808874ff91550175097daaec161c` // string | Entitlement Id # string | Entitlement Id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.EntitlementsAPI.GetEntitlementRequestConfig(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.EntitlementsAPI.GetEntitlementRequestConfig(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `EntitlementsAPI.GetEntitlementRequestConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetEntitlementRequestConfig`: EntitlementRequestConfig
          fmt.Fprintf(os.Stdout, "Response from `EntitlementsAPI.GetEntitlementRequestConfig`: %v\n", resp)
        }
- path: /entitlements/aggregate/sources/{id}
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/entitlements#import-entitlements-by-source
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | Source Id # string | Source Id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          csvFile := BINARY_DATA_HERE // *os.File | The CSV file containing the source entitlements to aggregate. (optional) # *os.File | The CSV file containing the source entitlements to aggregate. (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.EntitlementsAPI.ImportEntitlementsBySource(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.EntitlementsAPI.ImportEntitlementsBySource(context.Background(), id).XSailPointExperimental(xSailPointExperimental).CsvFile(csvFile).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `EntitlementsAPI.ImportEntitlementsBySource``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ImportEntitlementsBySource`: LoadEntitlementTask
          fmt.Fprintf(os.Stdout, "Response from `EntitlementsAPI.ImportEntitlementsBySource`: %v\n", resp)
        }
- path: /entitlements/{id}/children
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/entitlements#list-entitlement-children
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808874ff91550175097daaec161c` // string | Entitlement Id # string | Entitlement Id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          sorters := `name,-modified` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, type, attribute, value, source.id** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, type, attribute, value, source.id** (optional)
          filters := `attribute eq "memberOf"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*  **type**: *eq, in*  **attribute**: *eq, in*  **value**: *eq, in, sw*  **source.id**: *eq, in*  **requestable**: *eq*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*  **type**: *eq, in*  **attribute**: *eq, in*  **value**: *eq, in, sw*  **source.id**: *eq, in*  **requestable**: *eq*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.EntitlementsAPI.ListEntitlementChildren(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.EntitlementsAPI.ListEntitlementChildren(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Limit(limit).Offset(offset).Count(count).Sorters(sorters).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `EntitlementsAPI.ListEntitlementChildren``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListEntitlementChildren`: []Entitlement
          fmt.Fprintf(os.Stdout, "Response from `EntitlementsAPI.ListEntitlementChildren`: %v\n", resp)
        }
- path: /entitlements/{id}/parents
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/entitlements#list-entitlement-parents
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808c74ff913f0175097daa9d59cd` // string | Entitlement Id # string | Entitlement Id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          sorters := `name,-modified` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, type, attribute, value, source.id** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, type, attribute, value, source.id** (optional)
          filters := `attribute eq "memberOf"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*  **type**: *eq, in*  **attribute**: *eq, in*  **value**: *eq, in, sw*  **source.id**: *eq, in*  **requestable**: *eq*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*  **type**: *eq, in*  **attribute**: *eq, in*  **value**: *eq, in, sw*  **source.id**: *eq, in*  **requestable**: *eq*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.EntitlementsAPI.ListEntitlementParents(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.EntitlementsAPI.ListEntitlementParents(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Limit(limit).Offset(offset).Count(count).Sorters(sorters).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `EntitlementsAPI.ListEntitlementParents``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListEntitlementParents`: []Entitlement
          fmt.Fprintf(os.Stdout, "Response from `EntitlementsAPI.ListEntitlementParents`: %v\n", resp)
        }
- path: /entitlements
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/entitlements#list-entitlements
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          accountId := `ef38f94347e94562b5bb8424a56397d8` // string | The account ID. If specified, returns only entitlements associated with the given Account. Cannot be specified with the **filters**, **segmented-for-identity**, **for-segment-ids**, or **include-unsegmented** param(s). (optional) # string | The account ID. If specified, returns only entitlements associated with the given Account. Cannot be specified with the **filters**, **segmented-for-identity**, **for-segment-ids**, or **include-unsegmented** param(s). (optional)
          segmentedForIdentity := `e554098913544630b5985e9042f5e44b` // string | If present and not empty, additionally filters Entitlements to those which are assigned to the Segment(s) which are visible to the Identity with the specified ID. Cannot be specified with the **account-id** or **for-segment-ids** param(s). It is also illegal to specify a value that refers to a different user's Identity. (optional) # string | If present and not empty, additionally filters Entitlements to those which are assigned to the Segment(s) which are visible to the Identity with the specified ID. Cannot be specified with the **account-id** or **for-segment-ids** param(s). It is also illegal to specify a value that refers to a different user's Identity. (optional)
          forSegmentIds := `041727d4-7d95-4779-b891-93cf41e98249,a378c9fa-bae5-494c-804e-a1e30f69f649` // string | If present and not empty, additionally filters Access Profiles to those which are assigned to the Segment(s) with the specified IDs. Cannot be specified with the **account-id** or **segmented-for-identity** param(s). (optional) # string | If present and not empty, additionally filters Access Profiles to those which are assigned to the Segment(s) with the specified IDs. Cannot be specified with the **account-id** or **segmented-for-identity** param(s). (optional)
          includeUnsegmented := true // bool | Whether or not the response list should contain unsegmented Entitlements. If **for-segment-ids** and **segmented-for-identity** are both absent or empty, specifying **include-unsegmented=false** results in an error. (optional) (default to true) # bool | Whether or not the response list should contain unsegmented Entitlements. If **for-segment-ids** and **segmented-for-identity** are both absent or empty, specifying **include-unsegmented=false** results in an error. (optional) (default to true)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          sorters := `name,-modified` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, type, attribute, value, source.id, requestable** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, type, attribute, value, source.id, requestable** (optional)
          filters := `attribute eq "memberOf"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*  **type**: *eq, in*  **attribute**: *eq, in*  **value**: *eq, in, sw*  **source.id**: *eq, in*  **requestable**: *eq*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*  **type**: *eq, in*  **attribute**: *eq, in*  **value**: *eq, in, sw*  **source.id**: *eq, in*  **requestable**: *eq*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.EntitlementsAPI.ListEntitlements(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.EntitlementsAPI.ListEntitlements(context.Background()).XSailPointExperimental(xSailPointExperimental).AccountId(accountId).SegmentedForIdentity(segmentedForIdentity).ForSegmentIds(forSegmentIds).IncludeUnsegmented(includeUnsegmented).Offset(offset).Limit(limit).Count(count).Sorters(sorters).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `EntitlementsAPI.ListEntitlements``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListEntitlements`: []Entitlement
          fmt.Fprintf(os.Stdout, "Response from `EntitlementsAPI.ListEntitlements`: %v\n", resp)
        }
- path: /entitlements/{id}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/entitlements#patch-entitlement
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808a7813090a017814121e121518` // string | ID of the entitlement to patch # string | ID of the entitlement to patch
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          jsonpatchoperation := []byte(`[{op=replace, path=/requestable, value=true}, {op=replace, path=/privileged, value=true}]`) // []JsonPatchOperation |  (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.EntitlementsAPI.PatchEntitlement(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.EntitlementsAPI.PatchEntitlement(context.Background(), id).XSailPointExperimental(xSailPointExperimental).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `EntitlementsAPI.PatchEntitlement``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchEntitlement`: Entitlement
          fmt.Fprintf(os.Stdout, "Response from `EntitlementsAPI.PatchEntitlement`: %v\n", resp)
        }
- path: /entitlements/{id}/entitlement-request-config
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/entitlements#put-entitlement-request-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808a7813090a017814121e121518` // string | Entitlement ID # string | Entitlement ID
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           entitlementrequestconfig := []byte(`{
          "accessRequestConfig" : {
            "denialCommentRequired" : false,
            "approvalSchemes" : [ {
              "approverId" : "e3eab852-8315-467f-9de7-70eda97f63c8",
              "approverType" : "GOVERNANCE_GROUP"
            }, {
              "approverId" : "e3eab852-8315-467f-9de7-70eda97f63c8",
              "approverType" : "GOVERNANCE_GROUP"
            } ],
            "reauthorizationRequired" : false,
            "requestCommentRequired" : true
          },
          "revocationRequestConfig" : {
            "approvalSchemes" : [ {
              "approverId" : "e3eab852-8315-467f-9de7-70eda97f63c8",
              "approverType" : "GOVERNANCE_GROUP"
            }, {
              "approverId" : "e3eab852-8315-467f-9de7-70eda97f63c8",
              "approverType" : "GOVERNANCE_GROUP"
            } ]
          }
        }`) // EntitlementRequestConfig | 

          
          var entitlementRequestConfig v2025.EntitlementRequestConfig
          if err := json.Unmarshal(entitlementrequestconfig, &entitlementRequestConfig); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.EntitlementsAPI.PutEntitlementRequestConfig(context.Background(), id).XSailPointExperimental(xSailPointExperimental).EntitlementRequestConfig(entitlementRequestConfig).Execute()
          //resp, r, err := apiClient.V2025.EntitlementsAPI.PutEntitlementRequestConfig(context.Background(), id).XSailPointExperimental(xSailPointExperimental).EntitlementRequestConfig(entitlementRequestConfig).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `EntitlementsAPI.PutEntitlementRequestConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PutEntitlementRequestConfig`: EntitlementRequestConfig
          fmt.Fprintf(os.Stdout, "Response from `EntitlementsAPI.PutEntitlementRequestConfig`: %v\n", resp)
        }
- path: /entitlements/reset/sources/{id}
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/entitlements#reset-source-entitlements
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808a7813090a017814121919ecca` // string | ID of source for the entitlement reset # string | ID of source for the entitlement reset
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.EntitlementsAPI.ResetSourceEntitlements(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.EntitlementsAPI.ResetSourceEntitlements(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `EntitlementsAPI.ResetSourceEntitlements``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ResetSourceEntitlements`: EntitlementSourceResetBaseReferenceDto
          fmt.Fprintf(os.Stdout, "Response from `EntitlementsAPI.ResetSourceEntitlements`: %v\n", resp)
        }
- path: /entitlements/bulk-update
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/entitlements#update-entitlements-in-bulk
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           entitlementbulkupdaterequest := []byte(`{
          "entitlementIds" : [ "2c91808a7624751a01762f19d665220d", "2c91808a7624751a01762f19d67c220e", "2c91808a7624751a01762f19d692220f" ],
          "jsonPatch" : [ {
            "op" : "replace",
            "path" : "/privileged",
            "value" : false
          }, {
            "op" : "replace",
            "path" : "/requestable",
            "value" : false
          } ]
        }`) // EntitlementBulkUpdateRequest | 

          
          var entitlementBulkUpdateRequest v2025.EntitlementBulkUpdateRequest
          if err := json.Unmarshal(entitlementbulkupdaterequest, &entitlementBulkUpdateRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.EntitlementsAPI.UpdateEntitlementsInBulk(context.Background()).XSailPointExperimental(xSailPointExperimental).EntitlementBulkUpdateRequest(entitlementBulkUpdateRequest).Execute()
          //r, err := apiClient.V2025.EntitlementsAPI.UpdateEntitlementsInBulk(context.Background()).XSailPointExperimental(xSailPointExperimental).EntitlementBulkUpdateRequest(entitlementBulkUpdateRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `EntitlementsAPI.UpdateEntitlementsInBulk``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /auth-org/network-config
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/global-tenant-security-settings#create-auth-org-network-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           networkconfiguration := []byte(`{
          "range" : [ "1.3.7.2", "255.255.255.252/30" ],
          "whitelisted" : true,
          "geolocation" : [ "CA", "FR", "HT" ]
        }`) // NetworkConfiguration | Network configuration creation request body.   The following constraints ensure the request body conforms to certain logical guidelines, which are:   1. Each string element in the range array must be a valid ip address or ip subnet mask.   2. Each string element in the geolocation array must be 2 characters, and they can only be uppercase letters.

          
          var networkConfiguration v2025.NetworkConfiguration
          if err := json.Unmarshal(networkconfiguration, &networkConfiguration); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.GlobalTenantSecuritySettingsAPI.CreateAuthOrgNetworkConfig(context.Background()).NetworkConfiguration(networkConfiguration).Execute()
          //resp, r, err := apiClient.V2025.GlobalTenantSecuritySettingsAPI.CreateAuthOrgNetworkConfig(context.Background()).NetworkConfiguration(networkConfiguration).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `GlobalTenantSecuritySettingsAPI.CreateAuthOrgNetworkConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateAuthOrgNetworkConfig`: NetworkConfiguration
          fmt.Fprintf(os.Stdout, "Response from `GlobalTenantSecuritySettingsAPI.CreateAuthOrgNetworkConfig`: %v\n", resp)
        }
- path: /auth-org/lockout-config
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/global-tenant-security-settings#get-auth-org-lockout-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.GlobalTenantSecuritySettingsAPI.GetAuthOrgLockoutConfig(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.GlobalTenantSecuritySettingsAPI.GetAuthOrgLockoutConfig(context.Background()).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `GlobalTenantSecuritySettingsAPI.GetAuthOrgLockoutConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetAuthOrgLockoutConfig`: LockoutConfiguration
          fmt.Fprintf(os.Stdout, "Response from `GlobalTenantSecuritySettingsAPI.GetAuthOrgLockoutConfig`: %v\n", resp)
        }
- path: /auth-org/network-config
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/global-tenant-security-settings#get-auth-org-network-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.GlobalTenantSecuritySettingsAPI.GetAuthOrgNetworkConfig(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.GlobalTenantSecuritySettingsAPI.GetAuthOrgNetworkConfig(context.Background()).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `GlobalTenantSecuritySettingsAPI.GetAuthOrgNetworkConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetAuthOrgNetworkConfig`: NetworkConfiguration
          fmt.Fprintf(os.Stdout, "Response from `GlobalTenantSecuritySettingsAPI.GetAuthOrgNetworkConfig`: %v\n", resp)
        }
- path: /auth-org/service-provider-config
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/global-tenant-security-settings#get-auth-org-service-provider-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.GlobalTenantSecuritySettingsAPI.GetAuthOrgServiceProviderConfig(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.GlobalTenantSecuritySettingsAPI.GetAuthOrgServiceProviderConfig(context.Background()).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `GlobalTenantSecuritySettingsAPI.GetAuthOrgServiceProviderConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetAuthOrgServiceProviderConfig`: ServiceProviderConfiguration
          fmt.Fprintf(os.Stdout, "Response from `GlobalTenantSecuritySettingsAPI.GetAuthOrgServiceProviderConfig`: %v\n", resp)
        }
- path: /auth-org/session-config
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/global-tenant-security-settings#get-auth-org-session-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.GlobalTenantSecuritySettingsAPI.GetAuthOrgSessionConfig(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.GlobalTenantSecuritySettingsAPI.GetAuthOrgSessionConfig(context.Background()).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `GlobalTenantSecuritySettingsAPI.GetAuthOrgSessionConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetAuthOrgSessionConfig`: SessionConfiguration
          fmt.Fprintf(os.Stdout, "Response from `GlobalTenantSecuritySettingsAPI.GetAuthOrgSessionConfig`: %v\n", resp)
        }
- path: /auth-org/lockout-config
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/global-tenant-security-settings#patch-auth-org-lockout-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          jsonpatchoperation := []byte(`[{op=replace, path=/maximumAttempts, value=7,}, {op=add, path=/lockoutDuration, value=35}]`) // []JsonPatchOperation | A list of auth org lockout configuration update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Ensures that the patched Lockout Config conforms to certain logical guidelines, which are:   `1. maximumAttempts >= 1 && maximumAttempts <= 15   2. lockoutDuration >= 5 && lockoutDuration <= 60   3. lockoutWindow >= 5 && lockoutDuration <= 60`

          
          var jsonPatchOperation []v2025.JsonPatchOperation
          if err := json.Unmarshal(jsonpatchoperation, &jsonPatchOperation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.GlobalTenantSecuritySettingsAPI.PatchAuthOrgLockoutConfig(context.Background()).JsonPatchOperation(jsonPatchOperation).Execute()
          //resp, r, err := apiClient.V2025.GlobalTenantSecuritySettingsAPI.PatchAuthOrgLockoutConfig(context.Background()).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `GlobalTenantSecuritySettingsAPI.PatchAuthOrgLockoutConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchAuthOrgLockoutConfig`: LockoutConfiguration
          fmt.Fprintf(os.Stdout, "Response from `GlobalTenantSecuritySettingsAPI.PatchAuthOrgLockoutConfig`: %v\n", resp)
        }
- path: /auth-org/network-config
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/global-tenant-security-settings#patch-auth-org-network-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          jsonpatchoperation := []byte(`[{op=replace, path=/whitelisted, value=false,}, {op=add, path=/geolocation, value=[AF, HN, ES]}]`) // []JsonPatchOperation | A list of auth org network configuration update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Ensures that the patched Network Config conforms to certain logical guidelines, which are:   1. Each string element in the range array must be a valid ip address or ip subnet mask.   2. Each string element in the geolocation array must be 2 characters, and they can only be uppercase letters.

          
          var jsonPatchOperation []v2025.JsonPatchOperation
          if err := json.Unmarshal(jsonpatchoperation, &jsonPatchOperation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.GlobalTenantSecuritySettingsAPI.PatchAuthOrgNetworkConfig(context.Background()).JsonPatchOperation(jsonPatchOperation).Execute()
          //resp, r, err := apiClient.V2025.GlobalTenantSecuritySettingsAPI.PatchAuthOrgNetworkConfig(context.Background()).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `GlobalTenantSecuritySettingsAPI.PatchAuthOrgNetworkConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchAuthOrgNetworkConfig`: NetworkConfiguration
          fmt.Fprintf(os.Stdout, "Response from `GlobalTenantSecuritySettingsAPI.PatchAuthOrgNetworkConfig`: %v\n", resp)
        }
- path: /auth-org/service-provider-config
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/global-tenant-security-settings#patch-auth-org-service-provider-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          jsonpatchoperation := []byte(`[{op=replace, path=/enabled, value=true,}, {op=add, path=/federationProtocolDetails/0/jitConfiguration, value={enabled=true, sourceId=2c9180857377ed2901739c12a2da5ac8, sourceAttributeMappings={firstName=okta.firstName, lastName=okta.lastName, email=okta.email, employeeNumber=okta.employeeNumber}}}]`) // []JsonPatchOperation | A list of auth org service provider configuration update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Note: /federationProtocolDetails/0 is IdpDetails /federationProtocolDetails/1 is SpDetails Ensures that the patched ServiceProviderConfig conforms to certain logical guidelines, which are:   1. Do not add or remove any elements in the federation protocol details in the service provider configuration.   2. Do not modify, add, or delete the service provider details element in the federation protocol details.   3. If this is the first time the patched ServiceProviderConfig enables Remote IDP sign-in, it must also include IDPDetails.   4. If the patch enables Remote IDP sign in, the entityID in the IDPDetails cannot be null. IDPDetails must include an entityID.   5. Any JIT configuration update must be valid.  Just in time configuration update must be valid when enabled. This includes:   - A Source ID   - Source attribute mappings   - Source attribute maps have all the required key values (firstName, lastName, email)

          
          var jsonPatchOperation []v2025.JsonPatchOperation
          if err := json.Unmarshal(jsonpatchoperation, &jsonPatchOperation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.GlobalTenantSecuritySettingsAPI.PatchAuthOrgServiceProviderConfig(context.Background()).JsonPatchOperation(jsonPatchOperation).Execute()
          //resp, r, err := apiClient.V2025.GlobalTenantSecuritySettingsAPI.PatchAuthOrgServiceProviderConfig(context.Background()).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `GlobalTenantSecuritySettingsAPI.PatchAuthOrgServiceProviderConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchAuthOrgServiceProviderConfig`: ServiceProviderConfiguration
          fmt.Fprintf(os.Stdout, "Response from `GlobalTenantSecuritySettingsAPI.PatchAuthOrgServiceProviderConfig`: %v\n", resp)
        }
- path: /auth-org/session-config
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/global-tenant-security-settings#patch-auth-org-session-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          jsonpatchoperation := []byte(`[{op=replace, path=/rememberMe, value=true,}, {op=add, path=/maxSessionTime, value=480}]`) // []JsonPatchOperation | A list of auth org session configuration update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  Ensures that the patched Session Config conforms to certain logical guidelines, which are:   `1. maxSessionTime >= 1 && maxSessionTime <= 10080 (1 week)   2. maxIdleTime >= 1 && maxIdleTime <= 1440 (1 day)   3. maxSessionTime must have a greater duration than maxIdleTime.` 

          
          var jsonPatchOperation []v2025.JsonPatchOperation
          if err := json.Unmarshal(jsonpatchoperation, &jsonPatchOperation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.GlobalTenantSecuritySettingsAPI.PatchAuthOrgSessionConfig(context.Background()).JsonPatchOperation(jsonPatchOperation).Execute()
          //resp, r, err := apiClient.V2025.GlobalTenantSecuritySettingsAPI.PatchAuthOrgSessionConfig(context.Background()).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `GlobalTenantSecuritySettingsAPI.PatchAuthOrgSessionConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchAuthOrgSessionConfig`: SessionConfiguration
          fmt.Fprintf(os.Stdout, "Response from `GlobalTenantSecuritySettingsAPI.PatchAuthOrgSessionConfig`: %v\n", resp)
        }
- path: /workgroups
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/governance-groups#create-workgroup
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           workgroupdto := []byte(`{
          "owner" : {
            "emailAddress" : "support@sailpoint.com",
            "displayName" : "Support",
            "name" : "Support",
            "id" : "2c9180a46faadee4016fb4e018c20639",
            "type" : "IDENTITY"
          },
          "connectionCount" : 1641498673000,
          "created" : "2022-01-06T19:51:13Z",
          "memberCount" : 1641498673000,
          "name" : "DB Access Governance Group",
          "description" : "Description of the Governance Group",
          "modified" : "2022-01-06T19:51:13Z",
          "id" : "2c91808568c529c60168cca6f90c1313"
        }`) // WorkgroupDto | 

          
          var workgroupDto v2025.WorkgroupDto
          if err := json.Unmarshal(workgroupdto, &workgroupDto); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.GovernanceGroupsAPI.CreateWorkgroup(context.Background()).XSailPointExperimental(xSailPointExperimental).WorkgroupDto(workgroupDto).Execute()
          //resp, r, err := apiClient.V2025.GovernanceGroupsAPI.CreateWorkgroup(context.Background()).XSailPointExperimental(xSailPointExperimental).WorkgroupDto(workgroupDto).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `GovernanceGroupsAPI.CreateWorkgroup``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateWorkgroup`: WorkgroupDto
          fmt.Fprintf(os.Stdout, "Response from `GovernanceGroupsAPI.CreateWorkgroup`: %v\n", resp)
        }
- path: /workgroups/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/governance-groups#delete-workgroup
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c9180837ca6693d017ca8d097500149` // string | ID of the Governance Group # string | ID of the Governance Group
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.GovernanceGroupsAPI.DeleteWorkgroup(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //r, err := apiClient.V2025.GovernanceGroupsAPI.DeleteWorkgroup(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `GovernanceGroupsAPI.DeleteWorkgroup``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /workgroups/{workgroupId}/members/bulk-delete
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/governance-groups#delete-workgroup-members
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          workgroupId := `2c91808a7813090a017814121919ecca` // string | ID of the Governance Group. # string | ID of the Governance Group.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          identitypreviewresponseidentity := []byte(``) // []IdentityPreviewResponseIdentity | List of identities to be removed from  a Governance Group members list.

          
          var identityPreviewResponseIdentity []v2025.IdentityPreviewResponseIdentity
          if err := json.Unmarshal(identitypreviewresponseidentity, &identityPreviewResponseIdentity); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.GovernanceGroupsAPI.DeleteWorkgroupMembers(context.Background(), workgroupId).XSailPointExperimental(xSailPointExperimental).IdentityPreviewResponseIdentity(identityPreviewResponseIdentity).Execute()
          //resp, r, err := apiClient.V2025.GovernanceGroupsAPI.DeleteWorkgroupMembers(context.Background(), workgroupId).XSailPointExperimental(xSailPointExperimental).IdentityPreviewResponseIdentity(identityPreviewResponseIdentity).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `GovernanceGroupsAPI.DeleteWorkgroupMembers``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `DeleteWorkgroupMembers`: []WorkgroupMemberDeleteItem
          fmt.Fprintf(os.Stdout, "Response from `GovernanceGroupsAPI.DeleteWorkgroupMembers`: %v\n", resp)
        }
- path: /workgroups/bulk-delete
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/governance-groups#delete-workgroups-in-bulk
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           workgroupbulkdeleterequest := []byte(`{
          "ids" : [ "567a697e-885b-495a-afc5-d55e1c23a302", "c7b0f7b2-1e78-4063-b294-a555333dacd2" ]
        }`) // WorkgroupBulkDeleteRequest | 

          
          var workgroupBulkDeleteRequest v2025.WorkgroupBulkDeleteRequest
          if err := json.Unmarshal(workgroupbulkdeleterequest, &workgroupBulkDeleteRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.GovernanceGroupsAPI.DeleteWorkgroupsInBulk(context.Background()).XSailPointExperimental(xSailPointExperimental).WorkgroupBulkDeleteRequest(workgroupBulkDeleteRequest).Execute()
          //resp, r, err := apiClient.V2025.GovernanceGroupsAPI.DeleteWorkgroupsInBulk(context.Background()).XSailPointExperimental(xSailPointExperimental).WorkgroupBulkDeleteRequest(workgroupBulkDeleteRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `GovernanceGroupsAPI.DeleteWorkgroupsInBulk``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `DeleteWorkgroupsInBulk`: []WorkgroupDeleteItem
          fmt.Fprintf(os.Stdout, "Response from `GovernanceGroupsAPI.DeleteWorkgroupsInBulk`: %v\n", resp)
        }
- path: /workgroups/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/governance-groups#get-workgroup
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c9180837ca6693d017ca8d097500149` // string | ID of the Governance Group # string | ID of the Governance Group
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.GovernanceGroupsAPI.GetWorkgroup(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.GovernanceGroupsAPI.GetWorkgroup(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `GovernanceGroupsAPI.GetWorkgroup``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetWorkgroup`: WorkgroupDto
          fmt.Fprintf(os.Stdout, "Response from `GovernanceGroupsAPI.GetWorkgroup`: %v\n", resp)
        }
- path: /workgroups/{workgroupId}/connections
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/governance-groups#list-connections
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          workgroupId := `2c91808a7813090a017814121919ecca` // string | ID of the Governance Group. # string | ID of the Governance Group.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          limit := 50 // int32 | Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 50) # int32 | Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 50)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          sorters := `name,-modified` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.GovernanceGroupsAPI.ListConnections(context.Background(), workgroupId).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.GovernanceGroupsAPI.ListConnections(context.Background(), workgroupId).XSailPointExperimental(xSailPointExperimental).Offset(offset).Limit(limit).Count(count).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `GovernanceGroupsAPI.ListConnections``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListConnections`: []WorkgroupConnectionDto
          fmt.Fprintf(os.Stdout, "Response from `GovernanceGroupsAPI.ListConnections`: %v\n", resp)
        }
- path: /workgroups/{workgroupId}/members
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/governance-groups#list-workgroup-members
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          workgroupId := `2c91808a7813090a017814121919ecca` // string | ID of the Governance Group. # string | ID of the Governance Group.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          limit := 50 // int32 | Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 50) # int32 | Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 50)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          sorters := `name,-modified` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.GovernanceGroupsAPI.ListWorkgroupMembers(context.Background(), workgroupId).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.GovernanceGroupsAPI.ListWorkgroupMembers(context.Background(), workgroupId).XSailPointExperimental(xSailPointExperimental).Offset(offset).Limit(limit).Count(count).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `GovernanceGroupsAPI.ListWorkgroupMembers``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListWorkgroupMembers`: []ListWorkgroupMembers200ResponseInner
          fmt.Fprintf(os.Stdout, "Response from `GovernanceGroupsAPI.ListWorkgroupMembers`: %v\n", resp)
        }
- path: /workgroups
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/governance-groups#list-workgroups
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          limit := 50 // int32 | Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 50) # int32 | Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 50)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `name sw "Test"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, sw*  **name**: *eq, sw, in*  **memberships.identityId**: *eq, in* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, sw*  **name**: *eq, sw, in*  **memberships.identityId**: *eq, in* (optional)
          sorters := `name,-modified` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified, id, description** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified, id, description** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.GovernanceGroupsAPI.ListWorkgroups(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.GovernanceGroupsAPI.ListWorkgroups(context.Background()).XSailPointExperimental(xSailPointExperimental).Offset(offset).Limit(limit).Count(count).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `GovernanceGroupsAPI.ListWorkgroups``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListWorkgroups`: []WorkgroupDto
          fmt.Fprintf(os.Stdout, "Response from `GovernanceGroupsAPI.ListWorkgroups`: %v\n", resp)
        }
- path: /workgroups/{id}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/governance-groups#patch-workgroup
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c9180837ca6693d017ca8d097500149` // string | ID of the Governance Group # string | ID of the Governance Group
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          jsonpatchoperation := []byte(`[{op=replace, path=/description, value=Governance Group new description.}]`) // []JsonPatchOperation |  (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.GovernanceGroupsAPI.PatchWorkgroup(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.GovernanceGroupsAPI.PatchWorkgroup(context.Background(), id).XSailPointExperimental(xSailPointExperimental).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `GovernanceGroupsAPI.PatchWorkgroup``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchWorkgroup`: WorkgroupDto
          fmt.Fprintf(os.Stdout, "Response from `GovernanceGroupsAPI.PatchWorkgroup`: %v\n", resp)
        }
- path: /workgroups/{workgroupId}/members/bulk-add
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/governance-groups#update-workgroup-members
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          workgroupId := `2c91808a7813090a017814121919ecca` // string | ID of the Governance Group. # string | ID of the Governance Group.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          identitypreviewresponseidentity := []byte(``) // []IdentityPreviewResponseIdentity | List of identities to be added to a Governance Group members list.

          
          var identityPreviewResponseIdentity []v2025.IdentityPreviewResponseIdentity
          if err := json.Unmarshal(identitypreviewresponseidentity, &identityPreviewResponseIdentity); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.GovernanceGroupsAPI.UpdateWorkgroupMembers(context.Background(), workgroupId).XSailPointExperimental(xSailPointExperimental).IdentityPreviewResponseIdentity(identityPreviewResponseIdentity).Execute()
          //resp, r, err := apiClient.V2025.GovernanceGroupsAPI.UpdateWorkgroupMembers(context.Background(), workgroupId).XSailPointExperimental(xSailPointExperimental).IdentityPreviewResponseIdentity(identityPreviewResponseIdentity).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `GovernanceGroupsAPI.UpdateWorkgroupMembers``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateWorkgroupMembers`: []WorkgroupMemberAddItem
          fmt.Fprintf(os.Stdout, "Response from `GovernanceGroupsAPI.UpdateWorkgroupMembers`: %v\n", resp)
        }
- path: /ai-access-request-recommendations/ignored-items
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-access-request-recommendations#add-access-request-recommendations-ignored-item
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           accessrequestrecommendationactionitemdto := []byte(`{
          "access" : {
            "id" : "2c9180835d2e5168015d32f890ca1581",
            "type" : "ACCESS_PROFILE"
          },
          "identityId" : "2c91808570313110017040b06f344ec9"
        }`) // AccessRequestRecommendationActionItemDto | The recommended access item to ignore for an identity.

          
          var accessRequestRecommendationActionItemDto v2025.AccessRequestRecommendationActionItemDto
          if err := json.Unmarshal(accessrequestrecommendationactionitemdto, &accessRequestRecommendationActionItemDto); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIAccessRequestRecommendationsAPI.AddAccessRequestRecommendationsIgnoredItem(context.Background()).XSailPointExperimental(xSailPointExperimental).AccessRequestRecommendationActionItemDto(accessRequestRecommendationActionItemDto).Execute()
          //resp, r, err := apiClient.V2025.IAIAccessRequestRecommendationsAPI.AddAccessRequestRecommendationsIgnoredItem(context.Background()).XSailPointExperimental(xSailPointExperimental).AccessRequestRecommendationActionItemDto(accessRequestRecommendationActionItemDto).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIAccessRequestRecommendationsAPI.AddAccessRequestRecommendationsIgnoredItem``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `AddAccessRequestRecommendationsIgnoredItem`: AccessRequestRecommendationActionItemResponseDto
          fmt.Fprintf(os.Stdout, "Response from `IAIAccessRequestRecommendationsAPI.AddAccessRequestRecommendationsIgnoredItem`: %v\n", resp)
        }
- path: /ai-access-request-recommendations/requested-items
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-access-request-recommendations#add-access-request-recommendations-requested-item
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           accessrequestrecommendationactionitemdto := []byte(`{
          "access" : {
            "id" : "2c9180835d2e5168015d32f890ca1581",
            "type" : "ACCESS_PROFILE"
          },
          "identityId" : "2c91808570313110017040b06f344ec9"
        }`) // AccessRequestRecommendationActionItemDto | The recommended access item that was requested for an identity.

          
          var accessRequestRecommendationActionItemDto v2025.AccessRequestRecommendationActionItemDto
          if err := json.Unmarshal(accessrequestrecommendationactionitemdto, &accessRequestRecommendationActionItemDto); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIAccessRequestRecommendationsAPI.AddAccessRequestRecommendationsRequestedItem(context.Background()).XSailPointExperimental(xSailPointExperimental).AccessRequestRecommendationActionItemDto(accessRequestRecommendationActionItemDto).Execute()
          //resp, r, err := apiClient.V2025.IAIAccessRequestRecommendationsAPI.AddAccessRequestRecommendationsRequestedItem(context.Background()).XSailPointExperimental(xSailPointExperimental).AccessRequestRecommendationActionItemDto(accessRequestRecommendationActionItemDto).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIAccessRequestRecommendationsAPI.AddAccessRequestRecommendationsRequestedItem``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `AddAccessRequestRecommendationsRequestedItem`: AccessRequestRecommendationActionItemResponseDto
          fmt.Fprintf(os.Stdout, "Response from `IAIAccessRequestRecommendationsAPI.AddAccessRequestRecommendationsRequestedItem`: %v\n", resp)
        }
- path: /ai-access-request-recommendations/viewed-items
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-access-request-recommendations#add-access-request-recommendations-viewed-item
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           accessrequestrecommendationactionitemdto := []byte(`{
          "access" : {
            "id" : "2c9180835d2e5168015d32f890ca1581",
            "type" : "ACCESS_PROFILE"
          },
          "identityId" : "2c91808570313110017040b06f344ec9"
        }`) // AccessRequestRecommendationActionItemDto | The recommended access that was viewed for an identity.

          
          var accessRequestRecommendationActionItemDto v2025.AccessRequestRecommendationActionItemDto
          if err := json.Unmarshal(accessrequestrecommendationactionitemdto, &accessRequestRecommendationActionItemDto); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIAccessRequestRecommendationsAPI.AddAccessRequestRecommendationsViewedItem(context.Background()).XSailPointExperimental(xSailPointExperimental).AccessRequestRecommendationActionItemDto(accessRequestRecommendationActionItemDto).Execute()
          //resp, r, err := apiClient.V2025.IAIAccessRequestRecommendationsAPI.AddAccessRequestRecommendationsViewedItem(context.Background()).XSailPointExperimental(xSailPointExperimental).AccessRequestRecommendationActionItemDto(accessRequestRecommendationActionItemDto).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIAccessRequestRecommendationsAPI.AddAccessRequestRecommendationsViewedItem``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `AddAccessRequestRecommendationsViewedItem`: AccessRequestRecommendationActionItemResponseDto
          fmt.Fprintf(os.Stdout, "Response from `IAIAccessRequestRecommendationsAPI.AddAccessRequestRecommendationsViewedItem`: %v\n", resp)
        }
- path: /ai-access-request-recommendations/viewed-items/bulk-create
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-access-request-recommendations#add-access-request-recommendations-viewed-items
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          accessrequestrecommendationactionitemdto := []byte(``) // []AccessRequestRecommendationActionItemDto | The recommended access items that were viewed for an identity.

          
          var accessRequestRecommendationActionItemDto []v2025.AccessRequestRecommendationActionItemDto
          if err := json.Unmarshal(accessrequestrecommendationactionitemdto, &accessRequestRecommendationActionItemDto); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIAccessRequestRecommendationsAPI.AddAccessRequestRecommendationsViewedItems(context.Background()).XSailPointExperimental(xSailPointExperimental).AccessRequestRecommendationActionItemDto(accessRequestRecommendationActionItemDto).Execute()
          //resp, r, err := apiClient.V2025.IAIAccessRequestRecommendationsAPI.AddAccessRequestRecommendationsViewedItems(context.Background()).XSailPointExperimental(xSailPointExperimental).AccessRequestRecommendationActionItemDto(accessRequestRecommendationActionItemDto).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIAccessRequestRecommendationsAPI.AddAccessRequestRecommendationsViewedItems``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `AddAccessRequestRecommendationsViewedItems`: []AccessRequestRecommendationActionItemResponseDto
          fmt.Fprintf(os.Stdout, "Response from `IAIAccessRequestRecommendationsAPI.AddAccessRequestRecommendationsViewedItems`: %v\n", resp)
        }
- path: /ai-access-request-recommendations
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-access-request-recommendations#get-access-request-recommendations
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          identityId := `2c91808570313110017040b06f344ec9` // string | Get access request recommendations for an identityId. *me* indicates the current user. (optional) (default to "me") # string | Get access request recommendations for an identityId. *me* indicates the current user. (optional) (default to "me")
          limit := 15 // int32 | Max number of results to return. (optional) (default to 15) # int32 | Max number of results to return. (optional) (default to 15)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          includeTranslationMessages := false // bool | If *true* it will populate a list of translation messages in the response. (optional) (default to false) # bool | If *true* it will populate a list of translation messages in the response. (optional) (default to false)
          filters := `access.name co "admin"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.name**: *co*  **access.type**: *eq, in*  **access.description**: *co, eq, in* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.name**: *co*  **access.type**: *eq, in*  **access.description**: *co, eq, in* (optional)
          sorters := `access.name` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.name, access.type**  By default the recommendations are sorted by highest confidence first. (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.name, access.type**  By default the recommendations are sorted by highest confidence first. (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIAccessRequestRecommendationsAPI.GetAccessRequestRecommendations(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIAccessRequestRecommendationsAPI.GetAccessRequestRecommendations(context.Background()).XSailPointExperimental(xSailPointExperimental).IdentityId(identityId).Limit(limit).Offset(offset).Count(count).IncludeTranslationMessages(includeTranslationMessages).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIAccessRequestRecommendationsAPI.GetAccessRequestRecommendations``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetAccessRequestRecommendations`: []AccessRequestRecommendationItemDetail
          fmt.Fprintf(os.Stdout, "Response from `IAIAccessRequestRecommendationsAPI.GetAccessRequestRecommendations`: %v\n", resp)
        }
- path: /ai-access-request-recommendations/config
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-access-request-recommendations#get-access-request-recommendations-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIAccessRequestRecommendationsAPI.GetAccessRequestRecommendationsConfig(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIAccessRequestRecommendationsAPI.GetAccessRequestRecommendationsConfig(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIAccessRequestRecommendationsAPI.GetAccessRequestRecommendationsConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetAccessRequestRecommendationsConfig`: AccessRequestRecommendationConfigDto
          fmt.Fprintf(os.Stdout, "Response from `IAIAccessRequestRecommendationsAPI.GetAccessRequestRecommendationsConfig`: %v\n", resp)
        }
- path: /ai-access-request-recommendations/ignored-items
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-access-request-recommendations#get-access-request-recommendations-ignored-items
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `identityId eq "2c9180846b0a0583016b299f210c1314"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.id**: *eq, in*  **access.type**: *eq, in*  **identityId**: *eq, in* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.id**: *eq, in*  **access.type**: *eq, in*  **identityId**: *eq, in* (optional)
          sorters := `access.id` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.id, access.type, identityId, timestamp** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.id, access.type, identityId, timestamp** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIAccessRequestRecommendationsAPI.GetAccessRequestRecommendationsIgnoredItems(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIAccessRequestRecommendationsAPI.GetAccessRequestRecommendationsIgnoredItems(context.Background()).XSailPointExperimental(xSailPointExperimental).Limit(limit).Offset(offset).Count(count).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIAccessRequestRecommendationsAPI.GetAccessRequestRecommendationsIgnoredItems``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetAccessRequestRecommendationsIgnoredItems`: []AccessRequestRecommendationActionItemResponseDto
          fmt.Fprintf(os.Stdout, "Response from `IAIAccessRequestRecommendationsAPI.GetAccessRequestRecommendationsIgnoredItems`: %v\n", resp)
        }
- path: /ai-access-request-recommendations/requested-items
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-access-request-recommendations#get-access-request-recommendations-requested-items
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `access.id eq "2c9180846b0a0583016b299f210c1314"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.id**: *eq, in*  **access.type**: *eq, in*  **identityId**: *eq, in* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.id**: *eq, in*  **access.type**: *eq, in*  **identityId**: *eq, in* (optional)
          sorters := `access.id` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.id, access.type, identityId, timestamp** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.id, access.type, identityId, timestamp** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIAccessRequestRecommendationsAPI.GetAccessRequestRecommendationsRequestedItems(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIAccessRequestRecommendationsAPI.GetAccessRequestRecommendationsRequestedItems(context.Background()).XSailPointExperimental(xSailPointExperimental).Limit(limit).Offset(offset).Count(count).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIAccessRequestRecommendationsAPI.GetAccessRequestRecommendationsRequestedItems``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetAccessRequestRecommendationsRequestedItems`: []AccessRequestRecommendationActionItemResponseDto
          fmt.Fprintf(os.Stdout, "Response from `IAIAccessRequestRecommendationsAPI.GetAccessRequestRecommendationsRequestedItems`: %v\n", resp)
        }
- path: /ai-access-request-recommendations/viewed-items
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-access-request-recommendations#get-access-request-recommendations-viewed-items
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `access.id eq "2c9180846b0a0583016b299f210c1314"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.id**: *eq, in*  **access.type**: *eq, in*  **identityId**: *eq, in* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.id**: *eq, in*  **access.type**: *eq, in*  **identityId**: *eq, in* (optional)
          sorters := `access.id` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.id, access.type, identityId, timestamp** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.id, access.type, identityId, timestamp** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIAccessRequestRecommendationsAPI.GetAccessRequestRecommendationsViewedItems(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIAccessRequestRecommendationsAPI.GetAccessRequestRecommendationsViewedItems(context.Background()).XSailPointExperimental(xSailPointExperimental).Limit(limit).Offset(offset).Count(count).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIAccessRequestRecommendationsAPI.GetAccessRequestRecommendationsViewedItems``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetAccessRequestRecommendationsViewedItems`: []AccessRequestRecommendationActionItemResponseDto
          fmt.Fprintf(os.Stdout, "Response from `IAIAccessRequestRecommendationsAPI.GetAccessRequestRecommendationsViewedItems`: %v\n", resp)
        }
- path: /ai-access-request-recommendations/config
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-access-request-recommendations#set-access-request-recommendations-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           accessrequestrecommendationconfigdto := []byte(`{
          "scoreThreshold" : 0.5,
          "startDateAttribute" : "startDate",
          "restrictionAttribute" : "location",
          "moverAttribute" : "isMover",
          "joinerAttribute" : "isJoiner",
          "useRestrictionAttribute" : true
        }`) // AccessRequestRecommendationConfigDto | The desired configurations for Access Request Recommender for the tenant.

          
          var accessRequestRecommendationConfigDto v2025.AccessRequestRecommendationConfigDto
          if err := json.Unmarshal(accessrequestrecommendationconfigdto, &accessRequestRecommendationConfigDto); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIAccessRequestRecommendationsAPI.SetAccessRequestRecommendationsConfig(context.Background()).XSailPointExperimental(xSailPointExperimental).AccessRequestRecommendationConfigDto(accessRequestRecommendationConfigDto).Execute()
          //resp, r, err := apiClient.V2025.IAIAccessRequestRecommendationsAPI.SetAccessRequestRecommendationsConfig(context.Background()).XSailPointExperimental(xSailPointExperimental).AccessRequestRecommendationConfigDto(accessRequestRecommendationConfigDto).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIAccessRequestRecommendationsAPI.SetAccessRequestRecommendationsConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SetAccessRequestRecommendationsConfig`: AccessRequestRecommendationConfigDto
          fmt.Fprintf(os.Stdout, "Response from `IAIAccessRequestRecommendationsAPI.SetAccessRequestRecommendationsConfig`: %v\n", resp)
        }
- path: /common-access
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-common-access#create-common-access
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           commonaccessitemrequest := []byte(`{
          "access" : {
            "ownerName" : "ownerName",
            "name" : "name",
            "description" : "description",
            "id" : "id",
            "type" : "ACCESS_PROFILE",
            "ownerId" : "ownerId"
          },
          "status" : "CONFIRMED"
        }`) // CommonAccessItemRequest | 

          
          var commonAccessItemRequest v2025.CommonAccessItemRequest
          if err := json.Unmarshal(commonaccessitemrequest, &commonAccessItemRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAICommonAccessAPI.CreateCommonAccess(context.Background()).XSailPointExperimental(xSailPointExperimental).CommonAccessItemRequest(commonAccessItemRequest).Execute()
          //resp, r, err := apiClient.V2025.IAICommonAccessAPI.CreateCommonAccess(context.Background()).XSailPointExperimental(xSailPointExperimental).CommonAccessItemRequest(commonAccessItemRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAICommonAccessAPI.CreateCommonAccess``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateCommonAccess`: CommonAccessItemResponse
          fmt.Fprintf(os.Stdout, "Response from `IAICommonAccessAPI.CreateCommonAccess`: %v\n", resp)
        }
- path: /common-access
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-common-access#get-common-access
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `access.type eq "ROLE"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **status**: *eq, sw*  **reviewedByUser** *eq*  **access.id**: *eq, sw*  **access.type**: *eq*  **access.name**: *sw, eq*  **access.description**: *sw, eq* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **status**: *eq, sw*  **reviewedByUser** *eq*  **access.id**: *eq, sw*  **access.type**: *eq*  **access.name**: *sw, eq*  **access.description**: *sw, eq* (optional)
          sorters := `access.name` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.name, status**  By default the common access items are sorted by name, ascending. (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.name, status**  By default the common access items are sorted by name, ascending. (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAICommonAccessAPI.GetCommonAccess(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAICommonAccessAPI.GetCommonAccess(context.Background()).XSailPointExperimental(xSailPointExperimental).Offset(offset).Limit(limit).Count(count).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAICommonAccessAPI.GetCommonAccess``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetCommonAccess`: []CommonAccessResponse
          fmt.Fprintf(os.Stdout, "Response from `IAICommonAccessAPI.GetCommonAccess`: %v\n", resp)
        }
- path: /common-access/update-status
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-common-access#update-common-access-status-in-bulk
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          commonaccessidstatus := []byte(``) // []CommonAccessIDStatus | Confirm or deny in bulk the common access ids that are (or aren't) common access

          
          var commonAccessIDStatus []v2025.CommonAccessIDStatus
          if err := json.Unmarshal(commonaccessidstatus, &commonAccessIDStatus); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAICommonAccessAPI.UpdateCommonAccessStatusInBulk(context.Background()).XSailPointExperimental(xSailPointExperimental).CommonAccessIDStatus(commonAccessIDStatus).Execute()
          //resp, r, err := apiClient.V2025.IAICommonAccessAPI.UpdateCommonAccessStatusInBulk(context.Background()).XSailPointExperimental(xSailPointExperimental).CommonAccessIDStatus(commonAccessIDStatus).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAICommonAccessAPI.UpdateCommonAccessStatusInBulk``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateCommonAccessStatusInBulk`: map[string]interface{}
          fmt.Fprintf(os.Stdout, "Response from `IAICommonAccessAPI.UpdateCommonAccessStatusInBulk`: %v\n", resp)
        }
- path: /outliers/export
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-outliers#export-outliers-zip
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          type_ := `LOW_SIMILARITY` // string | Type of the identity outliers snapshot to filter on (optional) # string | Type of the identity outliers snapshot to filter on (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIOutliersAPI.ExportOutliersZip(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIOutliersAPI.ExportOutliersZip(context.Background()).XSailPointExperimental(xSailPointExperimental).Type_(type_).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIOutliersAPI.ExportOutliersZip``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ExportOutliersZip`: *os.File
          fmt.Fprintf(os.Stdout, "Response from `IAIOutliersAPI.ExportOutliersZip`: %v\n", resp)
        }
- path: /outlier-summaries
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-outliers#get-identity-outlier-snapshots
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          type_ := `LOW_SIMILARITY` // string | Type of the identity outliers snapshot to filter on (optional) # string | Type of the identity outliers snapshot to filter on (optional)
          filters := `snapshotDate ge "2022-02-07T20:13:29.356648026Z"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **snapshotDate**: *ge, le* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **snapshotDate**: *ge, le* (optional)
          sorters := `snapshotDate` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **snapshotDate** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **snapshotDate** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIOutliersAPI.GetIdentityOutlierSnapshots(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIOutliersAPI.GetIdentityOutlierSnapshots(context.Background()).XSailPointExperimental(xSailPointExperimental).Limit(limit).Offset(offset).Type_(type_).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIOutliersAPI.GetIdentityOutlierSnapshots``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetIdentityOutlierSnapshots`: []OutlierSummary
          fmt.Fprintf(os.Stdout, "Response from `IAIOutliersAPI.GetIdentityOutlierSnapshots`: %v\n", resp)
        }
- path: /outliers
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-outliers#get-identity-outliers
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          type_ := `LOW_SIMILARITY` // string | Type of the identity outliers snapshot to filter on (optional) # string | Type of the identity outliers snapshot to filter on (optional)
          filters := `attributes.displayName sw "John" and certStatus eq "false"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **attributes**: *eq, sw, co, in*  **firstDetectionDate**: *ge, le*  **certStatus**: *eq*  **ignored**: *eq*  **score**: *ge, le* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **attributes**: *eq, sw, co, in*  **firstDetectionDate**: *ge, le*  **certStatus**: *eq*  **ignored**: *eq*  **score**: *ge, le* (optional)
          sorters := `attributes.displayName,firstDetectionDate,-score` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **firstDetectionDate, attributes, score** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **firstDetectionDate, attributes, score** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIOutliersAPI.GetIdentityOutliers(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIOutliersAPI.GetIdentityOutliers(context.Background()).XSailPointExperimental(xSailPointExperimental).Limit(limit).Offset(offset).Count(count).Type_(type_).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIOutliersAPI.GetIdentityOutliers``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetIdentityOutliers`: []Outlier
          fmt.Fprintf(os.Stdout, "Response from `IAIOutliersAPI.GetIdentityOutliers`: %v\n", resp)
        }
- path: /outlier-summaries/latest
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-outliers#get-latest-identity-outlier-snapshots
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          type_ := `LOW_SIMILARITY` // string | Type of the identity outliers snapshot to filter on (optional) # string | Type of the identity outliers snapshot to filter on (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIOutliersAPI.GetLatestIdentityOutlierSnapshots(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIOutliersAPI.GetLatestIdentityOutlierSnapshots(context.Background()).XSailPointExperimental(xSailPointExperimental).Type_(type_).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIOutliersAPI.GetLatestIdentityOutlierSnapshots``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetLatestIdentityOutlierSnapshots`: []LatestOutlierSummary
          fmt.Fprintf(os.Stdout, "Response from `IAIOutliersAPI.GetLatestIdentityOutlierSnapshots`: %v\n", resp)
        }
- path: /outlier-feature-summaries/{outlierFeatureId}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-outliers#get-outlier-contributing-feature-summary
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          outlierFeatureId := `04654b66-7561-4090-94f9-abee0722a1af` // string | Contributing feature id # string | Contributing feature id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIOutliersAPI.GetOutlierContributingFeatureSummary(context.Background(), outlierFeatureId).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIOutliersAPI.GetOutlierContributingFeatureSummary(context.Background(), outlierFeatureId).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIOutliersAPI.GetOutlierContributingFeatureSummary``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetOutlierContributingFeatureSummary`: OutlierFeatureSummary
          fmt.Fprintf(os.Stdout, "Response from `IAIOutliersAPI.GetOutlierContributingFeatureSummary`: %v\n", resp)
        }
- path: /outliers/{outlierId}/contributing-features
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-outliers#get-peer-group-outliers-contributing-features
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          outlierId := `2c918085842e69ae018432d22ccb212f` // string | The outlier id # string | The outlier id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          includeTranslationMessages := `include-translation-messages=` // string | Whether or not to include translation messages object in returned response (optional) # string | Whether or not to include translation messages object in returned response (optional)
          sorters := `importance` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **importance** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **importance** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIOutliersAPI.GetPeerGroupOutliersContributingFeatures(context.Background(), outlierId).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIOutliersAPI.GetPeerGroupOutliersContributingFeatures(context.Background(), outlierId).XSailPointExperimental(xSailPointExperimental).Limit(limit).Offset(offset).Count(count).IncludeTranslationMessages(includeTranslationMessages).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIOutliersAPI.GetPeerGroupOutliersContributingFeatures``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetPeerGroupOutliersContributingFeatures`: []OutlierContributingFeature
          fmt.Fprintf(os.Stdout, "Response from `IAIOutliersAPI.GetPeerGroupOutliersContributingFeatures`: %v\n", resp)
        }
- path: /outliers/ignore
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-outliers#ignore-identity-outliers
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          requestbody := []byte(``) // []string | 

          
          var requestBody []v2025.RequestBody
          if err := json.Unmarshal(requestbody, &requestBody); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.IAIOutliersAPI.IgnoreIdentityOutliers(context.Background()).XSailPointExperimental(xSailPointExperimental).RequestBody(requestBody).Execute()
          //r, err := apiClient.V2025.IAIOutliersAPI.IgnoreIdentityOutliers(context.Background()).XSailPointExperimental(xSailPointExperimental).RequestBody(requestBody).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIOutliersAPI.IgnoreIdentityOutliers``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /outliers/{outlierId}/feature-details/{contributingFeatureName}/access-items
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-outliers#list-outliers-contributing-feature-access-items
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          outlierId := `2c918085842e69ae018432d22ccb212f` // string | The outlier id # string | The outlier id
          contributingFeatureName := `entitlement_count` // string | The name of contributing feature # string | The name of contributing feature
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          accessType := `ENTITLEMENT` // string | The type of access item for the identity outlier contributing feature. If not provided, it returns all. (optional) # string | The type of access item for the identity outlier contributing feature. If not provided, it returns all. (optional)
          sorters := `displayName` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **displayName** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **displayName** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIOutliersAPI.ListOutliersContributingFeatureAccessItems(context.Background(), outlierId, contributingFeatureName).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIOutliersAPI.ListOutliersContributingFeatureAccessItems(context.Background(), outlierId, contributingFeatureName).XSailPointExperimental(xSailPointExperimental).Limit(limit).Offset(offset).Count(count).AccessType(accessType).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIOutliersAPI.ListOutliersContributingFeatureAccessItems``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListOutliersContributingFeatureAccessItems`: []OutliersContributingFeatureAccessItems
          fmt.Fprintf(os.Stdout, "Response from `IAIOutliersAPI.ListOutliersContributingFeatureAccessItems`: %v\n", resp)
        }
- path: /outliers/unignore
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-outliers#un-ignore-identity-outliers
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          requestbody := []byte(``) // []string | 

          
          var requestBody []v2025.RequestBody
          if err := json.Unmarshal(requestbody, &requestBody); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.IAIOutliersAPI.UnIgnoreIdentityOutliers(context.Background()).XSailPointExperimental(xSailPointExperimental).RequestBody(requestBody).Execute()
          //r, err := apiClient.V2025.IAIOutliersAPI.UnIgnoreIdentityOutliers(context.Background()).XSailPointExperimental(xSailPointExperimental).RequestBody(requestBody).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIOutliersAPI.UnIgnoreIdentityOutliers``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /peer-group-strategies/{strategy}/identity-outliers
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-peer-group-strategies#get-peer-group-outliers
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          strategy := `entitlement` // string | The strategy used to create peer groups. Currently, 'entitlement' is supported. # string | The strategy used to create peer groups. Currently, 'entitlement' is supported.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIPeerGroupStrategiesAPI.GetPeerGroupOutliers(context.Background(), strategy).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIPeerGroupStrategiesAPI.GetPeerGroupOutliers(context.Background(), strategy).XSailPointExperimental(xSailPointExperimental).Limit(limit).Offset(offset).Count(count).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIPeerGroupStrategiesAPI.GetPeerGroupOutliers``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetPeerGroupOutliers`: []PeerGroupMember
          fmt.Fprintf(os.Stdout, "Response from `IAIPeerGroupStrategiesAPI.GetPeerGroupOutliers`: %v\n", resp)
        }
- path: /recommendations/request
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-recommendations#get-recommendations
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           recommendationrequestdto := []byte(`{
          "prescribeMode" : false,
          "excludeInterpretations" : false,
          "requests" : [ {
            "item" : {
              "id" : "2c938083633d259901633d2623ec0375",
              "type" : "ENTITLEMENT"
            },
            "identityId" : "2c938083633d259901633d25c68c00fa"
          }, {
            "item" : {
              "id" : "2c938083633d259901633d2623ec0375",
              "type" : "ENTITLEMENT"
            },
            "identityId" : "2c938083633d259901633d25c68c00fa"
          } ],
          "includeTranslationMessages" : false,
          "includeDebugInformation" : true
        }`) // RecommendationRequestDto | 

          
          var recommendationRequestDto v2025.RecommendationRequestDto
          if err := json.Unmarshal(recommendationrequestdto, &recommendationRequestDto); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIRecommendationsAPI.GetRecommendations(context.Background()).XSailPointExperimental(xSailPointExperimental).RecommendationRequestDto(recommendationRequestDto).Execute()
          //resp, r, err := apiClient.V2025.IAIRecommendationsAPI.GetRecommendations(context.Background()).XSailPointExperimental(xSailPointExperimental).RecommendationRequestDto(recommendationRequestDto).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIRecommendationsAPI.GetRecommendations``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetRecommendations`: RecommendationResponseDto
          fmt.Fprintf(os.Stdout, "Response from `IAIRecommendationsAPI.GetRecommendations`: %v\n", resp)
        }
- path: /recommendations/config
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-recommendations#get-recommendations-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIRecommendationsAPI.GetRecommendationsConfig(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIRecommendationsAPI.GetRecommendationsConfig(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIRecommendationsAPI.GetRecommendationsConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetRecommendationsConfig`: RecommendationConfigDto
          fmt.Fprintf(os.Stdout, "Response from `IAIRecommendationsAPI.GetRecommendationsConfig`: %v\n", resp)
        }
- path: /recommendations/config
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-recommendations#update-recommendations-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           recommendationconfigdto := []byte(`{
          "recommenderFeatures" : [ "jobTitle", "location", "peer_group", "department", "active" ],
          "peerGroupPercentageThreshold" : 0.5,
          "runAutoSelectOnce" : false,
          "onlyTuneThreshold" : false
        }`) // RecommendationConfigDto | 

          
          var recommendationConfigDto v2025.RecommendationConfigDto
          if err := json.Unmarshal(recommendationconfigdto, &recommendationConfigDto); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIRecommendationsAPI.UpdateRecommendationsConfig(context.Background()).XSailPointExperimental(xSailPointExperimental).RecommendationConfigDto(recommendationConfigDto).Execute()
          //resp, r, err := apiClient.V2025.IAIRecommendationsAPI.UpdateRecommendationsConfig(context.Background()).XSailPointExperimental(xSailPointExperimental).RecommendationConfigDto(recommendationConfigDto).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIRecommendationsAPI.UpdateRecommendationsConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateRecommendationsConfig`: RecommendationConfigDto
          fmt.Fprintf(os.Stdout, "Response from `IAIRecommendationsAPI.UpdateRecommendationsConfig`: %v\n", resp)
        }
- path: /role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/provision
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-role-mining#create-potential-role-provision-request
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sessionId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | The role mining session id # string | The role mining session id
          potentialRoleId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | A potential role id in a role mining session # string | A potential role id in a role mining session
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          minEntitlementPopularity := 56 // int32 | Minimum popularity required for an entitlement to be included in the provisioned role. (optional) (default to 0) # int32 | Minimum popularity required for an entitlement to be included in the provisioned role. (optional) (default to 0)
          includeCommonAccess := true // bool | Boolean determining whether common access entitlements will be included in the provisioned role. (optional) (default to true) # bool | Boolean determining whether common access entitlements will be included in the provisioned role. (optional) (default to true)
           roleminingpotentialroleprovisionrequest := []byte(`{
          "includeIdentities" : true,
          "roleName" : "Finance - Accounting",
          "ownerId" : "2b568c65bc3c4c57a43bd97e3a8e41",
          "roleDescription" : "General access for accounting department",
          "directlyAssignedEntitlements" : false
        }`) // RoleMiningPotentialRoleProvisionRequest | Required information to create a new role (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIRoleMiningAPI.CreatePotentialRoleProvisionRequest(context.Background(), sessionId, potentialRoleId).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIRoleMiningAPI.CreatePotentialRoleProvisionRequest(context.Background(), sessionId, potentialRoleId).XSailPointExperimental(xSailPointExperimental).MinEntitlementPopularity(minEntitlementPopularity).IncludeCommonAccess(includeCommonAccess).RoleMiningPotentialRoleProvisionRequest(roleMiningPotentialRoleProvisionRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIRoleMiningAPI.CreatePotentialRoleProvisionRequest``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreatePotentialRoleProvisionRequest`: RoleMiningPotentialRoleSummary
          fmt.Fprintf(os.Stdout, "Response from `IAIRoleMiningAPI.CreatePotentialRoleProvisionRequest`: %v\n", resp)
        }
- path: /role-mining-sessions
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-role-mining#create-role-mining-sessions
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           roleminingsessiondto := []byte(`{
          "emailRecipientId" : "2c918090761a5aac0176215c46a62d58",
          "prescribedPruneThreshold" : 10,
          "pruneThreshold" : 50,
          "saved" : true,
          "potentialRolesReadyCount" : 0,
          "scope" : {
            "identityIds" : [ "2c918090761a5aac0176215c46a62d58", "2c918090761a5aac01722015c46a62d42" ],
            "attributeFilterCriteria" : {
              "displayName" : {
                "untranslated" : "Location: Miami"
              },
              "ariaLabel" : {
                "untranslated" : "Location: Miami"
              },
              "data" : {
                "displayName" : {
                  "translateKey" : "IDN.IDENTITY_ATTRIBUTES.LOCATION"
                },
                "name" : "location",
                "operator" : "EQUALS",
                "values" : [ "Miami" ]
              }
            },
            "criteria" : "source.name:DataScienceDataset"
          },
          "potentialRoleCount" : 0,
          "name" : "Saved RM Session - 07/10",
          "minNumIdentitiesInPotentialRole" : 20,
          "identityCount" : 0,
          "type" : "SPECIALIZED"
        }`) // RoleMiningSessionDto | Role mining session parameters

          
          var roleMiningSessionDto v2025.RoleMiningSessionDto
          if err := json.Unmarshal(roleminingsessiondto, &roleMiningSessionDto); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIRoleMiningAPI.CreateRoleMiningSessions(context.Background()).XSailPointExperimental(xSailPointExperimental).RoleMiningSessionDto(roleMiningSessionDto).Execute()
          //resp, r, err := apiClient.V2025.IAIRoleMiningAPI.CreateRoleMiningSessions(context.Background()).XSailPointExperimental(xSailPointExperimental).RoleMiningSessionDto(roleMiningSessionDto).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIRoleMiningAPI.CreateRoleMiningSessions``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateRoleMiningSessions`: RoleMiningSessionResponse
          fmt.Fprintf(os.Stdout, "Response from `IAIRoleMiningAPI.CreateRoleMiningSessions`: %v\n", resp)
        }
- path: /role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/export-async/{exportId}/download
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-role-mining#download-role-mining-potential-role-zip
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sessionId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | The role mining session id # string | The role mining session id
          potentialRoleId := `278359a6-04b7-4669-9468-924cf580964a` // string | A potential role id in a role mining session # string | A potential role id in a role mining session
          exportId := `4940ffd4-836f-48a3-b2b0-6d498c3fdf40` // string | The id of a previously run export job for this potential role # string | The id of a previously run export job for this potential role
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIRoleMiningAPI.DownloadRoleMiningPotentialRoleZip(context.Background(), sessionId, potentialRoleId, exportId).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIRoleMiningAPI.DownloadRoleMiningPotentialRoleZip(context.Background(), sessionId, potentialRoleId, exportId).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIRoleMiningAPI.DownloadRoleMiningPotentialRoleZip``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `DownloadRoleMiningPotentialRoleZip`: *os.File
          fmt.Fprintf(os.Stdout, "Response from `IAIRoleMiningAPI.DownloadRoleMiningPotentialRoleZip`: %v\n", resp)
        }
- path: /role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/export
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-role-mining#export-role-mining-potential-role
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sessionId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | The role mining session id # string | The role mining session id
          potentialRoleId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | A potential role id in a role mining session # string | A potential role id in a role mining session
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIRoleMiningAPI.ExportRoleMiningPotentialRole(context.Background(), sessionId, potentialRoleId).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIRoleMiningAPI.ExportRoleMiningPotentialRole(context.Background(), sessionId, potentialRoleId).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIRoleMiningAPI.ExportRoleMiningPotentialRole``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ExportRoleMiningPotentialRole`: *os.File
          fmt.Fprintf(os.Stdout, "Response from `IAIRoleMiningAPI.ExportRoleMiningPotentialRole`: %v\n", resp)
        }
- path: /role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/export-async
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-role-mining#export-role-mining-potential-role-async
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sessionId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | The role mining session id # string | The role mining session id
          potentialRoleId := `278359a6-04b7-4669-9468-924cf580964a` // string | A potential role id in a role mining session # string | A potential role id in a role mining session
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           roleminingpotentialroleexportrequest := []byte(`{
          "minEntitlementPopularity" : 0,
          "includeCommonAccess" : true
        }`) // RoleMiningPotentialRoleExportRequest |  (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIRoleMiningAPI.ExportRoleMiningPotentialRoleAsync(context.Background(), sessionId, potentialRoleId).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIRoleMiningAPI.ExportRoleMiningPotentialRoleAsync(context.Background(), sessionId, potentialRoleId).XSailPointExperimental(xSailPointExperimental).RoleMiningPotentialRoleExportRequest(roleMiningPotentialRoleExportRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIRoleMiningAPI.ExportRoleMiningPotentialRoleAsync``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ExportRoleMiningPotentialRoleAsync`: RoleMiningPotentialRoleExportResponse
          fmt.Fprintf(os.Stdout, "Response from `IAIRoleMiningAPI.ExportRoleMiningPotentialRoleAsync`: %v\n", resp)
        }
- path: /role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/export-async/{exportId}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-role-mining#export-role-mining-potential-role-status
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sessionId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | The role mining session id # string | The role mining session id
          potentialRoleId := `278359a6-04b7-4669-9468-924cf580964a` // string | A potential role id in a role mining session # string | A potential role id in a role mining session
          exportId := `4940ffd4-836f-48a3-b2b0-6d498c3fdf40` // string | The id of a previously run export job for this potential role # string | The id of a previously run export job for this potential role
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIRoleMiningAPI.ExportRoleMiningPotentialRoleStatus(context.Background(), sessionId, potentialRoleId, exportId).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIRoleMiningAPI.ExportRoleMiningPotentialRoleStatus(context.Background(), sessionId, potentialRoleId, exportId).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIRoleMiningAPI.ExportRoleMiningPotentialRoleStatus``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ExportRoleMiningPotentialRoleStatus`: RoleMiningPotentialRoleExportResponse
          fmt.Fprintf(os.Stdout, "Response from `IAIRoleMiningAPI.ExportRoleMiningPotentialRoleStatus`: %v\n", resp)
        }
- path: /role-mining-potential-roles
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-role-mining#get-all-potential-role-summaries
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          sorters := `createdDate` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **createdDate, identityCount, entitlementCount, freshness, quality** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **createdDate, identityCount, entitlementCount, freshness, quality** (optional)
          filters := `(createdByName co "int") and (createdById sw "2c9180907") and (type eq "COMMON") and ((name co "entt") or (saved eq true))` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **createdById**: *eq, sw, co*  **createdByName**: *eq, sw, co*  **description**: *sw, co*  **endDate**: *le, lt*  **freshness**: *eq, ge, gt, le, lt*  **name**: *eq, sw, co, ge, gt, le, lt*  **quality**: *eq, ge, gt, le, lt*  **startDate**: *ge, gt*  **saved**: *eq*  **type**: *eq, ge, gt, le, lt*  **scopingMethod**: *eq*  **sessionState**: *eq*  **identityAttribute**: *co* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **createdById**: *eq, sw, co*  **createdByName**: *eq, sw, co*  **description**: *sw, co*  **endDate**: *le, lt*  **freshness**: *eq, ge, gt, le, lt*  **name**: *eq, sw, co, ge, gt, le, lt*  **quality**: *eq, ge, gt, le, lt*  **startDate**: *ge, gt*  **saved**: *eq*  **type**: *eq, ge, gt, le, lt*  **scopingMethod**: *eq*  **sessionState**: *eq*  **identityAttribute**: *co* (optional)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIRoleMiningAPI.GetAllPotentialRoleSummaries(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIRoleMiningAPI.GetAllPotentialRoleSummaries(context.Background()).XSailPointExperimental(xSailPointExperimental).Sorters(sorters).Filters(filters).Offset(offset).Limit(limit).Count(count).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIRoleMiningAPI.GetAllPotentialRoleSummaries``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetAllPotentialRoleSummaries`: []RoleMiningPotentialRoleSummary
          fmt.Fprintf(os.Stdout, "Response from `IAIRoleMiningAPI.GetAllPotentialRoleSummaries`: %v\n", resp)
        }
- path: /role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/entitlement-popularity-distribution
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-role-mining#get-entitlement-distribution-potential-role
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sessionId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | The role mining session id # string | The role mining session id
          potentialRoleId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | A potential role id in a role mining session # string | A potential role id in a role mining session
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          includeCommonAccess := true // bool | Boolean determining whether common access entitlements will be included or not (optional) # bool | Boolean determining whether common access entitlements will be included or not (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIRoleMiningAPI.GetEntitlementDistributionPotentialRole(context.Background(), sessionId, potentialRoleId).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIRoleMiningAPI.GetEntitlementDistributionPotentialRole(context.Background(), sessionId, potentialRoleId).XSailPointExperimental(xSailPointExperimental).IncludeCommonAccess(includeCommonAccess).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIRoleMiningAPI.GetEntitlementDistributionPotentialRole``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetEntitlementDistributionPotentialRole`: map[string]int32
          fmt.Fprintf(os.Stdout, "Response from `IAIRoleMiningAPI.GetEntitlementDistributionPotentialRole`: %v\n", resp)
        }
- path: /role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/entitlement-popularities
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-role-mining#get-entitlements-potential-role
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sessionId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | The role mining session id # string | The role mining session id
          potentialRoleId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | A potential role id in a role mining session # string | A potential role id in a role mining session
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          includeCommonAccess := true // bool | Boolean determining whether common access entitlements will be included or not (optional) (default to true) # bool | Boolean determining whether common access entitlements will be included or not (optional) (default to true)
          sorters := `popularity` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **popularity, entitlementName, applicationName**  The default sort is **popularity** in descending order.  (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **popularity, entitlementName, applicationName**  The default sort is **popularity** in descending order.  (optional)
          filters := `applicationName sw "AD"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **applicationName**: *sw*  **entitlementRef.name**: *sw* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **applicationName**: *sw*  **entitlementRef.name**: *sw* (optional)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIRoleMiningAPI.GetEntitlementsPotentialRole(context.Background(), sessionId, potentialRoleId).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIRoleMiningAPI.GetEntitlementsPotentialRole(context.Background(), sessionId, potentialRoleId).XSailPointExperimental(xSailPointExperimental).IncludeCommonAccess(includeCommonAccess).Sorters(sorters).Filters(filters).Offset(offset).Limit(limit).Count(count).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIRoleMiningAPI.GetEntitlementsPotentialRole``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetEntitlementsPotentialRole`: []RoleMiningEntitlement
          fmt.Fprintf(os.Stdout, "Response from `IAIRoleMiningAPI.GetEntitlementsPotentialRole`: %v\n", resp)
        }
- path: /role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/excluded-entitlements
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-role-mining#get-excluded-entitlements-potential-role
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sessionId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | The role mining session id # string | The role mining session id
          potentialRoleId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | A potential role id in a role mining session # string | A potential role id in a role mining session
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          sorters := `populariity` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **popularity** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **popularity** (optional)
          filters := `applicationName sw "AD"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **applicationName**: *sw*  **entitlementRef.name**: *sw* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **applicationName**: *sw*  **entitlementRef.name**: *sw* (optional)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIRoleMiningAPI.GetExcludedEntitlementsPotentialRole(context.Background(), sessionId, potentialRoleId).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIRoleMiningAPI.GetExcludedEntitlementsPotentialRole(context.Background(), sessionId, potentialRoleId).XSailPointExperimental(xSailPointExperimental).Sorters(sorters).Filters(filters).Offset(offset).Limit(limit).Count(count).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIRoleMiningAPI.GetExcludedEntitlementsPotentialRole``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetExcludedEntitlementsPotentialRole`: []RoleMiningEntitlement
          fmt.Fprintf(os.Stdout, "Response from `IAIRoleMiningAPI.GetExcludedEntitlementsPotentialRole`: %v\n", resp)
        }
- path: /role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/identities
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-role-mining#get-identities-potential-role
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sessionId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | The role mining session id # string | The role mining session id
          potentialRoleId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | A potential role id in a role mining session # string | A potential role id in a role mining session
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          sorters := `name` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name** (optional)
          filters := `filters_example` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw* (optional)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIRoleMiningAPI.GetIdentitiesPotentialRole(context.Background(), sessionId, potentialRoleId).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIRoleMiningAPI.GetIdentitiesPotentialRole(context.Background(), sessionId, potentialRoleId).XSailPointExperimental(xSailPointExperimental).Sorters(sorters).Filters(filters).Offset(offset).Limit(limit).Count(count).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIRoleMiningAPI.GetIdentitiesPotentialRole``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetIdentitiesPotentialRole`: []RoleMiningIdentity
          fmt.Fprintf(os.Stdout, "Response from `IAIRoleMiningAPI.GetIdentitiesPotentialRole`: %v\n", resp)
        }
- path: /role-mining-sessions/{sessionId}/potential-role-summaries/{potentialRoleId}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-role-mining#get-potential-role
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sessionId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | The role mining session id # string | The role mining session id
          potentialRoleId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | A potential role id in a role mining session # string | A potential role id in a role mining session
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIRoleMiningAPI.GetPotentialRole(context.Background(), sessionId, potentialRoleId).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIRoleMiningAPI.GetPotentialRole(context.Background(), sessionId, potentialRoleId).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIRoleMiningAPI.GetPotentialRole``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetPotentialRole`: RoleMiningPotentialRole
          fmt.Fprintf(os.Stdout, "Response from `IAIRoleMiningAPI.GetPotentialRole`: %v\n", resp)
        }
- path: /role-mining-sessions/{sessionId}/potential-role-summaries/{potentialRoleId}/applications
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-role-mining#get-potential-role-applications
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sessionId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | The role mining session id # string | The role mining session id
          potentialRoleId := `62f28d91-7d9f-4d17-be15-666d5b41d77f` // string | A potential role id in a role mining session # string | A potential role id in a role mining session
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          filters := `applicationName sw "test"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **applicationName**: *sw* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **applicationName**: *sw* (optional)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIRoleMiningAPI.GetPotentialRoleApplications(context.Background(), sessionId, potentialRoleId).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIRoleMiningAPI.GetPotentialRoleApplications(context.Background(), sessionId, potentialRoleId).XSailPointExperimental(xSailPointExperimental).Filters(filters).Offset(offset).Limit(limit).Count(count).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIRoleMiningAPI.GetPotentialRoleApplications``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetPotentialRoleApplications`: []RoleMiningPotentialRoleApplication
          fmt.Fprintf(os.Stdout, "Response from `IAIRoleMiningAPI.GetPotentialRoleApplications`: %v\n", resp)
        }
- path: /role-mining-sessions/{sessionId}/potential-role-summaries/{potentialRoleId}/entitlements
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-role-mining#get-potential-role-entitlements
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sessionId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | The role mining session id # string | The role mining session id
          potentialRoleId := `62f28d91-7d9f-4d17-be15-666d5b41d77f` // string | A potential role id in a role mining session # string | A potential role id in a role mining session
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          filters := `entitlementRef.name sw "test"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **entitlementRef.name**: *sw* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **entitlementRef.name**: *sw* (optional)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIRoleMiningAPI.GetPotentialRoleEntitlements(context.Background(), sessionId, potentialRoleId).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIRoleMiningAPI.GetPotentialRoleEntitlements(context.Background(), sessionId, potentialRoleId).XSailPointExperimental(xSailPointExperimental).Filters(filters).Offset(offset).Limit(limit).Count(count).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIRoleMiningAPI.GetPotentialRoleEntitlements``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetPotentialRoleEntitlements`: []RoleMiningPotentialRoleEntitlements
          fmt.Fprintf(os.Stdout, "Response from `IAIRoleMiningAPI.GetPotentialRoleEntitlements`: %v\n", resp)
        }
- path: /role-mining-potential-roles/{potentialRoleId}/sources/{sourceId}/identityUsage
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-role-mining#get-potential-role-source-identity-usage
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          potentialRoleId := `e0cc5d7d-bf7f-4f81-b2af-8885b09d9923` // string | A potential role id # string | A potential role id
          sourceId := `2c9180877620c1460176267f336a106f` // string | A source id # string | A source id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          sorters := `-usageCount` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters/) Sorting is supported for the following fields: **displayName, email, usageCount** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters/) Sorting is supported for the following fields: **displayName, email, usageCount** (optional)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIRoleMiningAPI.GetPotentialRoleSourceIdentityUsage(context.Background(), potentialRoleId, sourceId).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIRoleMiningAPI.GetPotentialRoleSourceIdentityUsage(context.Background(), potentialRoleId, sourceId).XSailPointExperimental(xSailPointExperimental).Sorters(sorters).Offset(offset).Limit(limit).Count(count).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIRoleMiningAPI.GetPotentialRoleSourceIdentityUsage``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetPotentialRoleSourceIdentityUsage`: []RoleMiningPotentialRoleSourceUsage
          fmt.Fprintf(os.Stdout, "Response from `IAIRoleMiningAPI.GetPotentialRoleSourceIdentityUsage`: %v\n", resp)
        }
- path: /role-mining-sessions/{sessionId}/potential-role-summaries
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-role-mining#get-potential-role-summaries
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sessionId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | The role mining session id # string | The role mining session id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          sorters := `createdDate` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **createdDate** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **createdDate** (optional)
          filters := `(createdByName co "int")and (createdById sw "2c9180907")and (type eq "COMMON")and ((name co "entt")or (saved eq true))` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **createdById**: *eq, sw, co*  **createdByName**: *eq, sw, co*  **description**: *sw, co*  **endDate**: *le, lt*  **freshness**: *eq, ge, gt, le, lt*  **name**: *eq, sw, co*  **quality**: *eq, ge, gt, le, lt*  **startDate**: *ge, gt*  **saved**: *eq*  **type**: *eq* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **createdById**: *eq, sw, co*  **createdByName**: *eq, sw, co*  **description**: *sw, co*  **endDate**: *le, lt*  **freshness**: *eq, ge, gt, le, lt*  **name**: *eq, sw, co*  **quality**: *eq, ge, gt, le, lt*  **startDate**: *ge, gt*  **saved**: *eq*  **type**: *eq* (optional)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIRoleMiningAPI.GetPotentialRoleSummaries(context.Background(), sessionId).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIRoleMiningAPI.GetPotentialRoleSummaries(context.Background(), sessionId).XSailPointExperimental(xSailPointExperimental).Sorters(sorters).Filters(filters).Offset(offset).Limit(limit).Count(count).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIRoleMiningAPI.GetPotentialRoleSummaries``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetPotentialRoleSummaries`: []RoleMiningPotentialRoleSummary
          fmt.Fprintf(os.Stdout, "Response from `IAIRoleMiningAPI.GetPotentialRoleSummaries`: %v\n", resp)
        }
- path: /role-mining-potential-roles/{potentialRoleId}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-role-mining#get-role-mining-potential-role
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          potentialRoleId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | A potential role id # string | A potential role id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIRoleMiningAPI.GetRoleMiningPotentialRole(context.Background(), potentialRoleId).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIRoleMiningAPI.GetRoleMiningPotentialRole(context.Background(), potentialRoleId).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIRoleMiningAPI.GetRoleMiningPotentialRole``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetRoleMiningPotentialRole`: RoleMiningPotentialRole
          fmt.Fprintf(os.Stdout, "Response from `IAIRoleMiningAPI.GetRoleMiningPotentialRole`: %v\n", resp)
        }
- path: /role-mining-sessions/{sessionId}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-role-mining#get-role-mining-session
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sessionId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | The role mining session id to be retrieved. # string | The role mining session id to be retrieved.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIRoleMiningAPI.GetRoleMiningSession(context.Background(), sessionId).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIRoleMiningAPI.GetRoleMiningSession(context.Background(), sessionId).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIRoleMiningAPI.GetRoleMiningSession``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetRoleMiningSession`: RoleMiningSessionResponse
          fmt.Fprintf(os.Stdout, "Response from `IAIRoleMiningAPI.GetRoleMiningSession`: %v\n", resp)
        }
- path: /role-mining-sessions/{sessionId}/status
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-role-mining#get-role-mining-session-status
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sessionId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | The role mining session id # string | The role mining session id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIRoleMiningAPI.GetRoleMiningSessionStatus(context.Background(), sessionId).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIRoleMiningAPI.GetRoleMiningSessionStatus(context.Background(), sessionId).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIRoleMiningAPI.GetRoleMiningSessionStatus``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetRoleMiningSessionStatus`: RoleMiningSessionStatus
          fmt.Fprintf(os.Stdout, "Response from `IAIRoleMiningAPI.GetRoleMiningSessionStatus`: %v\n", resp)
        }
- path: /role-mining-sessions
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-role-mining#get-role-mining-sessions
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          filters := `saved eq "true" and name sw "RM Session"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **saved**: *eq*  **name**: *eq, sw* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **saved**: *eq*  **name**: *eq, sw* (optional)
          sorters := `createdBy,createdDate` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **createdBy, createdDate** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **createdBy, createdDate** (optional)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIRoleMiningAPI.GetRoleMiningSessions(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIRoleMiningAPI.GetRoleMiningSessions(context.Background()).XSailPointExperimental(xSailPointExperimental).Filters(filters).Sorters(sorters).Offset(offset).Limit(limit).Count(count).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIRoleMiningAPI.GetRoleMiningSessions``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetRoleMiningSessions`: []RoleMiningSessionDto
          fmt.Fprintf(os.Stdout, "Response from `IAIRoleMiningAPI.GetRoleMiningSessions`: %v\n", resp)
        }
- path: /role-mining-potential-roles/saved
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-role-mining#get-saved-potential-roles
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          sorters := `modified` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters/) Sorting is supported for the following fields: **modified** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters/) Sorting is supported for the following fields: **modified** (optional)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIRoleMiningAPI.GetSavedPotentialRoles(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IAIRoleMiningAPI.GetSavedPotentialRoles(context.Background()).XSailPointExperimental(xSailPointExperimental).Sorters(sorters).Offset(offset).Limit(limit).Count(count).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIRoleMiningAPI.GetSavedPotentialRoles``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetSavedPotentialRoles`: []RoleMiningSessionDraftRoleDto
          fmt.Fprintf(os.Stdout, "Response from `IAIRoleMiningAPI.GetSavedPotentialRoles`: %v\n", resp)
        }
- path: /role-mining-sessions/{sessionId}/potential-role-summaries/{potentialRoleId}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-role-mining#patch-potential-role
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sessionId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | The role mining session id # string | The role mining session id
          potentialRoleId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | The potential role summary id # string | The potential role summary id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          patchpotentialrolerequestinner := []byte(`[{op=remove, path=/description}, {op=replace, path=/description, value=Acct I - Potential Role}, {op=remove, path=/saved}, {op=replace, path=/saved, value=false}, {op=remove, path=/name}, {op=replace, path=/name, value=Potential Role Accounting}]`) // []PatchPotentialRoleRequestInner | 

          
          var patchPotentialRoleRequestInner []v2025.PatchPotentialRoleRequestInner
          if err := json.Unmarshal(patchpotentialrolerequestinner, &patchPotentialRoleRequestInner); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIRoleMiningAPI.PatchPotentialRole(context.Background(), sessionId, potentialRoleId).XSailPointExperimental(xSailPointExperimental).PatchPotentialRoleRequestInner(patchPotentialRoleRequestInner).Execute()
          //resp, r, err := apiClient.V2025.IAIRoleMiningAPI.PatchPotentialRole(context.Background(), sessionId, potentialRoleId).XSailPointExperimental(xSailPointExperimental).PatchPotentialRoleRequestInner(patchPotentialRoleRequestInner).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIRoleMiningAPI.PatchPotentialRole``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchPotentialRole`: map[string]interface{}
          fmt.Fprintf(os.Stdout, "Response from `IAIRoleMiningAPI.PatchPotentialRole`: %v\n", resp)
        }
- path: /role-mining-potential-roles/{potentialRoleId}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-role-mining#patch-potential-role-0
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sessionId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | The role mining session id # string | The role mining session id
          potentialRoleId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | The potential role summary id # string | The potential role summary id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          patchpotentialrolerequestinner := []byte(`[{op=remove, path=/description}, {op=replace, path=/description, value=Acct I - Potential Role}, {op=remove, path=/saved}, {op=replace, path=/saved, value=false}, {op=remove, path=/name}, {op=replace, path=/name, value=Potential Role Accounting}]`) // []PatchPotentialRoleRequestInner | 

          
          var patchPotentialRoleRequestInner []v2025.PatchPotentialRoleRequestInner
          if err := json.Unmarshal(patchpotentialrolerequestinner, &patchPotentialRoleRequestInner); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIRoleMiningAPI.PatchPotentialRole_0(context.Background(), sessionId, potentialRoleId).XSailPointExperimental(xSailPointExperimental).PatchPotentialRoleRequestInner(patchPotentialRoleRequestInner).Execute()
          //resp, r, err := apiClient.V2025.IAIRoleMiningAPI.PatchPotentialRole_0(context.Background(), sessionId, potentialRoleId).XSailPointExperimental(xSailPointExperimental).PatchPotentialRoleRequestInner(patchPotentialRoleRequestInner).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIRoleMiningAPI.PatchPotentialRole_0``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchPotentialRole_0`: map[string]interface{}
          fmt.Fprintf(os.Stdout, "Response from `IAIRoleMiningAPI.PatchPotentialRole_0`: %v\n", resp)
        }
- path: /role-mining-sessions/{sessionId}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-role-mining#patch-role-mining-session
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sessionId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | The role mining session id to be patched # string | The role mining session id to be patched
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          jsonpatchoperation := []byte(`[{op=replace, path=/pruneThreshold, value=83}, {op=replace, path=/minNumIdentitiesInPotentialRole, value=10}, {op=replace, path=/saved, value=false}, {op=replace, path=/name, value=RM Session - 07/10/22}, {op=add, path=/name, value=RM Session - 07/10/22}]`) // []JsonPatchOperation | Replace pruneThreshold and/or minNumIdentitiesInPotentialRole in role mining session. Update saved status or saved name for a role mining session.

          
          var jsonPatchOperation []v2025.JsonPatchOperation
          if err := json.Unmarshal(jsonpatchoperation, &jsonPatchOperation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIRoleMiningAPI.PatchRoleMiningSession(context.Background(), sessionId).XSailPointExperimental(xSailPointExperimental).JsonPatchOperation(jsonPatchOperation).Execute()
          //resp, r, err := apiClient.V2025.IAIRoleMiningAPI.PatchRoleMiningSession(context.Background(), sessionId).XSailPointExperimental(xSailPointExperimental).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIRoleMiningAPI.PatchRoleMiningSession``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchRoleMiningSession`: map[string]interface{}
          fmt.Fprintf(os.Stdout, "Response from `IAIRoleMiningAPI.PatchRoleMiningSession`: %v\n", resp)
        }
- path: /role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/edit-entitlements
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/iai-role-mining#update-entitlements-potential-role
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sessionId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | The role mining session id # string | The role mining session id
          potentialRoleId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | A potential role id in a role mining session # string | A potential role id in a role mining session
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           roleminingpotentialroleeditentitlements := []byte(`{
          "ids" : [ "entId1", "entId2" ],
          "exclude" : true
        }`) // RoleMiningPotentialRoleEditEntitlements | Role mining session parameters

          
          var roleMiningPotentialRoleEditEntitlements v2025.RoleMiningPotentialRoleEditEntitlements
          if err := json.Unmarshal(roleminingpotentialroleeditentitlements, &roleMiningPotentialRoleEditEntitlements); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IAIRoleMiningAPI.UpdateEntitlementsPotentialRole(context.Background(), sessionId, potentialRoleId).XSailPointExperimental(xSailPointExperimental).RoleMiningPotentialRoleEditEntitlements(roleMiningPotentialRoleEditEntitlements).Execute()
          //resp, r, err := apiClient.V2025.IAIRoleMiningAPI.UpdateEntitlementsPotentialRole(context.Background(), sessionId, potentialRoleId).XSailPointExperimental(xSailPointExperimental).RoleMiningPotentialRoleEditEntitlements(roleMiningPotentialRoleEditEntitlements).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IAIRoleMiningAPI.UpdateEntitlementsPotentialRole``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateEntitlementsPotentialRole`: RoleMiningPotentialRole
          fmt.Fprintf(os.Stdout, "Response from `IAIRoleMiningAPI.UpdateEntitlementsPotentialRole`: %v\n", resp)
        }
- path: /icons/{objectType}/{objectId}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/icons#delete-icon
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          objectType := `application` // string | Object type. Available options ['application'] # string | Object type. Available options ['application']
          objectId := `a291e870-48c3-4953-b656-fb5ce2a93169` // string | Object id. # string | Object id.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.IconsAPI.DeleteIcon(context.Background(), objectType, objectId).XSailPointExperimental(xSailPointExperimental).Execute()
          //r, err := apiClient.V2025.IconsAPI.DeleteIcon(context.Background(), objectType, objectId).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IconsAPI.DeleteIcon``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /icons/{objectType}/{objectId}
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/icons#set-icon
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          objectType := `application` // string | Object type. Available options ['application'] # string | Object type. Available options ['application']
          objectId := `a291e870-48c3-4953-b656-fb5ce2a93169` // string | Object id. # string | Object id.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          image := BINARY_DATA_HERE // *os.File | file with icon. Allowed mime-types ['image/png', 'image/jpeg'] # *os.File | file with icon. Allowed mime-types ['image/png', 'image/jpeg']

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IconsAPI.SetIcon(context.Background(), objectType, objectId).XSailPointExperimental(xSailPointExperimental).Image(image).Execute()
          //resp, r, err := apiClient.V2025.IconsAPI.SetIcon(context.Background(), objectType, objectId).XSailPointExperimental(xSailPointExperimental).Image(image).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IconsAPI.SetIcon``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SetIcon`: SetIcon200Response
          fmt.Fprintf(os.Stdout, "Response from `IconsAPI.SetIcon`: %v\n", resp)
        }
- path: /identities/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identities#delete-identity
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | Identity Id # string | Identity Id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.IdentitiesAPI.DeleteIdentity(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //r, err := apiClient.V2025.IdentitiesAPI.DeleteIdentity(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentitiesAPI.DeleteIdentity``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /identities/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identities#get-identity
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | Identity Id # string | Identity Id

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentitiesAPI.GetIdentity(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.IdentitiesAPI.GetIdentity(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentitiesAPI.GetIdentity``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetIdentity`: Identity
          fmt.Fprintf(os.Stdout, "Response from `IdentitiesAPI.GetIdentity`: %v\n", resp)
        }
- path: /identities/{identityId}/ownership
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identities#get-identity-ownership-details
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          identityId := `ff8081814d2a8036014d701f3fbf53fa` // string | Identity ID. # string | Identity ID.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentitiesAPI.GetIdentityOwnershipDetails(context.Background(), identityId).Execute()
          //resp, r, err := apiClient.V2025.IdentitiesAPI.GetIdentityOwnershipDetails(context.Background(), identityId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentitiesAPI.GetIdentityOwnershipDetails``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetIdentityOwnershipDetails`: IdentityOwnershipAssociationDetails
          fmt.Fprintf(os.Stdout, "Response from `IdentitiesAPI.GetIdentityOwnershipDetails`: %v\n", resp)
        }
- path: /identities/{identityId}/role-assignments/{assignmentId}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identities#get-role-assignment
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          identityId := `ef38f94347e94562b5bb8424a56397d8` // string | Identity Id # string | Identity Id
          assignmentId := `1cbb0705b38c4226b1334eadd8874086` // string | Assignment Id # string | Assignment Id

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentitiesAPI.GetRoleAssignment(context.Background(), identityId, assignmentId).Execute()
          //resp, r, err := apiClient.V2025.IdentitiesAPI.GetRoleAssignment(context.Background(), identityId, assignmentId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentitiesAPI.GetRoleAssignment``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetRoleAssignment`: RoleAssignmentDto
          fmt.Fprintf(os.Stdout, "Response from `IdentitiesAPI.GetRoleAssignment`: %v\n", resp)
        }
- path: /identities/{identityId}/role-assignments
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identities#get-role-assignments
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          identityId := `ef38f94347e94562b5bb8424a56397d8` // string | Identity Id to get the role assignments for # string | Identity Id to get the role assignments for
          roleId := `e7697a1e96d04db1ac7b0f4544915d2c` // string | Role Id to filter the role assignments with (optional) # string | Role Id to filter the role assignments with (optional)
          roleName := `Engineer` // string | Role name to filter the role assignments with (optional) # string | Role name to filter the role assignments with (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentitiesAPI.GetRoleAssignments(context.Background(), identityId).Execute()
          //resp, r, err := apiClient.V2025.IdentitiesAPI.GetRoleAssignments(context.Background(), identityId).RoleId(roleId).RoleName(roleName).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentitiesAPI.GetRoleAssignments``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetRoleAssignments`: []GetRoleAssignments200ResponseInner
          fmt.Fprintf(os.Stdout, "Response from `IdentitiesAPI.GetRoleAssignments`: %v\n", resp)
        }
- path: /identities
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identities#list-identities
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          filters := `id eq "6c9079b270a266a60170a2779fcb0006" or correlated eq false` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **alias**: *eq, sw*  **firstname**: *eq, sw*  **lastname**: *eq, sw*  **email**: *eq, sw*  **cloudStatus**: *eq*  **processingState**: *eq*  **correlated**: *eq*  **protected**: *eq* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **alias**: *eq, sw*  **firstname**: *eq, sw*  **lastname**: *eq, sw*  **email**: *eq, sw*  **cloudStatus**: *eq*  **processingState**: *eq*  **correlated**: *eq*  **protected**: *eq* (optional)
          sorters := `name,-cloudStatus` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, alias, cloudStatus** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, alias, cloudStatus** (optional)
          defaultFilter := `NONE` // string | Adds additional filter to filters query parameter.  CORRELATED_ONLY adds correlated=true and returns only identities that are correlated.  NONE does not add any and returns all identities that satisfy filters query parameter. (optional) (default to "CORRELATED_ONLY") # string | Adds additional filter to filters query parameter.  CORRELATED_ONLY adds correlated=true and returns only identities that are correlated.  NONE does not add any and returns all identities that satisfy filters query parameter. (optional) (default to "CORRELATED_ONLY")
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentitiesAPI.ListIdentities(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.IdentitiesAPI.ListIdentities(context.Background()).Filters(filters).Sorters(sorters).DefaultFilter(defaultFilter).Count(count).Limit(limit).Offset(offset).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentitiesAPI.ListIdentities``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListIdentities`: []Identity
          fmt.Fprintf(os.Stdout, "Response from `IdentitiesAPI.ListIdentities`: %v\n", resp)
        }
- path: /identities/{id}/reset
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identities#reset-identity
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          identityId := `ef38f94347e94562b5bb8424a56397d8` // string | Identity Id # string | Identity Id

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.IdentitiesAPI.ResetIdentity(context.Background(), identityId).Execute()
          //r, err := apiClient.V2025.IdentitiesAPI.ResetIdentity(context.Background(), identityId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentitiesAPI.ResetIdentity``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /identities/{id}/verification/account/send
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identities#send-identity-verification-account-token
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          id := `ef38f94347e94562b5bb8424a56397d8` // string | Identity ID # string | Identity ID
           sendaccountverificationrequest := []byte(`{
          "sourceName" : "Active Directory Source",
          "via" : "EMAIL_WORK"
        }`) // SendAccountVerificationRequest | 

          
          var sendAccountVerificationRequest v2025.SendAccountVerificationRequest
          if err := json.Unmarshal(sendaccountverificationrequest, &sendAccountVerificationRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.IdentitiesAPI.SendIdentityVerificationAccountToken(context.Background(), id).XSailPointExperimental(xSailPointExperimental).SendAccountVerificationRequest(sendAccountVerificationRequest).Execute()
          //r, err := apiClient.V2025.IdentitiesAPI.SendIdentityVerificationAccountToken(context.Background(), id).XSailPointExperimental(xSailPointExperimental).SendAccountVerificationRequest(sendAccountVerificationRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentitiesAPI.SendIdentityVerificationAccountToken``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /identities/invite
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identities#start-identities-invite
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           inviteidentitiesrequest := []byte(`{
          "ids" : [ "2b568c65bc3c4c57a43bd97e3a8e55", "2c9180867769897d01776ed5f125512f" ],
          "uninvited" : false
        }`) // InviteIdentitiesRequest | 

          
          var inviteIdentitiesRequest v2025.InviteIdentitiesRequest
          if err := json.Unmarshal(inviteidentitiesrequest, &inviteIdentitiesRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentitiesAPI.StartIdentitiesInvite(context.Background()).InviteIdentitiesRequest(inviteIdentitiesRequest).Execute()
          //resp, r, err := apiClient.V2025.IdentitiesAPI.StartIdentitiesInvite(context.Background()).InviteIdentitiesRequest(inviteIdentitiesRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentitiesAPI.StartIdentitiesInvite``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `StartIdentitiesInvite`: TaskStatus
          fmt.Fprintf(os.Stdout, "Response from `IdentitiesAPI.StartIdentitiesInvite`: %v\n", resp)
        }
- path: /identities/process
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identities#start-identity-processing
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           processidentitiesrequest := []byte(`{
          "identityIds" : [ "ef38f94347e94562b5bb8424a56397d8", "ef38f94347e94562b5bb8424a56397d8", "ef38f94347e94562b5bb8424a56397d8", "ef38f94347e94562b5bb8424a56397d8", "ef38f94347e94562b5bb8424a56397d8" ]
        }`) // ProcessIdentitiesRequest | 

          
          var processIdentitiesRequest v2025.ProcessIdentitiesRequest
          if err := json.Unmarshal(processidentitiesrequest, &processIdentitiesRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentitiesAPI.StartIdentityProcessing(context.Background()).XSailPointExperimental(xSailPointExperimental).ProcessIdentitiesRequest(processIdentitiesRequest).Execute()
          //resp, r, err := apiClient.V2025.IdentitiesAPI.StartIdentityProcessing(context.Background()).XSailPointExperimental(xSailPointExperimental).ProcessIdentitiesRequest(processIdentitiesRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentitiesAPI.StartIdentityProcessing``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `StartIdentityProcessing`: TaskResultResponse
          fmt.Fprintf(os.Stdout, "Response from `IdentitiesAPI.StartIdentityProcessing`: %v\n", resp)
        }
- path: /identities/{identityId}/synchronize-attributes
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identities#synchronize-attributes-for-identity
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          identityId := `identityId_example` // string | The Identity id # string | The Identity id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentitiesAPI.SynchronizeAttributesForIdentity(context.Background(), identityId).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IdentitiesAPI.SynchronizeAttributesForIdentity(context.Background(), identityId).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentitiesAPI.SynchronizeAttributesForIdentity``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SynchronizeAttributesForIdentity`: IdentitySyncJob
          fmt.Fprintf(os.Stdout, "Response from `IdentitiesAPI.SynchronizeAttributesForIdentity`: %v\n", resp)
        }
- path: /identity-attributes
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identity-attributes#create-identity-attribute
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           identityattribute := []byte(`{
          "standard" : false,
          "system" : false,
          "sources" : [ {
            "type" : "rule",
            "properties" : {
              "ruleType" : "IdentityAttribute",
              "ruleName" : "Cloud Promote Identity Attribute"
            }
          }, {
            "type" : "rule",
            "properties" : {
              "ruleType" : "IdentityAttribute",
              "ruleName" : "Cloud Promote Identity Attribute"
            }
          } ],
          "displayName" : "Cost Center",
          "name" : "costCenter",
          "type" : "string",
          "searchable" : false,
          "multi" : false
        }`) // IdentityAttribute | 

          
          var identityAttribute v2025.IdentityAttribute
          if err := json.Unmarshal(identityattribute, &identityAttribute); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentityAttributesAPI.CreateIdentityAttribute(context.Background()).IdentityAttribute(identityAttribute).Execute()
          //resp, r, err := apiClient.V2025.IdentityAttributesAPI.CreateIdentityAttribute(context.Background()).IdentityAttribute(identityAttribute).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentityAttributesAPI.CreateIdentityAttribute``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateIdentityAttribute`: IdentityAttribute
          fmt.Fprintf(os.Stdout, "Response from `IdentityAttributesAPI.CreateIdentityAttribute`: %v\n", resp)
        }
- path: /identity-attributes/{name}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identity-attributes#delete-identity-attribute
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          name := `displayName` // string | The attribute's technical name. # string | The attribute's technical name.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.IdentityAttributesAPI.DeleteIdentityAttribute(context.Background(), name).Execute()
          //r, err := apiClient.V2025.IdentityAttributesAPI.DeleteIdentityAttribute(context.Background(), name).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentityAttributesAPI.DeleteIdentityAttribute``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /identity-attributes/bulk-delete
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identity-attributes#delete-identity-attributes-in-bulk
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           identityattributenames := []byte(`{
          "ids" : [ "name", "displayName" ]
        }`) // IdentityAttributeNames | 

          
          var identityAttributeNames v2025.IdentityAttributeNames
          if err := json.Unmarshal(identityattributenames, &identityAttributeNames); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.IdentityAttributesAPI.DeleteIdentityAttributesInBulk(context.Background()).IdentityAttributeNames(identityAttributeNames).Execute()
          //r, err := apiClient.V2025.IdentityAttributesAPI.DeleteIdentityAttributesInBulk(context.Background()).IdentityAttributeNames(identityAttributeNames).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentityAttributesAPI.DeleteIdentityAttributesInBulk``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /identity-attributes/{name}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identity-attributes#get-identity-attribute
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          name := `displayName` // string | The attribute's technical name. # string | The attribute's technical name.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentityAttributesAPI.GetIdentityAttribute(context.Background(), name).Execute()
          //resp, r, err := apiClient.V2025.IdentityAttributesAPI.GetIdentityAttribute(context.Background(), name).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentityAttributesAPI.GetIdentityAttribute``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetIdentityAttribute`: IdentityAttribute
          fmt.Fprintf(os.Stdout, "Response from `IdentityAttributesAPI.GetIdentityAttribute`: %v\n", resp)
        }
- path: /identity-attributes
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identity-attributes#list-identity-attributes
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          includeSystem := false // bool | Include 'system' attributes in the response. (optional) (default to false) # bool | Include 'system' attributes in the response. (optional) (default to false)
          includeSilent := false // bool | Include 'silent' attributes in the response. (optional) (default to false) # bool | Include 'silent' attributes in the response. (optional) (default to false)
          searchableOnly := false // bool | Include only 'searchable' attributes in the response. (optional) (default to false) # bool | Include only 'searchable' attributes in the response. (optional) (default to false)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentityAttributesAPI.ListIdentityAttributes(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.IdentityAttributesAPI.ListIdentityAttributes(context.Background()).IncludeSystem(includeSystem).IncludeSilent(includeSilent).SearchableOnly(searchableOnly).Count(count).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentityAttributesAPI.ListIdentityAttributes``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListIdentityAttributes`: []IdentityAttribute
          fmt.Fprintf(os.Stdout, "Response from `IdentityAttributesAPI.ListIdentityAttributes`: %v\n", resp)
        }
- path: /identity-attributes/{name}
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identity-attributes#put-identity-attribute
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          name := `displayName` // string | The attribute's technical name. # string | The attribute's technical name.
           identityattribute := []byte(`{
          "standard" : false,
          "system" : false,
          "sources" : [ {
            "type" : "rule",
            "properties" : {
              "ruleType" : "IdentityAttribute",
              "ruleName" : "Cloud Promote Identity Attribute"
            }
          }, {
            "type" : "rule",
            "properties" : {
              "ruleType" : "IdentityAttribute",
              "ruleName" : "Cloud Promote Identity Attribute"
            }
          } ],
          "displayName" : "Cost Center",
          "name" : "costCenter",
          "type" : "string",
          "searchable" : false,
          "multi" : false
        }`) // IdentityAttribute | 

          
          var identityAttribute v2025.IdentityAttribute
          if err := json.Unmarshal(identityattribute, &identityAttribute); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentityAttributesAPI.PutIdentityAttribute(context.Background(), name).IdentityAttribute(identityAttribute).Execute()
          //resp, r, err := apiClient.V2025.IdentityAttributesAPI.PutIdentityAttribute(context.Background(), name).IdentityAttribute(identityAttribute).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentityAttributesAPI.PutIdentityAttribute``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PutIdentityAttribute`: IdentityAttribute
          fmt.Fprintf(os.Stdout, "Response from `IdentityAttributesAPI.PutIdentityAttribute`: %v\n", resp)
        }
- path: /historical-identities/{id}/compare
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identity-history#compare-identity-snapshots
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `8c190e6787aa4ed9a90bd9d5344523fb` // string | The identity id # string | The identity id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          snapshot1 := `2007-03-01T13:00:00Z` // string | The snapshot 1 of identity (optional) # string | The snapshot 1 of identity (optional)
          snapshot2 := `2008-03-01T13:00:00Z` // string | The snapshot 2 of identity (optional) # string | The snapshot 2 of identity (optional)
          accessitemtypes := []byte(``) // []string | An optional list of access item types (app, account, entitlement, etc...) to return.   If null or empty, all access items types are returned  (optional)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentityHistoryAPI.CompareIdentitySnapshots(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IdentityHistoryAPI.CompareIdentitySnapshots(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Snapshot1(snapshot1).Snapshot2(snapshot2).AccessItemTypes(accessItemTypes).Limit(limit).Offset(offset).Count(count).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentityHistoryAPI.CompareIdentitySnapshots``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CompareIdentitySnapshots`: []IdentityCompareResponse
          fmt.Fprintf(os.Stdout, "Response from `IdentityHistoryAPI.CompareIdentitySnapshots`: %v\n", resp)
        }
- path: /historical-identities/{id}/compare/{access-type}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identity-history#compare-identity-snapshots-access-type
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `8c190e6787aa4ed9a90bd9d5344523fb` // string | The identity id # string | The identity id
          accessType := `role` // string | The specific type which needs to be compared # string | The specific type which needs to be compared
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          accessAssociated := 2007-03-01T13:00:00Z // bool | Indicates if added or removed access needs to be returned. true - added, false - removed, null - both added & removed (optional) # bool | Indicates if added or removed access needs to be returned. true - added, false - removed, null - both added & removed (optional)
          snapshot1 := `2008-03-01T13:00:00Z` // string | The snapshot 1 of identity (optional) # string | The snapshot 1 of identity (optional)
          snapshot2 := `2009-03-01T13:00:00Z` // string | The snapshot 2 of identity (optional) # string | The snapshot 2 of identity (optional)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentityHistoryAPI.CompareIdentitySnapshotsAccessType(context.Background(), id, accessType).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IdentityHistoryAPI.CompareIdentitySnapshotsAccessType(context.Background(), id, accessType).XSailPointExperimental(xSailPointExperimental).AccessAssociated(accessAssociated).Snapshot1(snapshot1).Snapshot2(snapshot2).Limit(limit).Offset(offset).Count(count).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentityHistoryAPI.CompareIdentitySnapshotsAccessType``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CompareIdentitySnapshotsAccessType`: []AccessItemDiff
          fmt.Fprintf(os.Stdout, "Response from `IdentityHistoryAPI.CompareIdentitySnapshotsAccessType`: %v\n", resp)
        }
- path: /historical-identities/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identity-history#get-historical-identity
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `8c190e6787aa4ed9a90bd9d5344523fb` // string | The identity id # string | The identity id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentityHistoryAPI.GetHistoricalIdentity(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IdentityHistoryAPI.GetHistoricalIdentity(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentityHistoryAPI.GetHistoricalIdentity``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetHistoricalIdentity`: IdentityHistoryResponse
          fmt.Fprintf(os.Stdout, "Response from `IdentityHistoryAPI.GetHistoricalIdentity`: %v\n", resp)
        }
- path: /historical-identities/{id}/events
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identity-history#get-historical-identity-events
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `8c190e6787aa4ed9a90bd9d5344523fb` // string | The identity id # string | The identity id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          from := `2024-03-01T13:00:00Z` // string | The optional instant until which access events are returned (optional) # string | The optional instant until which access events are returned (optional)
          eventtypes := []byte(`[AccessAddedEvent, AccessRemovedEvent]`) // []string | An optional list of event types to return.  If null or empty, all events are returned (optional)
          accessitemtypes := []byte(`[entitlement, account]`) // []string | An optional list of access item types (app, account, entitlement, etc...) to return.   If null or empty, all access items types are returned (optional)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentityHistoryAPI.GetHistoricalIdentityEvents(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IdentityHistoryAPI.GetHistoricalIdentityEvents(context.Background(), id).XSailPointExperimental(xSailPointExperimental).From(from).EventTypes(eventTypes).AccessItemTypes(accessItemTypes).Limit(limit).Offset(offset).Count(count).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentityHistoryAPI.GetHistoricalIdentityEvents``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetHistoricalIdentityEvents`: []GetHistoricalIdentityEvents200ResponseInner
          fmt.Fprintf(os.Stdout, "Response from `IdentityHistoryAPI.GetHistoricalIdentityEvents`: %v\n", resp)
        }
- path: /historical-identities/{id}/snapshots/{date}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identity-history#get-identity-snapshot
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `8c190e6787aa4ed9a90bd9d5344523fb` // string | The identity id # string | The identity id
          date := `2007-03-01T13:00:00Z` // string | The specified date # string | The specified date
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentityHistoryAPI.GetIdentitySnapshot(context.Background(), id, date).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IdentityHistoryAPI.GetIdentitySnapshot(context.Background(), id, date).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentityHistoryAPI.GetIdentitySnapshot``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetIdentitySnapshot`: IdentityHistoryResponse
          fmt.Fprintf(os.Stdout, "Response from `IdentityHistoryAPI.GetIdentitySnapshot`: %v\n", resp)
        }
- path: /historical-identities/{id}/snapshot-summary
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identity-history#get-identity-snapshot-summary
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `8c190e6787aa4ed9a90bd9d5344523fb` // string | The identity id # string | The identity id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          before := `2007-03-01T13:00:00Z` // string | The date before which snapshot summary is required (optional) # string | The date before which snapshot summary is required (optional)
          interval := `interval_example` // string | The interval indicating day or month. Defaults to month if not specified (optional) # string | The interval indicating day or month. Defaults to month if not specified (optional)
          timeZone := `UTC` // string | The time zone. Defaults to UTC if not provided (optional) # string | The time zone. Defaults to UTC if not provided (optional)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentityHistoryAPI.GetIdentitySnapshotSummary(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IdentityHistoryAPI.GetIdentitySnapshotSummary(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Before(before).Interval(interval).TimeZone(timeZone).Limit(limit).Offset(offset).Count(count).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentityHistoryAPI.GetIdentitySnapshotSummary``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetIdentitySnapshotSummary`: []MetricResponse
          fmt.Fprintf(os.Stdout, "Response from `IdentityHistoryAPI.GetIdentitySnapshotSummary`: %v\n", resp)
        }
- path: /historical-identities/{id}/start-date
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identity-history#get-identity-start-date
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `8c190e6787aa4ed9a90bd9d5344523fb` // string | The identity id # string | The identity id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentityHistoryAPI.GetIdentityStartDate(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IdentityHistoryAPI.GetIdentityStartDate(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentityHistoryAPI.GetIdentityStartDate``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetIdentityStartDate`: string
          fmt.Fprintf(os.Stdout, "Response from `IdentityHistoryAPI.GetIdentityStartDate`: %v\n", resp)
        }
- path: /historical-identities
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identity-history#list-historical-identities
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          startsWithQuery := `Ada` // string | This param is used for starts-with search for first, last and display name of the identity (optional) # string | This param is used for starts-with search for first, last and display name of the identity (optional)
          isDeleted := true // bool | Indicates if we want to only list down deleted identities or not. (optional) # bool | Indicates if we want to only list down deleted identities or not. (optional)
          isActive := true // bool | Indicates if we want to only list active or inactive identities. (optional) # bool | Indicates if we want to only list active or inactive identities. (optional)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentityHistoryAPI.ListHistoricalIdentities(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IdentityHistoryAPI.ListHistoricalIdentities(context.Background()).XSailPointExperimental(xSailPointExperimental).StartsWithQuery(startsWithQuery).IsDeleted(isDeleted).IsActive(isActive).Limit(limit).Offset(offset).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentityHistoryAPI.ListHistoricalIdentities``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListHistoricalIdentities`: []IdentityListItem
          fmt.Fprintf(os.Stdout, "Response from `IdentityHistoryAPI.ListHistoricalIdentities`: %v\n", resp)
        }
- path: /historical-identities/{id}/access-items
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identity-history#list-identity-access-items
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `8c190e6787aa4ed9a90bd9d5344523fb` // string | The identity id # string | The identity id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          type_ := `account` // string | The type of access item for the identity. If not provided, it defaults to account (optional) # string | The type of access item for the identity. If not provided, it defaults to account (optional)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentityHistoryAPI.ListIdentityAccessItems(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IdentityHistoryAPI.ListIdentityAccessItems(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Type_(type_).Limit(limit).Count(count).Offset(offset).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentityHistoryAPI.ListIdentityAccessItems``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListIdentityAccessItems`: []ListIdentityAccessItems200ResponseInner
          fmt.Fprintf(os.Stdout, "Response from `IdentityHistoryAPI.ListIdentityAccessItems`: %v\n", resp)
        }
- path: /historical-identities/{id}/snapshots/{date}/access-items
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identity-history#list-identity-snapshot-access-items
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `8c190e6787aa4ed9a90bd9d5344523fb` // string | The identity id # string | The identity id
          date := `2007-03-01T13:00:00Z` // string | The specified date # string | The specified date
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          type_ := `account` // string | The access item type (optional) # string | The access item type (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentityHistoryAPI.ListIdentitySnapshotAccessItems(context.Background(), id, date).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IdentityHistoryAPI.ListIdentitySnapshotAccessItems(context.Background(), id, date).XSailPointExperimental(xSailPointExperimental).Type_(type_).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentityHistoryAPI.ListIdentitySnapshotAccessItems``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListIdentitySnapshotAccessItems`: []ListIdentityAccessItems200ResponseInner
          fmt.Fprintf(os.Stdout, "Response from `IdentityHistoryAPI.ListIdentitySnapshotAccessItems`: %v\n", resp)
        }
- path: /historical-identities/{id}/snapshots
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identity-history#list-identity-snapshots
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `8c190e6787aa4ed9a90bd9d5344523fb` // string | The identity id # string | The identity id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          start := `2007-03-01T13:00:00Z` // string | The specified start date (optional) # string | The specified start date (optional)
          interval := `interval_example` // string | The interval indicating the range in day or month for the specified interval-name (optional) # string | The interval indicating the range in day or month for the specified interval-name (optional)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentityHistoryAPI.ListIdentitySnapshots(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.IdentityHistoryAPI.ListIdentitySnapshots(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Start(start).Interval(interval).Limit(limit).Offset(offset).Count(count).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentityHistoryAPI.ListIdentitySnapshots``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListIdentitySnapshots`: []IdentitySnapshotSummaryResponse
          fmt.Fprintf(os.Stdout, "Response from `IdentityHistoryAPI.ListIdentitySnapshots`: %v\n", resp)
        }
- path: /identity-profiles
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identity-profiles#create-identity-profile
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           identityprofile := []byte(`{
          "owner" : {
            "name" : "William Wilson",
            "id" : "2c9180835d191a86015d28455b4b232a",
            "type" : "IDENTITY"
          },
          "identityExceptionReportReference" : {
            "reportName" : "My annual report",
            "taskResultId" : "2b838de9-db9b-abcf-e646-d4f274ad4238"
          },
          "authoritativeSource" : {
            "name" : "HR Active Directory",
            "id" : "2c9180835d191a86015d28455b4b232a",
            "type" : "SOURCE"
          },
          "hasTimeBasedAttr" : true,
          "created" : "2015-05-28T14:07:17Z",
          "description" : "My custom flat file profile",
          "identityRefreshRequired" : true,
          "identityCount" : 8,
          "priority" : 10,
          "identityAttributeConfig" : {
            "attributeTransforms" : [ {
              "transformDefinition" : {
                "attributes" : {
                  "attributeName" : "e-mail",
                  "sourceName" : "MySource",
                  "sourceId" : "2c9180877a826e68017a8c0b03da1a53"
                },
                "type" : "accountAttribute"
              },
              "identityAttributeName" : "email"
            }, {
              "transformDefinition" : {
                "attributes" : {
                  "attributeName" : "e-mail",
                  "sourceName" : "MySource",
                  "sourceId" : "2c9180877a826e68017a8c0b03da1a53"
                },
                "type" : "accountAttribute"
              },
              "identityAttributeName" : "email"
            } ],
            "enabled" : true
          },
          "name" : "aName",
          "modified" : "2015-05-28T14:07:17Z",
          "id" : "id12345"
        }`) // IdentityProfile | 

          
          var identityProfile v2025.IdentityProfile
          if err := json.Unmarshal(identityprofile, &identityProfile); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentityProfilesAPI.CreateIdentityProfile(context.Background()).IdentityProfile(identityProfile).Execute()
          //resp, r, err := apiClient.V2025.IdentityProfilesAPI.CreateIdentityProfile(context.Background()).IdentityProfile(identityProfile).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentityProfilesAPI.CreateIdentityProfile``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateIdentityProfile`: IdentityProfile
          fmt.Fprintf(os.Stdout, "Response from `IdentityProfilesAPI.CreateIdentityProfile`: %v\n", resp)
        }
- path: /identity-profiles/{identity-profile-id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identity-profiles#delete-identity-profile
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          identityProfileId := `ef38f94347e94562b5bb8424a56397d8` // string | Identity profile ID. # string | Identity profile ID.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentityProfilesAPI.DeleteIdentityProfile(context.Background(), identityProfileId).Execute()
          //resp, r, err := apiClient.V2025.IdentityProfilesAPI.DeleteIdentityProfile(context.Background(), identityProfileId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentityProfilesAPI.DeleteIdentityProfile``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `DeleteIdentityProfile`: TaskResultSimplified
          fmt.Fprintf(os.Stdout, "Response from `IdentityProfilesAPI.DeleteIdentityProfile`: %v\n", resp)
        }
- path: /identity-profiles/bulk-delete
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identity-profiles#delete-identity-profiles
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          requestbody := []byte(``) // []string | Identity Profile bulk delete request body.

          
          var requestBody []v2025.RequestBody
          if err := json.Unmarshal(requestbody, &requestBody); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentityProfilesAPI.DeleteIdentityProfiles(context.Background()).RequestBody(requestBody).Execute()
          //resp, r, err := apiClient.V2025.IdentityProfilesAPI.DeleteIdentityProfiles(context.Background()).RequestBody(requestBody).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentityProfilesAPI.DeleteIdentityProfiles``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `DeleteIdentityProfiles`: TaskResultSimplified
          fmt.Fprintf(os.Stdout, "Response from `IdentityProfilesAPI.DeleteIdentityProfiles`: %v\n", resp)
        }
- path: /identity-profiles/export
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identity-profiles#export-identity-profiles
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `id eq "ef38f94347e94562b5bb8424a56397d8"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ne*  **name**: *eq, ne*  **priority**: *eq, ne* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ne*  **name**: *eq, ne*  **priority**: *eq, ne* (optional)
          sorters := `id,name` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, priority** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, priority** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentityProfilesAPI.ExportIdentityProfiles(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.IdentityProfilesAPI.ExportIdentityProfiles(context.Background()).Limit(limit).Offset(offset).Count(count).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentityProfilesAPI.ExportIdentityProfiles``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ExportIdentityProfiles`: []IdentityProfileExportedObject
          fmt.Fprintf(os.Stdout, "Response from `IdentityProfilesAPI.ExportIdentityProfiles`: %v\n", resp)
        }
- path: /identity-profiles/identity-preview
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identity-profiles#generate-identity-preview
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           identitypreviewrequest := []byte(`{
          "identityId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "identityAttributeConfig" : {
            "attributeTransforms" : [ {
              "transformDefinition" : {
                "attributes" : {
                  "attributeName" : "e-mail",
                  "sourceName" : "MySource",
                  "sourceId" : "2c9180877a826e68017a8c0b03da1a53"
                },
                "type" : "accountAttribute"
              },
              "identityAttributeName" : "email"
            }, {
              "transformDefinition" : {
                "attributes" : {
                  "attributeName" : "e-mail",
                  "sourceName" : "MySource",
                  "sourceId" : "2c9180877a826e68017a8c0b03da1a53"
                },
                "type" : "accountAttribute"
              },
              "identityAttributeName" : "email"
            } ],
            "enabled" : true
          }
        }`) // IdentityPreviewRequest | Identity Preview request body.

          
          var identityPreviewRequest v2025.IdentityPreviewRequest
          if err := json.Unmarshal(identitypreviewrequest, &identityPreviewRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentityProfilesAPI.GenerateIdentityPreview(context.Background()).XSailPointExperimental(xSailPointExperimental).IdentityPreviewRequest(identityPreviewRequest).Execute()
          //resp, r, err := apiClient.V2025.IdentityProfilesAPI.GenerateIdentityPreview(context.Background()).XSailPointExperimental(xSailPointExperimental).IdentityPreviewRequest(identityPreviewRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentityProfilesAPI.GenerateIdentityPreview``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GenerateIdentityPreview`: IdentityPreviewResponse
          fmt.Fprintf(os.Stdout, "Response from `IdentityProfilesAPI.GenerateIdentityPreview`: %v\n", resp)
        }
- path: /identity-profiles/{identity-profile-id}/default-identity-attribute-config
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identity-profiles#get-default-identity-attribute-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          identityProfileId := `2b838de9-db9b-abcf-e646-d4f274ad4238` // string | The Identity Profile ID. # string | The Identity Profile ID.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentityProfilesAPI.GetDefaultIdentityAttributeConfig(context.Background(), identityProfileId).Execute()
          //resp, r, err := apiClient.V2025.IdentityProfilesAPI.GetDefaultIdentityAttributeConfig(context.Background(), identityProfileId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentityProfilesAPI.GetDefaultIdentityAttributeConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetDefaultIdentityAttributeConfig`: IdentityAttributeConfig
          fmt.Fprintf(os.Stdout, "Response from `IdentityProfilesAPI.GetDefaultIdentityAttributeConfig`: %v\n", resp)
        }
- path: /identity-profiles/{identity-profile-id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identity-profiles#get-identity-profile
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          identityProfileId := `2b838de9-db9b-abcf-e646-d4f274ad4238` // string | Identity profile ID. # string | Identity profile ID.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentityProfilesAPI.GetIdentityProfile(context.Background(), identityProfileId).Execute()
          //resp, r, err := apiClient.V2025.IdentityProfilesAPI.GetIdentityProfile(context.Background(), identityProfileId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentityProfilesAPI.GetIdentityProfile``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetIdentityProfile`: IdentityProfile
          fmt.Fprintf(os.Stdout, "Response from `IdentityProfilesAPI.GetIdentityProfile`: %v\n", resp)
        }
- path: /identity-profiles/import
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identity-profiles#import-identity-profiles
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          identityprofileexportedobject := []byte(``) // []IdentityProfileExportedObject | Previously exported Identity Profiles.

          
          var identityProfileExportedObject []v2025.IdentityProfileExportedObject
          if err := json.Unmarshal(identityprofileexportedobject, &identityProfileExportedObject); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentityProfilesAPI.ImportIdentityProfiles(context.Background()).IdentityProfileExportedObject(identityProfileExportedObject).Execute()
          //resp, r, err := apiClient.V2025.IdentityProfilesAPI.ImportIdentityProfiles(context.Background()).IdentityProfileExportedObject(identityProfileExportedObject).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentityProfilesAPI.ImportIdentityProfiles``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ImportIdentityProfiles`: ObjectImportResult
          fmt.Fprintf(os.Stdout, "Response from `IdentityProfilesAPI.ImportIdentityProfiles`: %v\n", resp)
        }
- path: /identity-profiles
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identity-profiles#list-identity-profiles
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `id eq "ef38f94347e94562b5bb8424a56397d8"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ne, ge, gt, in, le, sw*  **name**: *eq, ne, ge, gt, in, le, sw*  **priority**: *eq, ne* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ne, ge, gt, in, le, sw*  **name**: *eq, ne, ge, gt, in, le, sw*  **priority**: *eq, ne* (optional)
          sorters := `id,name` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, priority, created, modified, owner.id, owner.name** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, priority, created, modified, owner.id, owner.name** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentityProfilesAPI.ListIdentityProfiles(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.IdentityProfilesAPI.ListIdentityProfiles(context.Background()).Limit(limit).Offset(offset).Count(count).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentityProfilesAPI.ListIdentityProfiles``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListIdentityProfiles`: []IdentityProfile
          fmt.Fprintf(os.Stdout, "Response from `IdentityProfilesAPI.ListIdentityProfiles`: %v\n", resp)
        }
- path: /identity-profiles/{identity-profile-id}/process-identities
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identity-profiles#sync-identity-profile
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          identityProfileId := `ef38f94347e94562b5bb8424a56397d8` // string | The Identity Profile ID to be processed # string | The Identity Profile ID to be processed

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentityProfilesAPI.SyncIdentityProfile(context.Background(), identityProfileId).Execute()
          //resp, r, err := apiClient.V2025.IdentityProfilesAPI.SyncIdentityProfile(context.Background(), identityProfileId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentityProfilesAPI.SyncIdentityProfile``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SyncIdentityProfile`: map[string]interface{}
          fmt.Fprintf(os.Stdout, "Response from `IdentityProfilesAPI.SyncIdentityProfile`: %v\n", resp)
        }
- path: /identity-profiles/{identity-profile-id}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/identity-profiles#update-identity-profile
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          identityProfileId := `ef38f94347e94562b5bb8424a56397d8` // string | Identity profile ID. # string | Identity profile ID.
          jsonpatchoperation := []byte(`[{op=add, path=/identityAttributeConfig/attributeTransforms/0, value={identityAttributeName=location, transformDefinition={type=accountAttribute, attributes={sourceName=Employees, attributeName=location, sourceId=2c91808878b7d63b0178c66ffcdc4ce4}}}}]`) // []JsonPatchOperation | List of identity profile update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.

          
          var jsonPatchOperation []v2025.JsonPatchOperation
          if err := json.Unmarshal(jsonpatchoperation, &jsonPatchOperation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.IdentityProfilesAPI.UpdateIdentityProfile(context.Background(), identityProfileId).JsonPatchOperation(jsonPatchOperation).Execute()
          //resp, r, err := apiClient.V2025.IdentityProfilesAPI.UpdateIdentityProfile(context.Background(), identityProfileId).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `IdentityProfilesAPI.UpdateIdentityProfile``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateIdentityProfile`: IdentityProfile
          fmt.Fprintf(os.Stdout, "Response from `IdentityProfilesAPI.UpdateIdentityProfile`: %v\n", resp)
        }
- path: /identity-profiles/{identity-profile-id}/lifecycle-states
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/lifecycle-states#create-lifecycle-state
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          identityProfileId := `2b838de9-db9b-abcf-e646-d4f274ad4238` // string | Identity profile ID. # string | Identity profile ID.
           lifecyclestate := []byte(`{
          "accessActionConfiguration" : {
            "removeAllAccessEnabled" : true
          },
          "accessProfileIds" : [ "2c918084660f45d6016617daa9210584", "2c918084660f45d6016617daa9210500" ],
          "emailNotificationOption" : {
            "notifyManagers" : true,
            "notifySpecificUsers" : true,
            "emailAddressList" : [ "test@test.com", "test2@test.com" ],
            "notifyAllAdmins" : true
          },
          "created" : "2015-05-28T14:07:17Z",
          "description" : "Lifecycle description",
          "identityCount" : 42,
          "priority" : 10,
          "technicalName" : "Technical Name",
          "identityState" : "INACTIVE_LONG_TERM",
          "enabled" : true,
          "name" : "aName",
          "modified" : "2015-05-28T14:07:17Z",
          "accountActions" : [ {
            "allSources" : true,
            "action" : "ENABLE",
            "excludeSourceIds" : [ "3b551ccf5566478b9b77f37de25303aa" ],
            "sourceIds" : [ "2c918084660f45d6016617daa9210584", "2c918084660f45d6016617daa9210500" ]
          }, {
            "allSources" : true,
            "action" : "ENABLE",
            "excludeSourceIds" : [ "3b551ccf5566478b9b77f37de25303aa" ],
            "sourceIds" : [ "2c918084660f45d6016617daa9210584", "2c918084660f45d6016617daa9210500" ]
          } ],
          "id" : "id12345"
        }`) // LifecycleState | Lifecycle state to be created.

          
          var lifecycleState v2025.LifecycleState
          if err := json.Unmarshal(lifecyclestate, &lifecycleState); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.LifecycleStatesAPI.CreateLifecycleState(context.Background(), identityProfileId).LifecycleState(lifecycleState).Execute()
          //resp, r, err := apiClient.V2025.LifecycleStatesAPI.CreateLifecycleState(context.Background(), identityProfileId).LifecycleState(lifecycleState).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `LifecycleStatesAPI.CreateLifecycleState``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateLifecycleState`: LifecycleState
          fmt.Fprintf(os.Stdout, "Response from `LifecycleStatesAPI.CreateLifecycleState`: %v\n", resp)
        }
- path: /identity-profiles/{identity-profile-id}/lifecycle-states/{lifecycle-state-id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/lifecycle-states#delete-lifecycle-state
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          identityProfileId := `2b838de9-db9b-abcf-e646-d4f274ad4238` // string | Identity profile ID. # string | Identity profile ID.
          lifecycleStateId := `ef38f94347e94562b5bb8424a56397d8` // string | Lifecycle state ID. # string | Lifecycle state ID.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.LifecycleStatesAPI.DeleteLifecycleState(context.Background(), identityProfileId, lifecycleStateId).Execute()
          //resp, r, err := apiClient.V2025.LifecycleStatesAPI.DeleteLifecycleState(context.Background(), identityProfileId, lifecycleStateId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `LifecycleStatesAPI.DeleteLifecycleState``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `DeleteLifecycleState`: LifecyclestateDeleted
          fmt.Fprintf(os.Stdout, "Response from `LifecycleStatesAPI.DeleteLifecycleState`: %v\n", resp)
        }
- path: /identity-profiles/{identity-profile-id}/lifecycle-states/{lifecycle-state-id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/lifecycle-states#get-lifecycle-state
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          identityProfileId := `2b838de9-db9b-abcf-e646-d4f274ad4238` // string | Identity profile ID. # string | Identity profile ID.
          lifecycleStateId := `ef38f94347e94562b5bb8424a56397d8` // string | Lifecycle state ID. # string | Lifecycle state ID.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.LifecycleStatesAPI.GetLifecycleState(context.Background(), identityProfileId, lifecycleStateId).Execute()
          //resp, r, err := apiClient.V2025.LifecycleStatesAPI.GetLifecycleState(context.Background(), identityProfileId, lifecycleStateId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `LifecycleStatesAPI.GetLifecycleState``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetLifecycleState`: LifecycleState
          fmt.Fprintf(os.Stdout, "Response from `LifecycleStatesAPI.GetLifecycleState`: %v\n", resp)
        }
- path: /identity-profiles/{identity-profile-id}/lifecycle-states
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/lifecycle-states#get-lifecycle-states
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          identityProfileId := `2b838de9-db9b-abcf-e646-d4f274ad4238` // string | Identity profile ID. # string | Identity profile ID.
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          sorters := `created,modified` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.LifecycleStatesAPI.GetLifecycleStates(context.Background(), identityProfileId).Execute()
          //resp, r, err := apiClient.V2025.LifecycleStatesAPI.GetLifecycleStates(context.Background(), identityProfileId).Limit(limit).Offset(offset).Count(count).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `LifecycleStatesAPI.GetLifecycleStates``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetLifecycleStates`: []LifecycleState
          fmt.Fprintf(os.Stdout, "Response from `LifecycleStatesAPI.GetLifecycleStates`: %v\n", resp)
        }
- path: /identities/{identity-id}/set-lifecycle-state
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/lifecycle-states#set-lifecycle-state
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          identityId := `2c9180857893f1290178944561990364` // string | ID of the identity to update. # string | ID of the identity to update.
           setlifecyclestaterequest := []byte(``) // SetLifecycleStateRequest | 

          
          var setLifecycleStateRequest v2025.SetLifecycleStateRequest
          if err := json.Unmarshal(setlifecyclestaterequest, &setLifecycleStateRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.LifecycleStatesAPI.SetLifecycleState(context.Background(), identityId).SetLifecycleStateRequest(setLifecycleStateRequest).Execute()
          //resp, r, err := apiClient.V2025.LifecycleStatesAPI.SetLifecycleState(context.Background(), identityId).SetLifecycleStateRequest(setLifecycleStateRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `LifecycleStatesAPI.SetLifecycleState``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SetLifecycleState`: SetLifecycleState200Response
          fmt.Fprintf(os.Stdout, "Response from `LifecycleStatesAPI.SetLifecycleState`: %v\n", resp)
        }
- path: /identity-profiles/{identity-profile-id}/lifecycle-states/{lifecycle-state-id}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/lifecycle-states#update-lifecycle-states
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          identityProfileId := `2b838de9-db9b-abcf-e646-d4f274ad4238` // string | Identity profile ID. # string | Identity profile ID.
          lifecycleStateId := `ef38f94347e94562b5bb8424a56397d8` // string | Lifecycle state ID. # string | Lifecycle state ID.
          jsonpatchoperation := []byte(`[{op=replace, path=/description, value=Updated description!}, {op=replace, path=/accessProfileIds, value=[2c918087742bab150174407a80f3125e, 2c918087742bab150174407a80f3124f]}, {op=replace, path=/accountActions, value=[{action=ENABLE, sourceIds=[2c9180846a2f82fb016a481c1b1560c5, 2c9180846a2f82fb016a481c1b1560cc], excludeSourceIds=null, allSources=false}, {action=DISABLE, sourceIds=null, excludeSourceIds=[3b551ccf5566478b9b77f37de25303aa], allSources=true}]}, {op=replace, path=/emailNotificationOption, value={notifyManagers=true, notifyAllAdmins=false, notifySpecificUsers=false, emailAddressList=[]}}, {op=replace, path=/accessActionConfiguration, value={removeAllAccessEnabled=true}}]`) // []JsonPatchOperation | A list of lifecycle state update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields can be updated: * enabled * description * accountActions * accessProfileIds * emailNotificationOption * accessActionConfiguration * priority 

          
          var jsonPatchOperation []v2025.JsonPatchOperation
          if err := json.Unmarshal(jsonpatchoperation, &jsonPatchOperation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.LifecycleStatesAPI.UpdateLifecycleStates(context.Background(), identityProfileId, lifecycleStateId).JsonPatchOperation(jsonPatchOperation).Execute()
          //resp, r, err := apiClient.V2025.LifecycleStatesAPI.UpdateLifecycleStates(context.Background(), identityProfileId, lifecycleStateId).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `LifecycleStatesAPI.UpdateLifecycleStates``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateLifecycleStates`: LifecycleState
          fmt.Fprintf(os.Stdout, "Response from `LifecycleStatesAPI.UpdateLifecycleStates`: %v\n", resp)
        }
- path: /mfa/duo-web/config
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/mfa-configuration#get-mfa-duo-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.MFAConfigurationAPI.GetMFADuoConfig(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.MFAConfigurationAPI.GetMFADuoConfig(context.Background()).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MFAConfigurationAPI.GetMFADuoConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetMFADuoConfig`: MfaDuoConfig
          fmt.Fprintf(os.Stdout, "Response from `MFAConfigurationAPI.GetMFADuoConfig`: %v\n", resp)
        }
- path: /mfa/kba/config
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/mfa-configuration#get-mfa-kba-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          allLanguages := allLanguages=true // bool | Indicator whether the question text should be returned in all configured languages    * If true, the question text is returned in all languages that it is configured in.    * If false, the question text is returned in the user locale if available, else for the default locale.     * If not passed, it behaves the same way as passing this parameter as false (optional) # bool | Indicator whether the question text should be returned in all configured languages    * If true, the question text is returned in all languages that it is configured in.    * If false, the question text is returned in the user locale if available, else for the default locale.     * If not passed, it behaves the same way as passing this parameter as false (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.MFAConfigurationAPI.GetMFAKbaConfig(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.MFAConfigurationAPI.GetMFAKbaConfig(context.Background()).AllLanguages(allLanguages).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MFAConfigurationAPI.GetMFAKbaConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetMFAKbaConfig`: []KbaQuestion
          fmt.Fprintf(os.Stdout, "Response from `MFAConfigurationAPI.GetMFAKbaConfig`: %v\n", resp)
        }
- path: /mfa/okta-verify/config
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/mfa-configuration#get-mfa-okta-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.MFAConfigurationAPI.GetMFAOktaConfig(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.MFAConfigurationAPI.GetMFAOktaConfig(context.Background()).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MFAConfigurationAPI.GetMFAOktaConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetMFAOktaConfig`: MfaOktaConfig
          fmt.Fprintf(os.Stdout, "Response from `MFAConfigurationAPI.GetMFAOktaConfig`: %v\n", resp)
        }
- path: /mfa/duo-web/config
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/mfa-configuration#set-mfa-duo-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           mfaduoconfig := []byte(`{
          "accessKey" : "qw123Y3QlA5UqocYpdU3rEkzrK2D497y",
          "host" : "example.com",
          "configProperties" : {
            "skey" : "qwERttyZx1CdlQye2Vwtbsjr3HKddy4BAiCXjc5x",
            "ikey" : "Q123WE45R6TY7890ZXCV"
          },
          "mfaMethod" : "duo-web",
          "enabled" : true,
          "identityAttribute" : "email"
        }`) // MfaDuoConfig | 

          
          var mfaDuoConfig v2025.MfaDuoConfig
          if err := json.Unmarshal(mfaduoconfig, &mfaDuoConfig); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.MFAConfigurationAPI.SetMFADuoConfig(context.Background()).MfaDuoConfig(mfaDuoConfig).Execute()
          //resp, r, err := apiClient.V2025.MFAConfigurationAPI.SetMFADuoConfig(context.Background()).MfaDuoConfig(mfaDuoConfig).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MFAConfigurationAPI.SetMFADuoConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SetMFADuoConfig`: MfaDuoConfig
          fmt.Fprintf(os.Stdout, "Response from `MFAConfigurationAPI.SetMFADuoConfig`: %v\n", resp)
        }
- path: /mfa/kba/config/answers
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/mfa-configuration#set-mfakba-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          kbaanswerrequestitem := []byte(`[{id=173423, answer=822cd15d6c15aa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a0859a2fea34}, {id=c54fee53-2d63-4fc5-9259-3e93b9994135, answer=9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08}]`) // []KbaAnswerRequestItem | 

          
          var kbaAnswerRequestItem []v2025.KbaAnswerRequestItem
          if err := json.Unmarshal(kbaanswerrequestitem, &kbaAnswerRequestItem); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.MFAConfigurationAPI.SetMFAKBAConfig(context.Background()).KbaAnswerRequestItem(kbaAnswerRequestItem).Execute()
          //resp, r, err := apiClient.V2025.MFAConfigurationAPI.SetMFAKBAConfig(context.Background()).KbaAnswerRequestItem(kbaAnswerRequestItem).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MFAConfigurationAPI.SetMFAKBAConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SetMFAKBAConfig`: []KbaAnswerResponseItem
          fmt.Fprintf(os.Stdout, "Response from `MFAConfigurationAPI.SetMFAKBAConfig`: %v\n", resp)
        }
- path: /mfa/okta-verify/config
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/mfa-configuration#set-mfa-okta-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           mfaoktaconfig := []byte(`{
          "accessKey" : "qw123Y3QlA5UqocYpdU3rEkzrK2D497y",
          "host" : "example.com",
          "mfaMethod" : "okta-verify",
          "enabled" : true,
          "identityAttribute" : "email"
        }`) // MfaOktaConfig | 

          
          var mfaOktaConfig v2025.MfaOktaConfig
          if err := json.Unmarshal(mfaoktaconfig, &mfaOktaConfig); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.MFAConfigurationAPI.SetMFAOktaConfig(context.Background()).MfaOktaConfig(mfaOktaConfig).Execute()
          //resp, r, err := apiClient.V2025.MFAConfigurationAPI.SetMFAOktaConfig(context.Background()).MfaOktaConfig(mfaOktaConfig).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MFAConfigurationAPI.SetMFAOktaConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SetMFAOktaConfig`: MfaOktaConfig
          fmt.Fprintf(os.Stdout, "Response from `MFAConfigurationAPI.SetMFAOktaConfig`: %v\n", resp)
        }
- path: /mfa/{method}/test
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/mfa-configuration#test-mfa-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          method := `okta-verify` // string | The name of the MFA method. The currently supported method names are 'okta-verify' and 'duo-web'. # string | The name of the MFA method. The currently supported method names are 'okta-verify' and 'duo-web'.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.MFAConfigurationAPI.TestMFAConfig(context.Background(), method).Execute()
          //resp, r, err := apiClient.V2025.MFAConfigurationAPI.TestMFAConfig(context.Background(), method).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MFAConfigurationAPI.TestMFAConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `TestMFAConfig`: MfaConfigTestResponse
          fmt.Fprintf(os.Stdout, "Response from `MFAConfigurationAPI.TestMFAConfig`: %v\n", resp)
        }
- path: /accounts/{id}/classify
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/machine-account-classify#send-classify-machine-account
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | Account ID. # string | Account ID.
          classificationMode := `forceMachine` // string | Specifies how the accounts should be classified.        default - uses criteria to classify account as machine or human, excludes accounts that were manually classified.       ignoreManual - like default, but includes accounts that were manually classified.       forceMachine - forces account to be classified as machine.       forceHuman - forces account to be classified as human. (optional) (default to "default") # string | Specifies how the accounts should be classified.        default - uses criteria to classify account as machine or human, excludes accounts that were manually classified.       ignoreManual - like default, but includes accounts that were manually classified.       forceMachine - forces account to be classified as machine.       forceHuman - forces account to be classified as human. (optional) (default to "default")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.MachineAccountClassifyAPI.SendClassifyMachineAccount(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.MachineAccountClassifyAPI.SendClassifyMachineAccount(context.Background(), id).ClassificationMode(classificationMode).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MachineAccountClassifyAPI.SendClassifyMachineAccount``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SendClassifyMachineAccount`: SendClassifyMachineAccount200Response
          fmt.Fprintf(os.Stdout, "Response from `MachineAccountClassifyAPI.SendClassifyMachineAccount`: %v\n", resp)
        }
- path: /sources/{sourceId}/machine-account-mappings
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/machine-account-mappings#create-machine-account-mappings
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | Source ID. # string | Source ID.
           attributemappings := []byte(`{
          "transformDefinition" : {
            "attributes" : {
              "input" : {
                "attributes" : {
                  "name" : "8d3e0094e99445de98eef6c75e25jc04",
                  "attributeName" : "givenName",
                  "sourceName" : "delimited-src"
                },
                "type" : "accountAttribute"
              }
            },
            "id" : "ToUpper",
            "type" : "reference"
          },
          "target" : {
            "sourceId" : "2c9180835d2e5168015d32f890ca1581",
            "attributeName" : "businessApplication",
            "type" : "IDENTITY"
          }
        }`) // AttributeMappings | 

          
          var attributeMappings v2025.AttributeMappings
          if err := json.Unmarshal(attributemappings, &attributeMappings); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.MachineAccountMappingsAPI.CreateMachineAccountMappings(context.Background(), id).AttributeMappings(attributeMappings).Execute()
          //resp, r, err := apiClient.V2025.MachineAccountMappingsAPI.CreateMachineAccountMappings(context.Background(), id).AttributeMappings(attributeMappings).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MachineAccountMappingsAPI.CreateMachineAccountMappings``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateMachineAccountMappings`: []AttributeMappings
          fmt.Fprintf(os.Stdout, "Response from `MachineAccountMappingsAPI.CreateMachineAccountMappings`: %v\n", resp)
        }
- path: /sources/{sourceId}/machine-account-mappings
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/machine-account-mappings#delete-machine-account-mappings
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | source ID. # string | source ID.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.MachineAccountMappingsAPI.DeleteMachineAccountMappings(context.Background(), id).Execute()
          //r, err := apiClient.V2025.MachineAccountMappingsAPI.DeleteMachineAccountMappings(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MachineAccountMappingsAPI.DeleteMachineAccountMappings``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /sources/{sourceId}/machine-account-mappings
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/machine-account-mappings#list-machine-account-mappings
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | Source ID # string | Source ID
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.MachineAccountMappingsAPI.ListMachineAccountMappings(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.MachineAccountMappingsAPI.ListMachineAccountMappings(context.Background(), id).Limit(limit).Offset(offset).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MachineAccountMappingsAPI.ListMachineAccountMappings``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListMachineAccountMappings`: []AttributeMappings
          fmt.Fprintf(os.Stdout, "Response from `MachineAccountMappingsAPI.ListMachineAccountMappings`: %v\n", resp)
        }
- path: /sources/{sourceId}/machine-mappings
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/machine-account-mappings#set-machine-account-mappings
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | Source ID. # string | Source ID.
           attributemappings := []byte(`{
          "transformDefinition" : {
            "attributes" : {
              "input" : {
                "attributes" : {
                  "name" : "8d3e0094e99445de98eef6c75e25jc04",
                  "attributeName" : "givenName",
                  "sourceName" : "delimited-src"
                },
                "type" : "accountAttribute"
              }
            },
            "id" : "ToUpper",
            "type" : "reference"
          },
          "target" : {
            "sourceId" : "2c9180835d2e5168015d32f890ca1581",
            "attributeName" : "businessApplication",
            "type" : "IDENTITY"
          }
        }`) // AttributeMappings | 

          
          var attributeMappings v2025.AttributeMappings
          if err := json.Unmarshal(attributemappings, &attributeMappings); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.MachineAccountMappingsAPI.SetMachineAccountMappings(context.Background(), id).AttributeMappings(attributeMappings).Execute()
          //resp, r, err := apiClient.V2025.MachineAccountMappingsAPI.SetMachineAccountMappings(context.Background(), id).AttributeMappings(attributeMappings).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MachineAccountMappingsAPI.SetMachineAccountMappings``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SetMachineAccountMappings`: []AttributeMappings
          fmt.Fprintf(os.Stdout, "Response from `MachineAccountMappingsAPI.SetMachineAccountMappings`: %v\n", resp)
        }
- path: /machine-accounts/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/machine-accounts#get-machine-account
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | Machine Account ID. # string | Machine Account ID.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.MachineAccountsAPI.GetMachineAccount(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.MachineAccountsAPI.GetMachineAccount(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MachineAccountsAPI.GetMachineAccount``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetMachineAccount`: MachineAccount
          fmt.Fprintf(os.Stdout, "Response from `MachineAccountsAPI.GetMachineAccount`: %v\n", resp)
        }
- path: /machine-accounts
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/machine-accounts#list-machine-accounts
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `identityId eq "2c9180858082150f0180893dbaf44201"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, sw*  **name**: *eq, in, sw*  **nativeIdentity**: *eq, in, sw*  **machineIdentity**: *eq, in, sw*  **description**: *eq, in, sw*  **ownerIdentity**: *eq, in, sw*  **ownerIdentityId**: *eq, in, sw*  **entitlements**: *eq*  **accessType**: *eq, in, sw*  **subType**: *eq, in, sw*  **environment**: *eq, in, sw*  **classificationMethod**: *eq, in, sw*  **manuallyCorrelated**: *eq*  **manuallyEdited**: *eq*  **identity**: *eq, in, sw*  **source**: *eq, in*  **hasEntitlement**: *eq*  **locked**: *eq*  **connectorAttributes**: *eq* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, sw*  **name**: *eq, in, sw*  **nativeIdentity**: *eq, in, sw*  **machineIdentity**: *eq, in, sw*  **description**: *eq, in, sw*  **ownerIdentity**: *eq, in, sw*  **ownerIdentityId**: *eq, in, sw*  **entitlements**: *eq*  **accessType**: *eq, in, sw*  **subType**: *eq, in, sw*  **environment**: *eq, in, sw*  **classificationMethod**: *eq, in, sw*  **manuallyCorrelated**: *eq*  **manuallyEdited**: *eq*  **identity**: *eq, in, sw*  **source**: *eq, in*  **hasEntitlement**: *eq*  **locked**: *eq*  **connectorAttributes**: *eq* (optional)
          sorters := `id,name` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, machineIdentity, identity.id, nativeIdentity, uuid, manuallyCorrelated, connectorAttributes, entitlements, identity.name, identity.type, source.id, source.name, source.type** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, machineIdentity, identity.id, nativeIdentity, uuid, manuallyCorrelated, connectorAttributes, entitlements, identity.name, identity.type, source.id, source.name, source.type** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.MachineAccountsAPI.ListMachineAccounts(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.MachineAccountsAPI.ListMachineAccounts(context.Background()).XSailPointExperimental(xSailPointExperimental).Limit(limit).Offset(offset).Count(count).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MachineAccountsAPI.ListMachineAccounts``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListMachineAccounts`: []MachineAccount
          fmt.Fprintf(os.Stdout, "Response from `MachineAccountsAPI.ListMachineAccounts`: %v\n", resp)
        }
- path: /machine-accounts/{id}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/machine-accounts#update-machine-account
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | Machine Account ID. # string | Machine Account ID.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          requestbody := []byte(`[{op=add, path=/environment, value=test}]`) // []map[string]interface{} | A JSON of updated values [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. The following fields are patchable:           * description           * ownerIdentity           * subType           * accessType           * environment           * attributes           * classificationMethod           * manuallyEdited           * nativeIdentity           * uuid           * source           * manuallyCorrelated           * enabled           * locked           * hasEntitlements           * connectorAttributes

          
          var requestBody []v2025.RequestBody
          if err := json.Unmarshal(requestbody, &requestBody); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.MachineAccountsAPI.UpdateMachineAccount(context.Background(), id).XSailPointExperimental(xSailPointExperimental).RequestBody(requestBody).Execute()
          //resp, r, err := apiClient.V2025.MachineAccountsAPI.UpdateMachineAccount(context.Background(), id).XSailPointExperimental(xSailPointExperimental).RequestBody(requestBody).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MachineAccountsAPI.UpdateMachineAccount``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateMachineAccount`: MachineAccount
          fmt.Fprintf(os.Stdout, "Response from `MachineAccountsAPI.UpdateMachineAccount`: %v\n", resp)
        }
- path: /sources/{sourceId}/machine-classification-config
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/machine-classification-config#delete-machine-classification-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | Source ID. # string | Source ID.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.MachineClassificationConfigAPI.DeleteMachineClassificationConfig(context.Background(), id).Execute()
          //r, err := apiClient.V2025.MachineClassificationConfigAPI.DeleteMachineClassificationConfig(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MachineClassificationConfigAPI.DeleteMachineClassificationConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /sources/{sourceId}/machine-classification-config
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/machine-classification-config#get-machine-classification-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | Source ID # string | Source ID

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.MachineClassificationConfigAPI.GetMachineClassificationConfig(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.MachineClassificationConfigAPI.GetMachineClassificationConfig(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MachineClassificationConfigAPI.GetMachineClassificationConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetMachineClassificationConfig`: MachineClassificationConfig
          fmt.Fprintf(os.Stdout, "Response from `MachineClassificationConfigAPI.GetMachineClassificationConfig`: %v\n", resp)
        }
- path: /sources/{sourceId}/machine-classification-config
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/machine-classification-config#set-machine-classification-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | Source ID. # string | Source ID.
           machineclassificationconfig := []byte(`{
          "criteria" : "criteria",
          "created" : "2017-07-11T18:45:37.098Z",
          "modified" : "2018-06-25T20:22:28.104Z",
          "classificationMethod" : "SOURCE",
          "enabled" : true
        }`) // MachineClassificationConfig | 

          
          var machineClassificationConfig v2025.MachineClassificationConfig
          if err := json.Unmarshal(machineclassificationconfig, &machineClassificationConfig); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.MachineClassificationConfigAPI.SetMachineClassificationConfig(context.Background(), id).MachineClassificationConfig(machineClassificationConfig).Execute()
          //resp, r, err := apiClient.V2025.MachineClassificationConfigAPI.SetMachineClassificationConfig(context.Background(), id).MachineClassificationConfig(machineClassificationConfig).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MachineClassificationConfigAPI.SetMachineClassificationConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SetMachineClassificationConfig`: MachineClassificationConfig
          fmt.Fprintf(os.Stdout, "Response from `MachineClassificationConfigAPI.SetMachineClassificationConfig`: %v\n", resp)
        }
- path: /machine-identities
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/machine-identities#create-machine-identity
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           machineidentity := []byte(`{
          "subtype" : "Application",
          "created" : "2015-05-28T14:07:17Z",
          "businessApplication" : "ADService",
          "name" : "aName",
          "modified" : "2015-05-28T14:07:17Z",
          "description" : "",
          "attributes" : "{\"Region\":\"EU\"}",
          "owners" : {
            "primaryIdentity" : "{}",
            "secondaryIdentities" : [ {
              "name" : "William Wilson",
              "id" : "2c91808568c529c60168cca6f90c1313",
              "type" : "IDENTITY"
            }, {
              "name" : "William Wilson",
              "id" : "2c91808568c529c60168cca6f90c1313",
              "type" : "IDENTITY"
            } ]
          },
          "id" : "id12345",
          "manuallyEdited" : true
        }`) // MachineIdentity | 

          
          var machineIdentity v2025.MachineIdentity
          if err := json.Unmarshal(machineidentity, &machineIdentity); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.MachineIdentitiesAPI.CreateMachineIdentity(context.Background()).XSailPointExperimental(xSailPointExperimental).MachineIdentity(machineIdentity).Execute()
          //resp, r, err := apiClient.V2025.MachineIdentitiesAPI.CreateMachineIdentity(context.Background()).XSailPointExperimental(xSailPointExperimental).MachineIdentity(machineIdentity).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MachineIdentitiesAPI.CreateMachineIdentity``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateMachineIdentity`: MachineIdentity
          fmt.Fprintf(os.Stdout, "Response from `MachineIdentitiesAPI.CreateMachineIdentity`: %v\n", resp)
        }
- path: /machine-identities/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/machine-identities#delete-machine-identity
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | Machine Identity ID # string | Machine Identity ID
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.MachineIdentitiesAPI.DeleteMachineIdentity(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //r, err := apiClient.V2025.MachineIdentitiesAPI.DeleteMachineIdentity(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MachineIdentitiesAPI.DeleteMachineIdentity``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /machine-identities/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/machine-identities#get-machine-identity
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | Machine Identity ID # string | Machine Identity ID
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.MachineIdentitiesAPI.GetMachineIdentity(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.MachineIdentitiesAPI.GetMachineIdentity(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MachineIdentitiesAPI.GetMachineIdentity``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetMachineIdentity`: MachineIdentity
          fmt.Fprintf(os.Stdout, "Response from `MachineIdentitiesAPI.GetMachineIdentity`: %v\n", resp)
        }
- path: /machine-identities
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/machine-identities#list-machine-identities
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          filters := `identityId eq "2c9180858082150f0180893dbaf44201"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, sw*  **displayName**: *eq, in, sw*  **cisIdentityId**: *eq, in, sw*  **description**: *eq, in, sw*  **businessApplication**: *eq, in, sw*  **attributes**: *eq*  **manuallyEdited**: *eq*  **subtype**: *eq, in*  **owners.primaryIdentity.id**: *eq, in, sw*  **owners.primaryIdentity.name**: *eq, in, isnull, pr*  **owners.secondaryIdentity.id**: *eq, in, sw*  **owners.secondaryIdentity.name**: *eq, in, isnull, pr* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, sw*  **displayName**: *eq, in, sw*  **cisIdentityId**: *eq, in, sw*  **description**: *eq, in, sw*  **businessApplication**: *eq, in, sw*  **attributes**: *eq*  **manuallyEdited**: *eq*  **subtype**: *eq, in*  **owners.primaryIdentity.id**: *eq, in, sw*  **owners.primaryIdentity.name**: *eq, in, isnull, pr*  **owners.secondaryIdentity.id**: *eq, in, sw*  **owners.secondaryIdentity.name**: *eq, in, isnull, pr* (optional)
          sorters := `businessApplication` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **businessApplication, name** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **businessApplication, name** (optional)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.MachineIdentitiesAPI.ListMachineIdentities(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.MachineIdentitiesAPI.ListMachineIdentities(context.Background()).XSailPointExperimental(xSailPointExperimental).Filters(filters).Sorters(sorters).Count(count).Limit(limit).Offset(offset).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MachineIdentitiesAPI.ListMachineIdentities``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListMachineIdentities`: []MachineIdentity
          fmt.Fprintf(os.Stdout, "Response from `MachineIdentitiesAPI.ListMachineIdentities`: %v\n", resp)
        }
- path: /machine-identities/{id}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/machine-identities#update-machine-identity
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | Machine Identity ID. # string | Machine Identity ID.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          requestbody := []byte(`[{op=add, path=/attributes/securityRisk, value=medium}]`) // []map[string]interface{} | A JSON of updated values [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.

          
          var requestBody []v2025.RequestBody
          if err := json.Unmarshal(requestbody, &requestBody); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.MachineIdentitiesAPI.UpdateMachineIdentity(context.Background(), id).XSailPointExperimental(xSailPointExperimental).RequestBody(requestBody).Execute()
          //resp, r, err := apiClient.V2025.MachineIdentitiesAPI.UpdateMachineIdentity(context.Background(), id).XSailPointExperimental(xSailPointExperimental).RequestBody(requestBody).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MachineIdentitiesAPI.UpdateMachineIdentity``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateMachineIdentity`: MachineIdentity
          fmt.Fprintf(os.Stdout, "Response from `MachineIdentitiesAPI.UpdateMachineIdentity`: %v\n", resp)
        }
- path: /managed-clients
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/managed-clients#create-managed-client
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           managedclientrequest := []byte(`{
          "name" : "aName",
          "description" : "A short description of the ManagedClient",
          "clusterId" : "aClusterId",
          "type" : "VA"
        }`) // ManagedClientRequest | 

          
          var managedClientRequest v2025.ManagedClientRequest
          if err := json.Unmarshal(managedclientrequest, &managedClientRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ManagedClientsAPI.CreateManagedClient(context.Background()).ManagedClientRequest(managedClientRequest).Execute()
          //resp, r, err := apiClient.V2025.ManagedClientsAPI.CreateManagedClient(context.Background()).ManagedClientRequest(managedClientRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ManagedClientsAPI.CreateManagedClient``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateManagedClient`: ManagedClient
          fmt.Fprintf(os.Stdout, "Response from `ManagedClientsAPI.CreateManagedClient`: %v\n", resp)
        }
- path: /managed-clients/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/managed-clients#delete-managed-client
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `4440278c-0ce2-41ee-a0a9-f5cfd5e8d3b7` // string | Managed client ID. # string | Managed client ID.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.ManagedClientsAPI.DeleteManagedClient(context.Background(), id).Execute()
          //r, err := apiClient.V2025.ManagedClientsAPI.DeleteManagedClient(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ManagedClientsAPI.DeleteManagedClient``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /managed-clients/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/managed-clients#get-managed-client
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `4440278c-0ce2-41ee-a0a9-f5cfd5e8d3b7` // string | Managed client ID. # string | Managed client ID.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ManagedClientsAPI.GetManagedClient(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.ManagedClientsAPI.GetManagedClient(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ManagedClientsAPI.GetManagedClient``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetManagedClient`: ManagedClient
          fmt.Fprintf(os.Stdout, "Response from `ManagedClientsAPI.GetManagedClient`: %v\n", resp)
        }
- path: /managed-clients/{id}/status
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/managed-clients#get-managed-client-status
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `aClientId` // string | Managed client ID to get status for. # string | Managed client ID to get status for.
          type_ :=  // ManagedClientType | Managed client type to get status for. # ManagedClientType | Managed client type to get status for.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ManagedClientsAPI.GetManagedClientStatus(context.Background(), id).Type_(type_).Execute()
          //resp, r, err := apiClient.V2025.ManagedClientsAPI.GetManagedClientStatus(context.Background(), id).Type_(type_).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ManagedClientsAPI.GetManagedClientStatus``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetManagedClientStatus`: ManagedClientStatus
          fmt.Fprintf(os.Stdout, "Response from `ManagedClientsAPI.GetManagedClientStatus`: %v\n", resp)
        }
- path: /managed-clients
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/managed-clients#get-managed-clients
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `name eq "client name"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*  **name**: *eq*  **clientId**: *eq*  **clusterId**: *eq* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*  **name**: *eq*  **clientId**: *eq*  **clusterId**: *eq* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ManagedClientsAPI.GetManagedClients(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.ManagedClientsAPI.GetManagedClients(context.Background()).Offset(offset).Limit(limit).Count(count).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ManagedClientsAPI.GetManagedClients``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetManagedClients`: []ManagedClient
          fmt.Fprintf(os.Stdout, "Response from `ManagedClientsAPI.GetManagedClients`: %v\n", resp)
        }
- path: /managed-clients/{id}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/managed-clients#update-managed-client
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `4440278c-0ce2-41ee-a0a9-f5cfd5e8d3b7` // string | Managed client ID. # string | Managed client ID.
          jsonpatchoperation := []byte(``) // []JsonPatchOperation | JSONPatch payload used to update the object.

          
          var jsonPatchOperation []v2025.JsonPatchOperation
          if err := json.Unmarshal(jsonpatchoperation, &jsonPatchOperation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ManagedClientsAPI.UpdateManagedClient(context.Background(), id).JsonPatchOperation(jsonPatchOperation).Execute()
          //resp, r, err := apiClient.V2025.ManagedClientsAPI.UpdateManagedClient(context.Background(), id).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ManagedClientsAPI.UpdateManagedClient``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateManagedClient`: ManagedClient
          fmt.Fprintf(os.Stdout, "Response from `ManagedClientsAPI.UpdateManagedClient`: %v\n", resp)
        }
- path: /managed-cluster-types
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/managed-cluster-types#create-managed-cluster-type
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           managedclustertype := []byte(`{
          "managedProcessIds" : [ "someId", "someId2" ],
          "pod" : "megapod-useast1",
          "org" : "denali-cjh",
          "id" : "aClusterTypeId",
          "type" : "idn"
        }`) // ManagedClusterType | 

          
          var managedClusterType v2025.ManagedClusterType
          if err := json.Unmarshal(managedclustertype, &managedClusterType); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ManagedClusterTypesAPI.CreateManagedClusterType(context.Background()).ManagedClusterType(managedClusterType).Execute()
          //resp, r, err := apiClient.V2025.ManagedClusterTypesAPI.CreateManagedClusterType(context.Background()).ManagedClusterType(managedClusterType).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ManagedClusterTypesAPI.CreateManagedClusterType``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateManagedClusterType`: ManagedClusterType
          fmt.Fprintf(os.Stdout, "Response from `ManagedClusterTypesAPI.CreateManagedClusterType`: %v\n", resp)
        }
- path: /managed-cluster-types/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/managed-cluster-types#delete-managed-cluster-type
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `aClusterTypeId` // string | The Managed Cluster Type ID # string | The Managed Cluster Type ID

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.ManagedClusterTypesAPI.DeleteManagedClusterType(context.Background(), id).Execute()
          //r, err := apiClient.V2025.ManagedClusterTypesAPI.DeleteManagedClusterType(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ManagedClusterTypesAPI.DeleteManagedClusterType``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /managed-cluster-types/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/managed-cluster-types#get-managed-cluster-type
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `aClusterTypeId` // string | The Managed Cluster Type ID # string | The Managed Cluster Type ID

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ManagedClusterTypesAPI.GetManagedClusterType(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.ManagedClusterTypesAPI.GetManagedClusterType(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ManagedClusterTypesAPI.GetManagedClusterType``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetManagedClusterType`: ManagedClusterType
          fmt.Fprintf(os.Stdout, "Response from `ManagedClusterTypesAPI.GetManagedClusterType`: %v\n", resp)
        }
- path: /managed-cluster-types
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/managed-cluster-types#get-managed-cluster-types
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          type_ := `IDN` // string | Type descriptor (optional) # string | Type descriptor (optional)
          pod := `megapod-useast1` // string | Pinned pod (or default) (optional) # string | Pinned pod (or default) (optional)
          org := `denali-xyz` // string | Pinned org (or default) (optional) # string | Pinned org (or default) (optional)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ManagedClusterTypesAPI.GetManagedClusterTypes(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.ManagedClusterTypesAPI.GetManagedClusterTypes(context.Background()).Type_(type_).Pod(pod).Org(org).Offset(offset).Limit(limit).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ManagedClusterTypesAPI.GetManagedClusterTypes``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetManagedClusterTypes`: []ManagedClusterType
          fmt.Fprintf(os.Stdout, "Response from `ManagedClusterTypesAPI.GetManagedClusterTypes`: %v\n", resp)
        }
- path: /managed-cluster-types/{id}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/managed-cluster-types#update-managed-cluster-type
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `aClusterTypeId` // string | The Managed Cluster Type ID # string | The Managed Cluster Type ID
           jsonpatch := []byte(`{
          "operations" : [ {
            "op" : "replace",
            "path" : "/description",
            "value" : "New description"
          }, {
            "op" : "replace",
            "path" : "/description",
            "value" : "New description"
          } ]
        }`) // JsonPatch | The JSONPatch payload used to update the schema.

          
          var jsonPatch v2025.JsonPatch
          if err := json.Unmarshal(jsonpatch, &jsonPatch); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ManagedClusterTypesAPI.UpdateManagedClusterType(context.Background(), id).JsonPatch(jsonPatch).Execute()
          //resp, r, err := apiClient.V2025.ManagedClusterTypesAPI.UpdateManagedClusterType(context.Background(), id).JsonPatch(jsonPatch).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ManagedClusterTypesAPI.UpdateManagedClusterType``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateManagedClusterType`: ManagedClusterType
          fmt.Fprintf(os.Stdout, "Response from `ManagedClusterTypesAPI.UpdateManagedClusterType`: %v\n", resp)
        }
- path: /managed-clusters
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/managed-clusters#create-managed-cluster
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           managedclusterrequest := []byte(`{
          "configuration" : {
            "clusterExternalId" : "externalId",
            "ccgVersion" : "77.0.0"
          },
          "name" : "Managed Cluster Name",
          "description" : "A short description of the managed cluster.",
          "type" : "idn"
        }`) // ManagedClusterRequest | 

          
          var managedClusterRequest v2025.ManagedClusterRequest
          if err := json.Unmarshal(managedclusterrequest, &managedClusterRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ManagedClustersAPI.CreateManagedCluster(context.Background()).ManagedClusterRequest(managedClusterRequest).Execute()
          //resp, r, err := apiClient.V2025.ManagedClustersAPI.CreateManagedCluster(context.Background()).ManagedClusterRequest(managedClusterRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ManagedClustersAPI.CreateManagedCluster``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateManagedCluster`: ManagedCluster
          fmt.Fprintf(os.Stdout, "Response from `ManagedClustersAPI.CreateManagedCluster`: %v\n", resp)
        }
- path: /managed-clusters/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/managed-clusters#delete-managed-cluster
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c9180897de347a2017de8859e8c5039` // string | Managed cluster ID. # string | Managed cluster ID.
          removeClients := false // bool | Flag to determine the need to delete a cluster with clients. (optional) (default to false) # bool | Flag to determine the need to delete a cluster with clients. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.ManagedClustersAPI.DeleteManagedCluster(context.Background(), id).Execute()
          //r, err := apiClient.V2025.ManagedClustersAPI.DeleteManagedCluster(context.Background(), id).RemoveClients(removeClients).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ManagedClustersAPI.DeleteManagedCluster``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /managed-clusters/{id}/log-config
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/managed-clusters#get-client-log-configuration
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2b838de9-db9b-abcf-e646-d4f274ad4238` // string | ID of managed cluster to get log configuration for. # string | ID of managed cluster to get log configuration for.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ManagedClustersAPI.GetClientLogConfiguration(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.ManagedClustersAPI.GetClientLogConfiguration(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ManagedClustersAPI.GetClientLogConfiguration``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetClientLogConfiguration`: ClientLogConfiguration
          fmt.Fprintf(os.Stdout, "Response from `ManagedClustersAPI.GetClientLogConfiguration`: %v\n", resp)
        }
- path: /managed-clusters/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/managed-clusters#get-managed-cluster
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c9180897de347a2017de8859e8c5039` // string | Managed cluster ID. # string | Managed cluster ID.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ManagedClustersAPI.GetManagedCluster(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.ManagedClustersAPI.GetManagedCluster(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ManagedClustersAPI.GetManagedCluster``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetManagedCluster`: ManagedCluster
          fmt.Fprintf(os.Stdout, "Response from `ManagedClustersAPI.GetManagedCluster`: %v\n", resp)
        }
- path: /managed-clusters
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/managed-clusters#get-managed-clusters
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `operational eq "operation"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **operational**: *eq* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **operational**: *eq* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ManagedClustersAPI.GetManagedClusters(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.ManagedClustersAPI.GetManagedClusters(context.Background()).Offset(offset).Limit(limit).Count(count).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ManagedClustersAPI.GetManagedClusters``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetManagedClusters`: []ManagedCluster
          fmt.Fprintf(os.Stdout, "Response from `ManagedClustersAPI.GetManagedClusters`: %v\n", resp)
        }
- path: /managed-clusters/{id}/log-config
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/managed-clusters#put-client-log-configuration
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2b838de9-db9b-abcf-e646-d4f274ad4238` // string | ID of the managed cluster to update the log configuration for. # string | ID of the managed cluster to update the log configuration for.
           putclientlogconfigurationrequest := []byte(``) // PutClientLogConfigurationRequest | Client log configuration for the given managed cluster.

          
          var putClientLogConfigurationRequest v2025.PutClientLogConfigurationRequest
          if err := json.Unmarshal(putclientlogconfigurationrequest, &putClientLogConfigurationRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ManagedClustersAPI.PutClientLogConfiguration(context.Background(), id).PutClientLogConfigurationRequest(putClientLogConfigurationRequest).Execute()
          //resp, r, err := apiClient.V2025.ManagedClustersAPI.PutClientLogConfiguration(context.Background(), id).PutClientLogConfigurationRequest(putClientLogConfigurationRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ManagedClustersAPI.PutClientLogConfiguration``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PutClientLogConfiguration`: ClientLogConfiguration
          fmt.Fprintf(os.Stdout, "Response from `ManagedClustersAPI.PutClientLogConfiguration`: %v\n", resp)
        }
- path: /managed-clusters/{id}/manualUpgrade
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/managed-clusters#update
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2b838de9-db9b-abcf-e646-d4f274ad4238` // string | ID of managed cluster to trigger manual upgrade. # string | ID of managed cluster to trigger manual upgrade.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ManagedClustersAPI.Update(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.ManagedClustersAPI.Update(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ManagedClustersAPI.Update``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `Update`: ClusterManualUpgrade
          fmt.Fprintf(os.Stdout, "Response from `ManagedClustersAPI.Update`: %v\n", resp)
        }
- path: /managed-clusters/{id}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/managed-clusters#update-managed-cluster
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c9180897de347a2017de8859e8c5039` // string | Managed cluster ID. # string | Managed cluster ID.
          jsonpatchoperation := []byte(``) // []JsonPatchOperation | JSONPatch payload used to update the object.

          
          var jsonPatchOperation []v2025.JsonPatchOperation
          if err := json.Unmarshal(jsonpatchoperation, &jsonPatchOperation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ManagedClustersAPI.UpdateManagedCluster(context.Background(), id).JsonPatchOperation(jsonPatchOperation).Execute()
          //resp, r, err := apiClient.V2025.ManagedClustersAPI.UpdateManagedCluster(context.Background(), id).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ManagedClustersAPI.UpdateManagedCluster``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateManagedCluster`: ManagedCluster
          fmt.Fprintf(os.Stdout, "Response from `ManagedClustersAPI.UpdateManagedCluster`: %v\n", resp)
        }
- path: /multihosts
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/multi-host-integration#create-multi-host-integration
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           multihostintegrationscreate := []byte(`{
          "owner" : {
            "name" : "MyName",
            "id" : "2c91808568c529c60168cca6f90c1313",
            "type" : "IDENTITY"
          },
          "managementWorkgroup" : {
            "name" : "My Management Workgroup",
            "id" : "2c91808568c529c60168cca6f90c2222",
            "type" : "GOVERNANCE_GROUP"
          },
          "cluster" : {
            "name" : "Corporate Cluster",
            "id" : "2c9180866166b5b0016167c32ef31a66",
            "type" : "CLUSTER"
          },
          "connector" : "multihost-microsoft-sql-server",
          "connectorAttributes" : {
            "maxSourcesPerAggGroup" : 10,
            "maxAllowedSources" : 300
          },
          "created" : "2022-02-08T14:50:03.827Z",
          "name" : "My Multi-Host Integration",
          "description" : "This is the Multi-Host Integration.",
          "modified" : "2024-01-23T18:08:50.897Z"
        }`) // MultiHostIntegrationsCreate | The specifics of the Multi-Host Integration to create

          
          var multiHostIntegrationsCreate v2025.MultiHostIntegrationsCreate
          if err := json.Unmarshal(multihostintegrationscreate, &multiHostIntegrationsCreate); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.MultiHostIntegrationAPI.CreateMultiHostIntegration(context.Background()).MultiHostIntegrationsCreate(multiHostIntegrationsCreate).Execute()
          //resp, r, err := apiClient.V2025.MultiHostIntegrationAPI.CreateMultiHostIntegration(context.Background()).MultiHostIntegrationsCreate(multiHostIntegrationsCreate).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MultiHostIntegrationAPI.CreateMultiHostIntegration``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateMultiHostIntegration`: MultiHostIntegrations
          fmt.Fprintf(os.Stdout, "Response from `MultiHostIntegrationAPI.CreateMultiHostIntegration`: %v\n", resp)
        }
- path: /multihosts/{multihostId}
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/multi-host-integration#create-sources-within-multi-host
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          multihostId := `2c91808568c529c60168cca6f90c1326` // string | ID of the Multi-Host Integration. # string | ID of the Multi-Host Integration.
          multihostintegrationscreatesources := []byte(``) // []MultiHostIntegrationsCreateSources | The specifics of the sources to create within Multi-Host Integration.

          
          var multiHostIntegrationsCreateSources []v2025.MultiHostIntegrationsCreateSources
          if err := json.Unmarshal(multihostintegrationscreatesources, &multiHostIntegrationsCreateSources); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.MultiHostIntegrationAPI.CreateSourcesWithinMultiHost(context.Background(), multihostId).MultiHostIntegrationsCreateSources(multiHostIntegrationsCreateSources).Execute()
          //r, err := apiClient.V2025.MultiHostIntegrationAPI.CreateSourcesWithinMultiHost(context.Background(), multihostId).MultiHostIntegrationsCreateSources(multiHostIntegrationsCreateSources).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MultiHostIntegrationAPI.CreateSourcesWithinMultiHost``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /multihosts/{multihostId}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/multi-host-integration#delete-multi-host
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          multihostId := `2c91808568c529c60168cca6f90c1326` // string | ID of Multi-Host Integration to delete. # string | ID of Multi-Host Integration to delete.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.MultiHostIntegrationAPI.DeleteMultiHost(context.Background(), multihostId).Execute()
          //r, err := apiClient.V2025.MultiHostIntegrationAPI.DeleteMultiHost(context.Background(), multihostId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MultiHostIntegrationAPI.DeleteMultiHost``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /multihosts/{multihostId}/acctAggregationGroups
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/multi-host-integration#get-acct-aggregation-groups
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          multihostId := `aMultiHostId` // string | ID of the Multi-Host Integration to update # string | ID of the Multi-Host Integration to update
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.MultiHostIntegrationAPI.GetAcctAggregationGroups(context.Background(), multihostId).Execute()
          //resp, r, err := apiClient.V2025.MultiHostIntegrationAPI.GetAcctAggregationGroups(context.Background(), multihostId).Offset(offset).Limit(limit).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MultiHostIntegrationAPI.GetAcctAggregationGroups``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetAcctAggregationGroups`: []MultiHostIntegrationsAggScheduleUpdate
          fmt.Fprintf(os.Stdout, "Response from `MultiHostIntegrationAPI.GetAcctAggregationGroups`: %v\n", resp)
        }
- path: /multihosts/{multiHostId}/entitlementAggregationGroups
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/multi-host-integration#get-entitlement-aggregation-groups
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          multiHostId := `aMultiHostId` // string | ID of the Multi-Host Integration to update # string | ID of the Multi-Host Integration to update
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.MultiHostIntegrationAPI.GetEntitlementAggregationGroups(context.Background(), multiHostId).Execute()
          //resp, r, err := apiClient.V2025.MultiHostIntegrationAPI.GetEntitlementAggregationGroups(context.Background(), multiHostId).Offset(offset).Limit(limit).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MultiHostIntegrationAPI.GetEntitlementAggregationGroups``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetEntitlementAggregationGroups`: []MultiHostIntegrationsAggScheduleUpdate
          fmt.Fprintf(os.Stdout, "Response from `MultiHostIntegrationAPI.GetEntitlementAggregationGroups`: %v\n", resp)
        }
- path: /multihosts/{multihostId}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/multi-host-integration#get-multi-host-integrations
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          multihostId := `2c91808568c529c60168cca6f90c1326` // string | ID of the Multi-Host Integration. # string | ID of the Multi-Host Integration.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.MultiHostIntegrationAPI.GetMultiHostIntegrations(context.Background(), multihostId).Execute()
          //resp, r, err := apiClient.V2025.MultiHostIntegrationAPI.GetMultiHostIntegrations(context.Background(), multihostId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MultiHostIntegrationAPI.GetMultiHostIntegrations``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetMultiHostIntegrations`: MultiHostIntegrations
          fmt.Fprintf(os.Stdout, "Response from `MultiHostIntegrationAPI.GetMultiHostIntegrations`: %v\n", resp)
        }
- path: /multihosts
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/multi-host-integration#get-multi-host-integrations-list
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          sorters := `name` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name** (optional)
          filters := `id eq 2c91808b6ef1d43e016efba0ce470904` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **type**: *in*  **forSubAdminId**: *in* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **type**: *in*  **forSubAdminId**: *in* (optional)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          forSubadmin := `5168015d32f890ca15812c9180835d2e` // string | If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN Identity or SOURCE_SUBADMIN identity.  The value of the parameter is either an Identity ID, or the special value **me**, which is shorthand for the calling Identity's ID.  A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an Identity that is not a subadmin. (optional) # string | If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN Identity or SOURCE_SUBADMIN identity.  The value of the parameter is either an Identity ID, or the special value **me**, which is shorthand for the calling Identity's ID.  A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an Identity that is not a subadmin. (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.MultiHostIntegrationAPI.GetMultiHostIntegrationsList(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.MultiHostIntegrationAPI.GetMultiHostIntegrationsList(context.Background()).Offset(offset).Limit(limit).Sorters(sorters).Filters(filters).Count(count).ForSubadmin(forSubadmin).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MultiHostIntegrationAPI.GetMultiHostIntegrationsList``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetMultiHostIntegrationsList`: []MultiHostIntegrations
          fmt.Fprintf(os.Stdout, "Response from `MultiHostIntegrationAPI.GetMultiHostIntegrationsList`: %v\n", resp)
        }
- path: /multihosts/{multiHostId}/sources/errors
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/multi-host-integration#get-multi-host-source-creation-errors
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          multiHostId := `004091cb79b04636b88662afa50a4440` // string | ID of the Multi-Host Integration # string | ID of the Multi-Host Integration

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.MultiHostIntegrationAPI.GetMultiHostSourceCreationErrors(context.Background(), multiHostId).Execute()
          //resp, r, err := apiClient.V2025.MultiHostIntegrationAPI.GetMultiHostSourceCreationErrors(context.Background(), multiHostId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MultiHostIntegrationAPI.GetMultiHostSourceCreationErrors``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetMultiHostSourceCreationErrors`: []SourceCreationErrors
          fmt.Fprintf(os.Stdout, "Response from `MultiHostIntegrationAPI.GetMultiHostSourceCreationErrors`: %v\n", resp)
        }
- path: /multihosts/types
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/multi-host-integration#get-multihost-integration-types
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.MultiHostIntegrationAPI.GetMultihostIntegrationTypes(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.MultiHostIntegrationAPI.GetMultihostIntegrationTypes(context.Background()).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MultiHostIntegrationAPI.GetMultihostIntegrationTypes``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetMultihostIntegrationTypes`: []MultiHostIntegrationTemplateType
          fmt.Fprintf(os.Stdout, "Response from `MultiHostIntegrationAPI.GetMultihostIntegrationTypes`: %v\n", resp)
        }
- path: /multihosts/{multihostId}/sources
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/multi-host-integration#get-sources-within-multi-host
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          multihostId := `aMultiHostId` // string | ID of the Multi-Host Integration to update # string | ID of the Multi-Host Integration to update
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          sorters := `name` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name** (optional)
          filters := `id eq 2c91808b6ef1d43e016efba0ce470904` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *in* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *in* (optional)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.MultiHostIntegrationAPI.GetSourcesWithinMultiHost(context.Background(), multihostId).Execute()
          //resp, r, err := apiClient.V2025.MultiHostIntegrationAPI.GetSourcesWithinMultiHost(context.Background(), multihostId).Offset(offset).Limit(limit).Sorters(sorters).Filters(filters).Count(count).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MultiHostIntegrationAPI.GetSourcesWithinMultiHost``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetSourcesWithinMultiHost`: []MultiHostSources
          fmt.Fprintf(os.Stdout, "Response from `MultiHostIntegrationAPI.GetSourcesWithinMultiHost`: %v\n", resp)
        }
- path: /multihosts/{multihostId}/sources/testConnection
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/multi-host-integration#test-connection-multi-host-sources
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          multihostId := `2c91808568c529c60168cca6f90c1324` // string | ID of the Multi-Host Integration # string | ID of the Multi-Host Integration

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.MultiHostIntegrationAPI.TestConnectionMultiHostSources(context.Background(), multihostId).Execute()
          //r, err := apiClient.V2025.MultiHostIntegrationAPI.TestConnectionMultiHostSources(context.Background(), multihostId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MultiHostIntegrationAPI.TestConnectionMultiHostSources``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /multihosts/{multihostId}/sources/{sourceId}/testConnection
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/multi-host-integration#test-source-connection-multihost
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          multihostId := `2c91808568c529c60168cca6f90c1326` // string | ID of the Multi-Host Integration # string | ID of the Multi-Host Integration
          sourceId := `2c91808568c529f60168cca6f90c1324` // string | ID of the source within the Multi-Host Integration # string | ID of the source within the Multi-Host Integration

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.MultiHostIntegrationAPI.TestSourceConnectionMultihost(context.Background(), multihostId, sourceId).Execute()
          //resp, r, err := apiClient.V2025.MultiHostIntegrationAPI.TestSourceConnectionMultihost(context.Background(), multihostId, sourceId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MultiHostIntegrationAPI.TestSourceConnectionMultihost``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `TestSourceConnectionMultihost`: TestSourceConnectionMultihost200Response
          fmt.Fprintf(os.Stdout, "Response from `MultiHostIntegrationAPI.TestSourceConnectionMultihost`: %v\n", resp)
        }
- path: /multihosts/{multihostId}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/multi-host-integration#update-multi-host-sources
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          multihostId := `anId` // string | ID of the Multi-Host Integration to update. # string | ID of the Multi-Host Integration to update.
          updatemultihostsourcesrequestinner := []byte(`[{op=add, path=/description, value=MDK Multi-Host Integration 222 description}]`) // []UpdateMultiHostSourcesRequestInner | This endpoint allows you to update a Multi-Host Integration. 

          
          var updateMultiHostSourcesRequestInner []v2025.UpdateMultiHostSourcesRequestInner
          if err := json.Unmarshal(updatemultihostsourcesrequestinner, &updateMultiHostSourcesRequestInner); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.MultiHostIntegrationAPI.UpdateMultiHostSources(context.Background(), multihostId).UpdateMultiHostSourcesRequestInner(updateMultiHostSourcesRequestInner).Execute()
          //r, err := apiClient.V2025.MultiHostIntegrationAPI.UpdateMultiHostSources(context.Background(), multihostId).UpdateMultiHostSourcesRequestInner(updateMultiHostSourcesRequestInner).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `MultiHostIntegrationAPI.UpdateMultiHostSources``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /non-employee-approvals/{id}/approve
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/non-employee-lifecycle-management#approve-non-employee-request
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `e136567de87e4d029e60b3c3c55db56d` // string | Non-Employee approval item id (UUID) # string | Non-Employee approval item id (UUID)
           nonemployeeapprovaldecision := []byte(`{
          "comment" : "Approved by manager"
        }`) // NonEmployeeApprovalDecision | 

          
          var nonEmployeeApprovalDecision v2025.NonEmployeeApprovalDecision
          if err := json.Unmarshal(nonemployeeapprovaldecision, &nonEmployeeApprovalDecision); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.ApproveNonEmployeeRequest(context.Background(), id).NonEmployeeApprovalDecision(nonEmployeeApprovalDecision).Execute()
          //resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.ApproveNonEmployeeRequest(context.Background(), id).NonEmployeeApprovalDecision(nonEmployeeApprovalDecision).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NonEmployeeLifecycleManagementAPI.ApproveNonEmployeeRequest``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ApproveNonEmployeeRequest`: NonEmployeeApprovalItem
          fmt.Fprintf(os.Stdout, "Response from `NonEmployeeLifecycleManagementAPI.ApproveNonEmployeeRequest`: %v\n", resp)
        }
- path: /non-employee-records
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/non-employee-lifecycle-management#create-non-employee-record
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            "time"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           nonemployeerequestbody := []byte(`{
          "sourceId" : "2c91808568c529c60168cca6f90c1313",
          "firstName" : "William",
          "lastName" : "Smith",
          "manager" : "jane.doe",
          "data" : {
            "description" : "Auditing"
          },
          "accountName" : "william.smith",
          "phone" : "5125555555",
          "endDate" : "2021-03-25T00:00:00-05:00",
          "email" : "william.smith@example.com",
          "startDate" : "2020-03-24T00:00:00-05:00"
        }`) // NonEmployeeRequestBody | Non-Employee record creation request body.

          
          var nonEmployeeRequestBody v2025.NonEmployeeRequestBody
          if err := json.Unmarshal(nonemployeerequestbody, &nonEmployeeRequestBody); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.CreateNonEmployeeRecord(context.Background()).NonEmployeeRequestBody(nonEmployeeRequestBody).Execute()
          //resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.CreateNonEmployeeRecord(context.Background()).NonEmployeeRequestBody(nonEmployeeRequestBody).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NonEmployeeLifecycleManagementAPI.CreateNonEmployeeRecord``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateNonEmployeeRecord`: NonEmployeeRecord
          fmt.Fprintf(os.Stdout, "Response from `NonEmployeeLifecycleManagementAPI.CreateNonEmployeeRecord`: %v\n", resp)
        }
- path: /non-employee-requests
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/non-employee-lifecycle-management#create-non-employee-request
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            "time"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           nonemployeerequestbody := []byte(`{
          "sourceId" : "2c91808568c529c60168cca6f90c1313",
          "firstName" : "William",
          "lastName" : "Smith",
          "manager" : "jane.doe",
          "data" : {
            "description" : "Auditing"
          },
          "accountName" : "william.smith",
          "phone" : "5125555555",
          "endDate" : "2021-03-25T00:00:00-05:00",
          "email" : "william.smith@example.com",
          "startDate" : "2020-03-24T00:00:00-05:00"
        }`) // NonEmployeeRequestBody | Non-Employee creation request body

          
          var nonEmployeeRequestBody v2025.NonEmployeeRequestBody
          if err := json.Unmarshal(nonemployeerequestbody, &nonEmployeeRequestBody); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.CreateNonEmployeeRequest(context.Background()).NonEmployeeRequestBody(nonEmployeeRequestBody).Execute()
          //resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.CreateNonEmployeeRequest(context.Background()).NonEmployeeRequestBody(nonEmployeeRequestBody).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NonEmployeeLifecycleManagementAPI.CreateNonEmployeeRequest``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateNonEmployeeRequest`: NonEmployeeRequest
          fmt.Fprintf(os.Stdout, "Response from `NonEmployeeLifecycleManagementAPI.CreateNonEmployeeRequest`: %v\n", resp)
        }
- path: /non-employee-sources
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/non-employee-lifecycle-management#create-non-employee-source
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           nonemployeesourcerequestbody := []byte(`{
          "owner" : {
            "id" : "2c91808570313110017040b06f344ec9"
          },
          "managementWorkgroup" : "123299",
          "accountManagers" : [ {
            "id" : "2c91808570313110017040b06f344ec9"
          }, {
            "id" : "2c91808570313110017040b06f344ec9"
          }, {
            "id" : "2c91808570313110017040b06f344ec9"
          }, {
            "id" : "2c91808570313110017040b06f344ec9"
          }, {
            "id" : "2c91808570313110017040b06f344ec9"
          } ],
          "name" : "Retail",
          "description" : "Source description",
          "approvers" : [ {
            "id" : "2c91808570313110017040b06f344ec9"
          }, {
            "id" : "2c91808570313110017040b06f344ec9"
          }, {
            "id" : "2c91808570313110017040b06f344ec9"
          } ]
        }`) // NonEmployeeSourceRequestBody | Non-Employee source creation request body.

          
          var nonEmployeeSourceRequestBody v2025.NonEmployeeSourceRequestBody
          if err := json.Unmarshal(nonemployeesourcerequestbody, &nonEmployeeSourceRequestBody); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.CreateNonEmployeeSource(context.Background()).NonEmployeeSourceRequestBody(nonEmployeeSourceRequestBody).Execute()
          //resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.CreateNonEmployeeSource(context.Background()).NonEmployeeSourceRequestBody(nonEmployeeSourceRequestBody).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NonEmployeeLifecycleManagementAPI.CreateNonEmployeeSource``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateNonEmployeeSource`: NonEmployeeSourceWithCloudExternalId
          fmt.Fprintf(os.Stdout, "Response from `NonEmployeeLifecycleManagementAPI.CreateNonEmployeeSource`: %v\n", resp)
        }
- path: /non-employee-sources/{sourceId}/schema-attributes
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/non-employee-lifecycle-management#create-non-employee-source-schema-attributes
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `ef38f94347e94562b5bb8424a56397d8` // string | The Source id # string | The Source id
           nonemployeeschemaattributebody := []byte(`{
          "helpText" : "The unique identifier for the account",
          "label" : "Account Name",
          "placeholder" : "Enter a unique user name for this account.",
          "type" : "TEXT",
          "technicalName" : "account.name",
          "required" : true
        }`) // NonEmployeeSchemaAttributeBody | 

          
          var nonEmployeeSchemaAttributeBody v2025.NonEmployeeSchemaAttributeBody
          if err := json.Unmarshal(nonemployeeschemaattributebody, &nonEmployeeSchemaAttributeBody); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.CreateNonEmployeeSourceSchemaAttributes(context.Background(), sourceId).NonEmployeeSchemaAttributeBody(nonEmployeeSchemaAttributeBody).Execute()
          //resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.CreateNonEmployeeSourceSchemaAttributes(context.Background(), sourceId).NonEmployeeSchemaAttributeBody(nonEmployeeSchemaAttributeBody).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NonEmployeeLifecycleManagementAPI.CreateNonEmployeeSourceSchemaAttributes``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateNonEmployeeSourceSchemaAttributes`: NonEmployeeSchemaAttribute
          fmt.Fprintf(os.Stdout, "Response from `NonEmployeeLifecycleManagementAPI.CreateNonEmployeeSourceSchemaAttributes`: %v\n", resp)
        }
- path: /non-employee-records/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/non-employee-lifecycle-management#delete-non-employee-record
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | Non-Employee record id (UUID) # string | Non-Employee record id (UUID)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.DeleteNonEmployeeRecord(context.Background(), id).Execute()
          //r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.DeleteNonEmployeeRecord(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NonEmployeeLifecycleManagementAPI.DeleteNonEmployeeRecord``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /non-employee-records/bulk-delete
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/non-employee-lifecycle-management#delete-non-employee-records-in-bulk
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           deletenonemployeerecordsinbulkrequest := []byte(``) // DeleteNonEmployeeRecordsInBulkRequest | Non-Employee bulk delete request body.

          
          var deleteNonEmployeeRecordsInBulkRequest v2025.DeleteNonEmployeeRecordsInBulkRequest
          if err := json.Unmarshal(deletenonemployeerecordsinbulkrequest, &deleteNonEmployeeRecordsInBulkRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.DeleteNonEmployeeRecordsInBulk(context.Background()).DeleteNonEmployeeRecordsInBulkRequest(deleteNonEmployeeRecordsInBulkRequest).Execute()
          //r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.DeleteNonEmployeeRecordsInBulk(context.Background()).DeleteNonEmployeeRecordsInBulkRequest(deleteNonEmployeeRecordsInBulkRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NonEmployeeLifecycleManagementAPI.DeleteNonEmployeeRecordsInBulk``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /non-employee-requests/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/non-employee-lifecycle-management#delete-non-employee-request
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ac110005-7156-1150-8171-5b292e3e0084` // string | Non-Employee request id in the UUID format # string | Non-Employee request id in the UUID format

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.DeleteNonEmployeeRequest(context.Background(), id).Execute()
          //r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.DeleteNonEmployeeRequest(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NonEmployeeLifecycleManagementAPI.DeleteNonEmployeeRequest``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /non-employee-sources/{sourceId}/schema-attributes/{attributeId}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/non-employee-lifecycle-management#delete-non-employee-schema-attribute
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          attributeId := `ef38f94347e94562b5bb8424a56397d8` // string | The Schema Attribute Id (UUID) # string | The Schema Attribute Id (UUID)
          sourceId := `ef38f94347e94562b5bb8424a56397d8` // string | The Source id # string | The Source id

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.DeleteNonEmployeeSchemaAttribute(context.Background(), attributeId, sourceId).Execute()
          //r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.DeleteNonEmployeeSchemaAttribute(context.Background(), attributeId, sourceId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NonEmployeeLifecycleManagementAPI.DeleteNonEmployeeSchemaAttribute``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /non-employee-sources/{sourceId}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/non-employee-lifecycle-management#delete-non-employee-source
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `e136567de87e4d029e60b3c3c55db56d` // string | Source Id # string | Source Id

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.DeleteNonEmployeeSource(context.Background(), sourceId).Execute()
          //r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.DeleteNonEmployeeSource(context.Background(), sourceId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NonEmployeeLifecycleManagementAPI.DeleteNonEmployeeSource``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /non-employee-sources/{sourceId}/schema-attributes
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/non-employee-lifecycle-management#delete-non-employee-source-schema-attributes
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `ef38f94347e94562b5bb8424a56397d8` // string | The Source id # string | The Source id

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.DeleteNonEmployeeSourceSchemaAttributes(context.Background(), sourceId).Execute()
          //r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.DeleteNonEmployeeSourceSchemaAttributes(context.Background(), sourceId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NonEmployeeLifecycleManagementAPI.DeleteNonEmployeeSourceSchemaAttributes``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /non-employee-sources/{id}/non-employees/download
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/non-employee-lifecycle-management#export-non-employee-records
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `e136567de87e4d029e60b3c3c55db56d` // string | Source Id (UUID) # string | Source Id (UUID)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.ExportNonEmployeeRecords(context.Background(), id).Execute()
          //r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.ExportNonEmployeeRecords(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NonEmployeeLifecycleManagementAPI.ExportNonEmployeeRecords``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /non-employee-sources/{id}/schema-attributes-template/download
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/non-employee-lifecycle-management#export-non-employee-source-schema-template
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | Source Id (UUID) # string | Source Id (UUID)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.ExportNonEmployeeSourceSchemaTemplate(context.Background(), id).Execute()
          //r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.ExportNonEmployeeSourceSchemaTemplate(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NonEmployeeLifecycleManagementAPI.ExportNonEmployeeSourceSchemaTemplate``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /non-employee-approvals/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/non-employee-lifecycle-management#get-non-employee-approval
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `e136567de87e4d029e60b3c3c55db56d` // string | Non-Employee approval item id (UUID) # string | Non-Employee approval item id (UUID)
          includeDetail := true // bool | The object nonEmployeeRequest will not be included detail when set to false. *Default value is true* (optional) # bool | The object nonEmployeeRequest will not be included detail when set to false. *Default value is true* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.GetNonEmployeeApproval(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.GetNonEmployeeApproval(context.Background(), id).IncludeDetail(includeDetail).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NonEmployeeLifecycleManagementAPI.GetNonEmployeeApproval``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetNonEmployeeApproval`: NonEmployeeApprovalItemDetail
          fmt.Fprintf(os.Stdout, "Response from `NonEmployeeLifecycleManagementAPI.GetNonEmployeeApproval`: %v\n", resp)
        }
- path: /non-employee-approvals/summary/{requested-for}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/non-employee-lifecycle-management#get-non-employee-approval-summary
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          requestedFor := `2c91808280430dfb0180431a59440460` // string | The identity (UUID) of the approver for whom for whom the summary is being retrieved. Use \"me\" instead to indicate the current user. # string | The identity (UUID) of the approver for whom for whom the summary is being retrieved. Use \"me\" instead to indicate the current user.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.GetNonEmployeeApprovalSummary(context.Background(), requestedFor).Execute()
          //resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.GetNonEmployeeApprovalSummary(context.Background(), requestedFor).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NonEmployeeLifecycleManagementAPI.GetNonEmployeeApprovalSummary``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetNonEmployeeApprovalSummary`: NonEmployeeApprovalSummary
          fmt.Fprintf(os.Stdout, "Response from `NonEmployeeLifecycleManagementAPI.GetNonEmployeeApprovalSummary`: %v\n", resp)
        }
- path: /non-employee-sources/{id}/non-employee-bulk-upload/status
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/non-employee-lifecycle-management#get-non-employee-bulk-upload-status
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `e136567de87e4d029e60b3c3c55db56d` // string | Source ID (UUID) # string | Source ID (UUID)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.GetNonEmployeeBulkUploadStatus(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.GetNonEmployeeBulkUploadStatus(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NonEmployeeLifecycleManagementAPI.GetNonEmployeeBulkUploadStatus``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetNonEmployeeBulkUploadStatus`: NonEmployeeBulkUploadStatus
          fmt.Fprintf(os.Stdout, "Response from `NonEmployeeLifecycleManagementAPI.GetNonEmployeeBulkUploadStatus`: %v\n", resp)
        }
- path: /non-employee-records/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/non-employee-lifecycle-management#get-non-employee-record
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | Non-Employee record id (UUID) # string | Non-Employee record id (UUID)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.GetNonEmployeeRecord(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.GetNonEmployeeRecord(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NonEmployeeLifecycleManagementAPI.GetNonEmployeeRecord``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetNonEmployeeRecord`: NonEmployeeRecord
          fmt.Fprintf(os.Stdout, "Response from `NonEmployeeLifecycleManagementAPI.GetNonEmployeeRecord`: %v\n", resp)
        }
- path: /non-employee-requests/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/non-employee-lifecycle-management#get-non-employee-request
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ac110005-7156-1150-8171-5b292e3e0084` // string | Non-Employee request id (UUID) # string | Non-Employee request id (UUID)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.GetNonEmployeeRequest(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.GetNonEmployeeRequest(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NonEmployeeLifecycleManagementAPI.GetNonEmployeeRequest``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetNonEmployeeRequest`: NonEmployeeRequest
          fmt.Fprintf(os.Stdout, "Response from `NonEmployeeLifecycleManagementAPI.GetNonEmployeeRequest`: %v\n", resp)
        }
- path: /non-employee-requests/summary/{requested-for}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/non-employee-lifecycle-management#get-non-employee-request-summary
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          requestedFor := `2c91808280430dfb0180431a59440460` // string | The identity (UUID) of the non-employee account manager for whom the summary is being retrieved. Use \"me\" instead to indicate the current user. # string | The identity (UUID) of the non-employee account manager for whom the summary is being retrieved. Use \"me\" instead to indicate the current user.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.GetNonEmployeeRequestSummary(context.Background(), requestedFor).Execute()
          //resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.GetNonEmployeeRequestSummary(context.Background(), requestedFor).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NonEmployeeLifecycleManagementAPI.GetNonEmployeeRequestSummary``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetNonEmployeeRequestSummary`: NonEmployeeRequestSummary
          fmt.Fprintf(os.Stdout, "Response from `NonEmployeeLifecycleManagementAPI.GetNonEmployeeRequestSummary`: %v\n", resp)
        }
- path: /non-employee-sources/{sourceId}/schema-attributes/{attributeId}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/non-employee-lifecycle-management#get-non-employee-schema-attribute
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          attributeId := `ef38f94347e94562b5bb8424a56397d8` // string | The Schema Attribute Id (UUID) # string | The Schema Attribute Id (UUID)
          sourceId := `ef38f94347e94562b5bb8424a56397d8` // string | The Source id # string | The Source id

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.GetNonEmployeeSchemaAttribute(context.Background(), attributeId, sourceId).Execute()
          //resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.GetNonEmployeeSchemaAttribute(context.Background(), attributeId, sourceId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NonEmployeeLifecycleManagementAPI.GetNonEmployeeSchemaAttribute``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetNonEmployeeSchemaAttribute`: NonEmployeeSchemaAttribute
          fmt.Fprintf(os.Stdout, "Response from `NonEmployeeLifecycleManagementAPI.GetNonEmployeeSchemaAttribute`: %v\n", resp)
        }
- path: /non-employee-sources/{sourceId}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/non-employee-lifecycle-management#get-non-employee-source
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `2c91808b7c28b350017c2a2ec5790aa1` // string | Source Id # string | Source Id

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.GetNonEmployeeSource(context.Background(), sourceId).Execute()
          //resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.GetNonEmployeeSource(context.Background(), sourceId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NonEmployeeLifecycleManagementAPI.GetNonEmployeeSource``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetNonEmployeeSource`: NonEmployeeSource
          fmt.Fprintf(os.Stdout, "Response from `NonEmployeeLifecycleManagementAPI.GetNonEmployeeSource`: %v\n", resp)
        }
- path: /non-employee-sources/{sourceId}/schema-attributes
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/non-employee-lifecycle-management#get-non-employee-source-schema-attributes
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `ef38f94347e94562b5bb8424a56397d8` // string | The Source id # string | The Source id

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.GetNonEmployeeSourceSchemaAttributes(context.Background(), sourceId).Execute()
          //resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.GetNonEmployeeSourceSchemaAttributes(context.Background(), sourceId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NonEmployeeLifecycleManagementAPI.GetNonEmployeeSourceSchemaAttributes``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetNonEmployeeSourceSchemaAttributes`: []NonEmployeeSchemaAttribute
          fmt.Fprintf(os.Stdout, "Response from `NonEmployeeLifecycleManagementAPI.GetNonEmployeeSourceSchemaAttributes`: %v\n", resp)
        }
- path: /non-employee-sources/{id}/non-employee-bulk-upload
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/non-employee-lifecycle-management#import-non-employee-records-in-bulk
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `e136567de87e4d029e60b3c3c55db56d` // string | Source Id (UUID) # string | Source Id (UUID)
          data := BINARY_DATA_HERE // *os.File |  # *os.File | 

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.ImportNonEmployeeRecordsInBulk(context.Background(), id).Data(data).Execute()
          //resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.ImportNonEmployeeRecordsInBulk(context.Background(), id).Data(data).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NonEmployeeLifecycleManagementAPI.ImportNonEmployeeRecordsInBulk``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ImportNonEmployeeRecordsInBulk`: NonEmployeeBulkUploadJob
          fmt.Fprintf(os.Stdout, "Response from `NonEmployeeLifecycleManagementAPI.ImportNonEmployeeRecordsInBulk`: %v\n", resp)
        }
- path: /non-employee-approvals
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/non-employee-lifecycle-management#list-non-employee-approvals
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          requestedFor := `2c91808280430dfb0180431a59440460` // string | The identity for whom the request was made. *me* indicates the current user. (optional) # string | The identity for whom the request was made. *me* indicates the current user. (optional)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `approvalStatus eq "Pending"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **approvalStatus**: *eq* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **approvalStatus**: *eq* (optional)
          sorters := `created` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.ListNonEmployeeApprovals(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.ListNonEmployeeApprovals(context.Background()).RequestedFor(requestedFor).Limit(limit).Offset(offset).Count(count).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NonEmployeeLifecycleManagementAPI.ListNonEmployeeApprovals``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListNonEmployeeApprovals`: []NonEmployeeApprovalItem
          fmt.Fprintf(os.Stdout, "Response from `NonEmployeeLifecycleManagementAPI.ListNonEmployeeApprovals`: %v\n", resp)
        }
- path: /non-employee-records
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/non-employee-lifecycle-management#list-non-employee-records
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          sorters := `accountName,sourceId` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, accountName, sourceId, manager, firstName, lastName, email, phone, startDate, endDate, created, modified** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, accountName, sourceId, manager, firstName, lastName, email, phone, startDate, endDate, created, modified** (optional)
          filters := `sourceId eq "2c91808568c529c60168cca6f90c1313"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **sourceId**: *eq* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **sourceId**: *eq* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.ListNonEmployeeRecords(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.ListNonEmployeeRecords(context.Background()).Limit(limit).Offset(offset).Count(count).Sorters(sorters).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NonEmployeeLifecycleManagementAPI.ListNonEmployeeRecords``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListNonEmployeeRecords`: []NonEmployeeRecord
          fmt.Fprintf(os.Stdout, "Response from `NonEmployeeLifecycleManagementAPI.ListNonEmployeeRecords`: %v\n", resp)
        }
- path: /non-employee-requests
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/non-employee-lifecycle-management#list-non-employee-requests
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          requestedFor := `e136567de87e4d029e60b3c3c55db56d` // string | The identity for whom the request was made. *me* indicates the current user. # string | The identity for whom the request was made. *me* indicates the current user.
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          sorters := `created,approvalStatus` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, approvalStatus, firstName, lastName, email, phone, accountName, startDate, endDate** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, approvalStatus, firstName, lastName, email, phone, accountName, startDate, endDate** (optional)
          filters := `sourceId eq "2c91808568c529c60168cca6f90c1313"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **sourceId**: *eq*  (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **sourceId**: *eq*  (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.ListNonEmployeeRequests(context.Background()).RequestedFor(requestedFor).Execute()
          //resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.ListNonEmployeeRequests(context.Background()).RequestedFor(requestedFor).Limit(limit).Offset(offset).Count(count).Sorters(sorters).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NonEmployeeLifecycleManagementAPI.ListNonEmployeeRequests``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListNonEmployeeRequests`: []NonEmployeeRequest
          fmt.Fprintf(os.Stdout, "Response from `NonEmployeeLifecycleManagementAPI.ListNonEmployeeRequests`: %v\n", resp)
        }
- path: /non-employee-sources
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/non-employee-lifecycle-management#list-non-employee-sources
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          requestedFor := `me` // string | Identity the request was made for. Use 'me' to indicate the current user. (optional) # string | Identity the request was made for. Use 'me' to indicate the current user. (optional)
          nonEmployeeCount := true // bool | Flag that determines whether the API will return a non-employee count associated with the source. (optional) (default to false) # bool | Flag that determines whether the API will return a non-employee count associated with the source. (optional) (default to false)
          sorters := `name,created` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, sourceId** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, sourceId** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.ListNonEmployeeSources(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.ListNonEmployeeSources(context.Background()).Limit(limit).Offset(offset).Count(count).RequestedFor(requestedFor).NonEmployeeCount(nonEmployeeCount).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NonEmployeeLifecycleManagementAPI.ListNonEmployeeSources``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListNonEmployeeSources`: []NonEmployeeSourceWithNECount
          fmt.Fprintf(os.Stdout, "Response from `NonEmployeeLifecycleManagementAPI.ListNonEmployeeSources`: %v\n", resp)
        }
- path: /non-employee-records/{id}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/non-employee-lifecycle-management#patch-non-employee-record
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | Non-employee record id (UUID) # string | Non-employee record id (UUID)
          jsonpatchoperation := []byte(`[{op=replace, path=/endDate, value=2019-08-23T18:40:35.772Z}]`) // []JsonPatchOperation | A list of non-employee update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Attributes are restricted by user type. Owner of source can update end date. Organization admins can update all available fields.

          
          var jsonPatchOperation []v2025.JsonPatchOperation
          if err := json.Unmarshal(jsonpatchoperation, &jsonPatchOperation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.PatchNonEmployeeRecord(context.Background(), id).JsonPatchOperation(jsonPatchOperation).Execute()
          //resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.PatchNonEmployeeRecord(context.Background(), id).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NonEmployeeLifecycleManagementAPI.PatchNonEmployeeRecord``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchNonEmployeeRecord`: NonEmployeeRecord
          fmt.Fprintf(os.Stdout, "Response from `NonEmployeeLifecycleManagementAPI.PatchNonEmployeeRecord`: %v\n", resp)
        }
- path: /non-employee-sources/{sourceId}/schema-attributes/{attributeId}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/non-employee-lifecycle-management#patch-non-employee-schema-attribute
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          attributeId := `ef38f94347e94562b5bb8424a56397d8` // string | The Schema Attribute Id (UUID) # string | The Schema Attribute Id (UUID)
          sourceId := `ef38f94347e94562b5bb8424a56397d8` // string | The Source id # string | The Source id
          jsonpatchoperation := []byte(`[{op=replace, path=/label, value={new attribute label=null}}]`) // []JsonPatchOperation | A list of schema attribute update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. The following properties are allowed for update ':' 'label', 'helpText', 'placeholder', 'required'.

          
          var jsonPatchOperation []v2025.JsonPatchOperation
          if err := json.Unmarshal(jsonpatchoperation, &jsonPatchOperation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.PatchNonEmployeeSchemaAttribute(context.Background(), attributeId, sourceId).JsonPatchOperation(jsonPatchOperation).Execute()
          //resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.PatchNonEmployeeSchemaAttribute(context.Background(), attributeId, sourceId).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NonEmployeeLifecycleManagementAPI.PatchNonEmployeeSchemaAttribute``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchNonEmployeeSchemaAttribute`: NonEmployeeSchemaAttribute
          fmt.Fprintf(os.Stdout, "Response from `NonEmployeeLifecycleManagementAPI.PatchNonEmployeeSchemaAttribute`: %v\n", resp)
        }
- path: /non-employee-sources/{sourceId}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/non-employee-lifecycle-management#patch-non-employee-source
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `e136567de87e4d029e60b3c3c55db56d` // string | Source Id # string | Source Id
          jsonpatchoperation := []byte(`[{op=replace, path=/name, value={new name=null}}, {op=replace, path=/approvers, value=[2c91809f703bb37a017040a2fe8748c7, 48b1f463c9e8427db5a5071bd81914b8]}]`) // []JsonPatchOperation | A list of non-employee source update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.

          
          var jsonPatchOperation []v2025.JsonPatchOperation
          if err := json.Unmarshal(jsonpatchoperation, &jsonPatchOperation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.PatchNonEmployeeSource(context.Background(), sourceId).JsonPatchOperation(jsonPatchOperation).Execute()
          //resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.PatchNonEmployeeSource(context.Background(), sourceId).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NonEmployeeLifecycleManagementAPI.PatchNonEmployeeSource``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchNonEmployeeSource`: NonEmployeeSource
          fmt.Fprintf(os.Stdout, "Response from `NonEmployeeLifecycleManagementAPI.PatchNonEmployeeSource`: %v\n", resp)
        }
- path: /non-employee-approvals/{id}/reject
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/non-employee-lifecycle-management#reject-non-employee-request
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `e136567de87e4d029e60b3c3c55db56d` // string | Non-Employee approval item id (UUID) # string | Non-Employee approval item id (UUID)
           nonemployeerejectapprovaldecision := []byte(`{
          "comment" : "approved"
        }`) // NonEmployeeRejectApprovalDecision | 

          
          var nonEmployeeRejectApprovalDecision v2025.NonEmployeeRejectApprovalDecision
          if err := json.Unmarshal(nonemployeerejectapprovaldecision, &nonEmployeeRejectApprovalDecision); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.RejectNonEmployeeRequest(context.Background(), id).NonEmployeeRejectApprovalDecision(nonEmployeeRejectApprovalDecision).Execute()
          //resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.RejectNonEmployeeRequest(context.Background(), id).NonEmployeeRejectApprovalDecision(nonEmployeeRejectApprovalDecision).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NonEmployeeLifecycleManagementAPI.RejectNonEmployeeRequest``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `RejectNonEmployeeRequest`: NonEmployeeApprovalItem
          fmt.Fprintf(os.Stdout, "Response from `NonEmployeeLifecycleManagementAPI.RejectNonEmployeeRequest`: %v\n", resp)
        }
- path: /non-employee-records/{id}
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/non-employee-lifecycle-management#update-non-employee-record
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            "time"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | Non-employee record id (UUID) # string | Non-employee record id (UUID)
           nonemployeerequestbody := []byte(`{
          "sourceId" : "2c91808568c529c60168cca6f90c1313",
          "firstName" : "William",
          "lastName" : "Smith",
          "manager" : "jane.doe",
          "data" : {
            "description" : "Auditing"
          },
          "accountName" : "william.smith",
          "phone" : "5125555555",
          "endDate" : "2021-03-25T00:00:00-05:00",
          "email" : "william.smith@example.com",
          "startDate" : "2020-03-24T00:00:00-05:00"
        }`) // NonEmployeeRequestBody | Non-employee record creation request body. Attributes are restricted by user type. Owner of source can update end date. Organization admins can update all available fields.

          
          var nonEmployeeRequestBody v2025.NonEmployeeRequestBody
          if err := json.Unmarshal(nonemployeerequestbody, &nonEmployeeRequestBody); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.UpdateNonEmployeeRecord(context.Background(), id).NonEmployeeRequestBody(nonEmployeeRequestBody).Execute()
          //resp, r, err := apiClient.V2025.NonEmployeeLifecycleManagementAPI.UpdateNonEmployeeRecord(context.Background(), id).NonEmployeeRequestBody(nonEmployeeRequestBody).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NonEmployeeLifecycleManagementAPI.UpdateNonEmployeeRecord``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateNonEmployeeRecord`: NonEmployeeRecord
          fmt.Fprintf(os.Stdout, "Response from `NonEmployeeLifecycleManagementAPI.UpdateNonEmployeeRecord`: %v\n", resp)
        }
- path: /verified-domains
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/notifications#create-domain-dkim
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           domainaddress := []byte(`{
          "domain" : "sailpoint.com"
        }`) // DomainAddress | 

          
          var domainAddress v2025.DomainAddress
          if err := json.Unmarshal(domainaddress, &domainAddress); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NotificationsAPI.CreateDomainDkim(context.Background()).XSailPointExperimental(xSailPointExperimental).DomainAddress(domainAddress).Execute()
          //resp, r, err := apiClient.V2025.NotificationsAPI.CreateDomainDkim(context.Background()).XSailPointExperimental(xSailPointExperimental).DomainAddress(domainAddress).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NotificationsAPI.CreateDomainDkim``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateDomainDkim`: DomainStatusDto
          fmt.Fprintf(os.Stdout, "Response from `NotificationsAPI.CreateDomainDkim`: %v\n", resp)
        }
- path: /notification-templates
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/notifications#create-notification-template
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           templatedto := []byte(`{
          "slackTemplate" : "slackTemplate",
          "footer" : "footer",
          "teamsTemplate" : "teamsTemplate",
          "subject" : "You have $numberOfPendingTasks $taskTasks to complete in ${__global.productName}.",
          "created" : "2020-01-01T00:00:00Z",
          "description" : "Daily digest - sent if number of outstanding tasks for task owner > 0",
          "medium" : "EMAIL",
          "locale" : "en",
          "body" : "Please go to the task manager",
          "name" : "Task Manager Subscription",
          "replyTo" : "$__global.emailFromAddress",
          "header" : "header",
          "modified" : "2020-01-01T00:00:00Z",
          "from" : "$__global.emailFromAddress",
          "id" : "c17bea3a-574d-453c-9e04-4365fbf5af0b",
          "key" : "cloud_manual_work_item_summary"
        }`) // TemplateDto | 

          
          var templateDto v2025.TemplateDto
          if err := json.Unmarshal(templatedto, &templateDto); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NotificationsAPI.CreateNotificationTemplate(context.Background()).XSailPointExperimental(xSailPointExperimental).TemplateDto(templateDto).Execute()
          //resp, r, err := apiClient.V2025.NotificationsAPI.CreateNotificationTemplate(context.Background()).XSailPointExperimental(xSailPointExperimental).TemplateDto(templateDto).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NotificationsAPI.CreateNotificationTemplate``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateNotificationTemplate`: TemplateDto
          fmt.Fprintf(os.Stdout, "Response from `NotificationsAPI.CreateNotificationTemplate`: %v\n", resp)
        }
- path: /verified-from-addresses
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/notifications#create-verified-from-address
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           emailstatusdto := []byte(`{
          "isVerifiedByDomain" : false,
          "verificationStatus" : "PENDING",
          "id" : "id",
          "email" : "sender@example.com"
        }`) // EmailStatusDto | 

          
          var emailStatusDto v2025.EmailStatusDto
          if err := json.Unmarshal(emailstatusdto, &emailStatusDto); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NotificationsAPI.CreateVerifiedFromAddress(context.Background()).XSailPointExperimental(xSailPointExperimental).EmailStatusDto(emailStatusDto).Execute()
          //resp, r, err := apiClient.V2025.NotificationsAPI.CreateVerifiedFromAddress(context.Background()).XSailPointExperimental(xSailPointExperimental).EmailStatusDto(emailStatusDto).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NotificationsAPI.CreateVerifiedFromAddress``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateVerifiedFromAddress`: EmailStatusDto
          fmt.Fprintf(os.Stdout, "Response from `NotificationsAPI.CreateVerifiedFromAddress`: %v\n", resp)
        }
- path: /notification-templates/bulk-delete
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/notifications#delete-notification-templates-in-bulk
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          templatebulkdeletedto := []byte(``) // []TemplateBulkDeleteDto | 

          
          var templateBulkDeleteDto []v2025.TemplateBulkDeleteDto
          if err := json.Unmarshal(templatebulkdeletedto, &templateBulkDeleteDto); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.NotificationsAPI.DeleteNotificationTemplatesInBulk(context.Background()).XSailPointExperimental(xSailPointExperimental).TemplateBulkDeleteDto(templateBulkDeleteDto).Execute()
          //r, err := apiClient.V2025.NotificationsAPI.DeleteNotificationTemplatesInBulk(context.Background()).XSailPointExperimental(xSailPointExperimental).TemplateBulkDeleteDto(templateBulkDeleteDto).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NotificationsAPI.DeleteNotificationTemplatesInBulk``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /verified-from-addresses/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/notifications#delete-verified-from-address
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `id_example` // string |  # string | 
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.NotificationsAPI.DeleteVerifiedFromAddress(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //r, err := apiClient.V2025.NotificationsAPI.DeleteVerifiedFromAddress(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NotificationsAPI.DeleteVerifiedFromAddress``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /verified-domains
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/notifications#get-dkim-attributes
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NotificationsAPI.GetDkimAttributes(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.NotificationsAPI.GetDkimAttributes(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NotificationsAPI.GetDkimAttributes``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetDkimAttributes`: []DkimAttributes
          fmt.Fprintf(os.Stdout, "Response from `NotificationsAPI.GetDkimAttributes`: %v\n", resp)
        }
- path: /mail-from-attributes/{identity}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/notifications#get-mail-from-attributes
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `bobsmith@sailpoint.com` // string | Returns the MX and TXT record to be put in your DNS, as well as the MAIL FROM domain status # string | Returns the MX and TXT record to be put in your DNS, as well as the MAIL FROM domain status
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NotificationsAPI.GetMailFromAttributes(context.Background()).Id(id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.NotificationsAPI.GetMailFromAttributes(context.Background()).Id(id).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NotificationsAPI.GetMailFromAttributes``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetMailFromAttributes`: MailFromAttributes
          fmt.Fprintf(os.Stdout, "Response from `NotificationsAPI.GetMailFromAttributes`: %v\n", resp)
        }
- path: /notification-templates/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/notifications#get-notification-template
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `c17bea3a-574d-453c-9e04-4365fbf5af0b` // string | Id of the Notification Template # string | Id of the Notification Template
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NotificationsAPI.GetNotificationTemplate(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.NotificationsAPI.GetNotificationTemplate(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NotificationsAPI.GetNotificationTemplate``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetNotificationTemplate`: TemplateDto
          fmt.Fprintf(os.Stdout, "Response from `NotificationsAPI.GetNotificationTemplate`: %v\n", resp)
        }
- path: /notification-template-context
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/notifications#get-notifications-template-context
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NotificationsAPI.GetNotificationsTemplateContext(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.NotificationsAPI.GetNotificationsTemplateContext(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NotificationsAPI.GetNotificationsTemplateContext``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetNotificationsTemplateContext`: NotificationTemplateContext
          fmt.Fprintf(os.Stdout, "Response from `NotificationsAPI.GetNotificationsTemplateContext`: %v\n", resp)
        }
- path: /verified-from-addresses
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/notifications#list-from-addresses
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `email eq "john.doe@company.com"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **email**: *eq, ge, le, sw* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **email**: *eq, ge, le, sw* (optional)
          sorters := `email` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **email** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **email** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NotificationsAPI.ListFromAddresses(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.NotificationsAPI.ListFromAddresses(context.Background()).XSailPointExperimental(xSailPointExperimental).Limit(limit).Offset(offset).Count(count).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NotificationsAPI.ListFromAddresses``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListFromAddresses`: []EmailStatusDto
          fmt.Fprintf(os.Stdout, "Response from `NotificationsAPI.ListFromAddresses`: %v\n", resp)
        }
- path: /notification-preferences/{key}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/notifications#list-notification-preferences
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NotificationsAPI.ListNotificationPreferences(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.NotificationsAPI.ListNotificationPreferences(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NotificationsAPI.ListNotificationPreferences``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListNotificationPreferences`: PreferencesDto
          fmt.Fprintf(os.Stdout, "Response from `NotificationsAPI.ListNotificationPreferences`: %v\n", resp)
        }
- path: /notification-template-defaults
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/notifications#list-notification-template-defaults
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          filters := `key eq "cloud_manual_work_item_summary"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **key**: *eq, in, sw*  **medium**: *eq, sw*  **locale**: *eq, sw* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **key**: *eq, in, sw*  **medium**: *eq, sw*  **locale**: *eq, sw* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NotificationsAPI.ListNotificationTemplateDefaults(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.NotificationsAPI.ListNotificationTemplateDefaults(context.Background()).XSailPointExperimental(xSailPointExperimental).Limit(limit).Offset(offset).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NotificationsAPI.ListNotificationTemplateDefaults``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListNotificationTemplateDefaults`: []TemplateDtoDefault
          fmt.Fprintf(os.Stdout, "Response from `NotificationsAPI.ListNotificationTemplateDefaults`: %v\n", resp)
        }
- path: /notification-templates
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/notifications#list-notification-templates
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          filters := `medium eq "EMAIL"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **key**: *eq, in, sw*  **medium**: *eq, sw*  **locale**: *eq, sw* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **key**: *eq, in, sw*  **medium**: *eq, sw*  **locale**: *eq, sw* (optional)
          sorters := `key, -name` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **key, name, medium** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **key, name, medium** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NotificationsAPI.ListNotificationTemplates(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.NotificationsAPI.ListNotificationTemplates(context.Background()).XSailPointExperimental(xSailPointExperimental).Limit(limit).Offset(offset).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NotificationsAPI.ListNotificationTemplates``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListNotificationTemplates`: []TemplateDto
          fmt.Fprintf(os.Stdout, "Response from `NotificationsAPI.ListNotificationTemplates`: %v\n", resp)
        }
- path: /mail-from-attributes
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/notifications#put-mail-from-attributes
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           mailfromattributesdto := []byte(`{
          "identity" : "BobSmith@sailpoint.com",
          "mailFromDomain" : "example.sailpoint.com"
        }`) // MailFromAttributesDto | 

          
          var mailFromAttributesDto v2025.MailFromAttributesDto
          if err := json.Unmarshal(mailfromattributesdto, &mailFromAttributesDto); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.NotificationsAPI.PutMailFromAttributes(context.Background()).XSailPointExperimental(xSailPointExperimental).MailFromAttributesDto(mailFromAttributesDto).Execute()
          //resp, r, err := apiClient.V2025.NotificationsAPI.PutMailFromAttributes(context.Background()).XSailPointExperimental(xSailPointExperimental).MailFromAttributesDto(mailFromAttributesDto).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NotificationsAPI.PutMailFromAttributes``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PutMailFromAttributes`: MailFromAttributes
          fmt.Fprintf(os.Stdout, "Response from `NotificationsAPI.PutMailFromAttributes`: %v\n", resp)
        }
- path: /send-test-notification
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/notifications#send-test-notification
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           sendtestnotificationrequestdto := []byte(`{
          "context" : "{}",
          "medium" : "EMAIL",
          "key" : "cloud_manual_work_item_summary"
        }`) // SendTestNotificationRequestDto | 

          
          var sendTestNotificationRequestDto v2025.SendTestNotificationRequestDto
          if err := json.Unmarshal(sendtestnotificationrequestdto, &sendTestNotificationRequestDto); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.NotificationsAPI.SendTestNotification(context.Background()).XSailPointExperimental(xSailPointExperimental).SendTestNotificationRequestDto(sendTestNotificationRequestDto).Execute()
          //r, err := apiClient.V2025.NotificationsAPI.SendTestNotification(context.Background()).XSailPointExperimental(xSailPointExperimental).SendTestNotificationRequestDto(sendTestNotificationRequestDto).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `NotificationsAPI.SendTestNotification``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /oauth-clients
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/o-auth-clients#create-oauth-client
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           createoauthclientrequest := []byte(`{
          "internal" : false,
          "businessName" : "Acme-Solar",
          "description" : "An API client used for the authorization_code, refresh_token, and client_credentials flows",
          "refreshTokenValiditySeconds" : 86400,
          "type" : "CONFIDENTIAL",
          "redirectUris" : [ "http://localhost:12345" ],
          "enabled" : true,
          "accessType" : "OFFLINE",
          "grantTypes" : [ "AUTHORIZATION_CODE", "CLIENT_CREDENTIALS", "REFRESH_TOKEN" ],
          "strongAuthSupported" : false,
          "homepageUrl" : "http://localhost:12345",
          "accessTokenValiditySeconds" : 750,
          "scope" : [ "demo:api-client-scope:first", "demo:api-client-scope:second" ],
          "name" : "Demo API Client",
          "claimsSupported" : false
        }`) // CreateOAuthClientRequest | 

          
          var createOAuthClientRequest v2025.CreateOAuthClientRequest
          if err := json.Unmarshal(createoauthclientrequest, &createOAuthClientRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.OAuthClientsAPI.CreateOauthClient(context.Background()).CreateOAuthClientRequest(createOAuthClientRequest).Execute()
          //resp, r, err := apiClient.V2025.OAuthClientsAPI.CreateOauthClient(context.Background()).CreateOAuthClientRequest(createOAuthClientRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `OAuthClientsAPI.CreateOauthClient``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateOauthClient`: CreateOAuthClientResponse
          fmt.Fprintf(os.Stdout, "Response from `OAuthClientsAPI.CreateOauthClient`: %v\n", resp)
        }
- path: /oauth-clients/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/o-auth-clients#delete-oauth-client
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The OAuth client id # string | The OAuth client id

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.OAuthClientsAPI.DeleteOauthClient(context.Background(), id).Execute()
          //r, err := apiClient.V2025.OAuthClientsAPI.DeleteOauthClient(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `OAuthClientsAPI.DeleteOauthClient``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /oauth-clients/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/o-auth-clients#get-oauth-client
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The OAuth client id # string | The OAuth client id

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.OAuthClientsAPI.GetOauthClient(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.OAuthClientsAPI.GetOauthClient(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `OAuthClientsAPI.GetOauthClient``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetOauthClient`: GetOAuthClientResponse
          fmt.Fprintf(os.Stdout, "Response from `OAuthClientsAPI.GetOauthClient`: %v\n", resp)
        }
- path: /oauth-clients
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/o-auth-clients#list-oauth-clients
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          filters := `lastUsed le 2023-02-05T10:59:27.214Z` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **lastUsed**: *le, isnull* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **lastUsed**: *le, isnull* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.OAuthClientsAPI.ListOauthClients(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.OAuthClientsAPI.ListOauthClients(context.Background()).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `OAuthClientsAPI.ListOauthClients``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListOauthClients`: []GetOAuthClientResponse
          fmt.Fprintf(os.Stdout, "Response from `OAuthClientsAPI.ListOauthClients`: %v\n", resp)
        }
- path: /oauth-clients/{id}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/o-auth-clients#patch-oauth-client
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The OAuth client id # string | The OAuth client id
          jsonpatchoperation := []byte(`[{op=replace, path=/strongAuthSupported, value=true}, {op=replace, path=/businessName, value=acme-solar}]`) // []JsonPatchOperation | A list of OAuth client update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * tenant * businessName * homepageUrl * name * description * accessTokenValiditySeconds * refreshTokenValiditySeconds * redirectUris * grantTypes * accessType * enabled * strongAuthSupported * claimsSupported 

          
          var jsonPatchOperation []v2025.JsonPatchOperation
          if err := json.Unmarshal(jsonpatchoperation, &jsonPatchOperation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.OAuthClientsAPI.PatchOauthClient(context.Background(), id).JsonPatchOperation(jsonPatchOperation).Execute()
          //resp, r, err := apiClient.V2025.OAuthClientsAPI.PatchOauthClient(context.Background(), id).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `OAuthClientsAPI.PatchOauthClient``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchOauthClient`: GetOAuthClientResponse
          fmt.Fprintf(os.Stdout, "Response from `OAuthClientsAPI.PatchOauthClient`: %v\n", resp)
        }
- path: /org-config
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/org-config#get-org-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.OrgConfigAPI.GetOrgConfig(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.OrgConfigAPI.GetOrgConfig(context.Background()).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `OrgConfigAPI.GetOrgConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetOrgConfig`: OrgConfig
          fmt.Fprintf(os.Stdout, "Response from `OrgConfigAPI.GetOrgConfig`: %v\n", resp)
        }
- path: /org-config/valid-time-zones
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/org-config#get-valid-time-zones
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          limit := 50 // int32 | Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 50) # int32 | Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 50)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.OrgConfigAPI.GetValidTimeZones(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.OrgConfigAPI.GetValidTimeZones(context.Background()).XSailPointExperimental(xSailPointExperimental).Limit(limit).Offset(offset).Count(count).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `OrgConfigAPI.GetValidTimeZones``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetValidTimeZones`: []string
          fmt.Fprintf(os.Stdout, "Response from `OrgConfigAPI.GetValidTimeZones`: %v\n", resp)
        }
- path: /org-config
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/org-config#patch-org-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          jsonpatchoperation := []byte(`[{op=replace, path=/timeZone, value=America/Toronto}]`) // []JsonPatchOperation | A list of schema attribute update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.

          
          var jsonPatchOperation []v2025.JsonPatchOperation
          if err := json.Unmarshal(jsonpatchoperation, &jsonPatchOperation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.OrgConfigAPI.PatchOrgConfig(context.Background()).JsonPatchOperation(jsonPatchOperation).Execute()
          //resp, r, err := apiClient.V2025.OrgConfigAPI.PatchOrgConfig(context.Background()).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `OrgConfigAPI.PatchOrgConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchOrgConfig`: OrgConfig
          fmt.Fprintf(os.Stdout, "Response from `OrgConfigAPI.PatchOrgConfig`: %v\n", resp)
        }
- path: /password-org-config
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/password-configuration#create-password-org-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           passwordorgconfig := []byte(`{
          "digitTokenLength" : 9,
          "digitTokenEnabled" : true,
          "digitTokenDurationMinutes" : 10,
          "customInstructionsEnabled" : true
        }`) // PasswordOrgConfig | 

          
          var passwordOrgConfig v2025.PasswordOrgConfig
          if err := json.Unmarshal(passwordorgconfig, &passwordOrgConfig); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.PasswordConfigurationAPI.CreatePasswordOrgConfig(context.Background()).PasswordOrgConfig(passwordOrgConfig).Execute()
          //resp, r, err := apiClient.V2025.PasswordConfigurationAPI.CreatePasswordOrgConfig(context.Background()).PasswordOrgConfig(passwordOrgConfig).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `PasswordConfigurationAPI.CreatePasswordOrgConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreatePasswordOrgConfig`: PasswordOrgConfig
          fmt.Fprintf(os.Stdout, "Response from `PasswordConfigurationAPI.CreatePasswordOrgConfig`: %v\n", resp)
        }
- path: /password-org-config
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/password-configuration#get-password-org-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.PasswordConfigurationAPI.GetPasswordOrgConfig(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.PasswordConfigurationAPI.GetPasswordOrgConfig(context.Background()).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `PasswordConfigurationAPI.GetPasswordOrgConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetPasswordOrgConfig`: PasswordOrgConfig
          fmt.Fprintf(os.Stdout, "Response from `PasswordConfigurationAPI.GetPasswordOrgConfig`: %v\n", resp)
        }
- path: /password-org-config
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/password-configuration#put-password-org-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           passwordorgconfig := []byte(`{
          "digitTokenLength" : 9,
          "digitTokenEnabled" : true,
          "digitTokenDurationMinutes" : 10,
          "customInstructionsEnabled" : true
        }`) // PasswordOrgConfig | 

          
          var passwordOrgConfig v2025.PasswordOrgConfig
          if err := json.Unmarshal(passwordorgconfig, &passwordOrgConfig); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.PasswordConfigurationAPI.PutPasswordOrgConfig(context.Background()).PasswordOrgConfig(passwordOrgConfig).Execute()
          //resp, r, err := apiClient.V2025.PasswordConfigurationAPI.PutPasswordOrgConfig(context.Background()).PasswordOrgConfig(passwordOrgConfig).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `PasswordConfigurationAPI.PutPasswordOrgConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PutPasswordOrgConfig`: PasswordOrgConfig
          fmt.Fprintf(os.Stdout, "Response from `PasswordConfigurationAPI.PutPasswordOrgConfig`: %v\n", resp)
        }
- path: /password-dictionary
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/password-dictionary#get-password-dictionary
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.PasswordDictionaryAPI.GetPasswordDictionary(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.PasswordDictionaryAPI.GetPasswordDictionary(context.Background()).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `PasswordDictionaryAPI.GetPasswordDictionary``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetPasswordDictionary`: string
          fmt.Fprintf(os.Stdout, "Response from `PasswordDictionaryAPI.GetPasswordDictionary`: %v\n", resp)
        }
- path: /password-dictionary
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/password-dictionary#put-password-dictionary
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          file := BINARY_DATA_HERE // *os.File |  (optional) # *os.File |  (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.PasswordDictionaryAPI.PutPasswordDictionary(context.Background()).Execute()
          //r, err := apiClient.V2025.PasswordDictionaryAPI.PutPasswordDictionary(context.Background()).File(file).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `PasswordDictionaryAPI.PutPasswordDictionary``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /generate-password-reset-token/digit
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/password-management#create-digit-token
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           passworddigittokenreset := []byte(`{
          "durationMinutes" : 5,
          "length" : 8,
          "userId" : "Abby.Smith"
        }`) // PasswordDigitTokenReset | 

          
          var passwordDigitTokenReset v2025.PasswordDigitTokenReset
          if err := json.Unmarshal(passworddigittokenreset, &passwordDigitTokenReset); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.PasswordManagementAPI.CreateDigitToken(context.Background()).XSailPointExperimental(xSailPointExperimental).PasswordDigitTokenReset(passwordDigitTokenReset).Execute()
          //resp, r, err := apiClient.V2025.PasswordManagementAPI.CreateDigitToken(context.Background()).XSailPointExperimental(xSailPointExperimental).PasswordDigitTokenReset(passwordDigitTokenReset).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `PasswordManagementAPI.CreateDigitToken``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateDigitToken`: PasswordDigitToken
          fmt.Fprintf(os.Stdout, "Response from `PasswordManagementAPI.CreateDigitToken`: %v\n", resp)
        }
- path: /password-change-status/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/password-management#get-password-change-status
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `089899f13a8f4da7824996191587bab9` // string | Password change request ID # string | Password change request ID

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.PasswordManagementAPI.GetPasswordChangeStatus(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.PasswordManagementAPI.GetPasswordChangeStatus(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `PasswordManagementAPI.GetPasswordChangeStatus``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetPasswordChangeStatus`: PasswordStatus
          fmt.Fprintf(os.Stdout, "Response from `PasswordManagementAPI.GetPasswordChangeStatus`: %v\n", resp)
        }
- path: /query-password-info
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/password-management#query-password-info
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           passwordinfoquerydto := []byte(`{
          "sourceName" : "My-AD",
          "userName" : "Abby.Smith"
        }`) // PasswordInfoQueryDTO | 

          
          var passwordInfoQueryDTO v2025.PasswordInfoQueryDTO
          if err := json.Unmarshal(passwordinfoquerydto, &passwordInfoQueryDTO); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.PasswordManagementAPI.QueryPasswordInfo(context.Background()).PasswordInfoQueryDTO(passwordInfoQueryDTO).Execute()
          //resp, r, err := apiClient.V2025.PasswordManagementAPI.QueryPasswordInfo(context.Background()).PasswordInfoQueryDTO(passwordInfoQueryDTO).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `PasswordManagementAPI.QueryPasswordInfo``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `QueryPasswordInfo`: PasswordInfo
          fmt.Fprintf(os.Stdout, "Response from `PasswordManagementAPI.QueryPasswordInfo`: %v\n", resp)
        }
- path: /set-password
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/password-management#set-password
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           passwordchangerequest := []byte(`{
          "sourceId" : "8a807d4c73c545510173c545d4b60246",
          "accountId" : "CN=Abby Smith,OU=Austin,OU=Americas,OU=Demo,DC=seri,DC=acme,DC=com",
          "identityId" : "8a807d4c73c545510173c545f0a002ff",
          "publicKeyId" : "YWQ2NjQ4MTItZjY0NC00MWExLWFjMjktOGNmMzU3Y2VlNjk2",
          "encryptedPassword" : "XzN+YwKgr2C+InkMYFMBG3UtjMEw5ZIql/XFlXo8cJNeslmkplx6vn4kd4/43IF9STBk5RnzR6XmjpEO+FwHDoiBwYZAkAZK/Iswxk4OdybG6Y4MStJCOCiK8osKr35IMMSV/mbO4wAeltoCk7daTWzTGLiI6UaT5tf+F2EgdjJZ7YqM8W8r7aUWsm3p2Xt01Y46ZRx0QaM91QruiIx2rECFT2pUO0wr+7oQ77jypATyGWRtADsu3YcvCk/6U5MqCnXMzKBcRas7NnZdSL/d5H1GglVGz3VLPMaivG4/oL4chOMmFCRl/zVsGxZ9RhN8rxsRGFFKn+rhExTi+bax3A=="
        }`) // PasswordChangeRequest | 

          
          var passwordChangeRequest v2025.PasswordChangeRequest
          if err := json.Unmarshal(passwordchangerequest, &passwordChangeRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.PasswordManagementAPI.SetPassword(context.Background()).PasswordChangeRequest(passwordChangeRequest).Execute()
          //resp, r, err := apiClient.V2025.PasswordManagementAPI.SetPassword(context.Background()).PasswordChangeRequest(passwordChangeRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `PasswordManagementAPI.SetPassword``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SetPassword`: PasswordChangeResponse
          fmt.Fprintf(os.Stdout, "Response from `PasswordManagementAPI.SetPassword`: %v\n", resp)
        }
- path: /password-policies
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/password-policies#create-password-policy
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           passwordpolicyv3dto := []byte(`{
          "validateAgainstAccountName" : true,
          "minLength" : 8,
          "description" : "Information about the Password Policy",
          "requireStrongAuthUntrustedGeographies" : true,
          "enablePasswdExpiration" : true,
          "minNumeric" : 8,
          "lastUpdated" : 1939056206564,
          "validateAgainstAccountId" : false,
          "dateCreated" : 1639056206564,
          "accountNameMinWordLength" : 6,
          "minUpper" : 8,
          "firstExpirationReminder" : 45,
          "modified" : "modified",
          "id" : "2c91808e7d976f3b017d9f5ceae440c8",
          "requireStrongAuthn" : true,
          "useDictionary" : false,
          "minSpecial" : 8,
          "sourceIds" : [ "2c91808382ffee0b01830de154f14034", "2f98808382ffee0b01830de154f12134" ],
          "passwordExpiration" : 8,
          "maxRepeatedChars" : 3,
          "minCharacterTypes" : 5,
          "minAlpha" : 5,
          "created" : "created",
          "useAccountAttributes" : false,
          "accountIdMinWordLength" : 4,
          "minLower" : 8,
          "useIdentityAttributes" : false,
          "defaultPolicy" : true,
          "requireStrongAuthOffNetwork" : true,
          "name" : "PasswordPolicy Example",
          "maxLength" : 25
        }`) // PasswordPolicyV3Dto | 

          
          var passwordPolicyV3Dto v2025.PasswordPolicyV3Dto
          if err := json.Unmarshal(passwordpolicyv3dto, &passwordPolicyV3Dto); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.PasswordPoliciesAPI.CreatePasswordPolicy(context.Background()).PasswordPolicyV3Dto(passwordPolicyV3Dto).Execute()
          //resp, r, err := apiClient.V2025.PasswordPoliciesAPI.CreatePasswordPolicy(context.Background()).PasswordPolicyV3Dto(passwordPolicyV3Dto).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `PasswordPoliciesAPI.CreatePasswordPolicy``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreatePasswordPolicy`: PasswordPolicyV3Dto
          fmt.Fprintf(os.Stdout, "Response from `PasswordPoliciesAPI.CreatePasswordPolicy`: %v\n", resp)
        }
- path: /password-policies/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/password-policies#delete-password-policy
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ff808081838d9e9d01838da6a03e0002` // string | The ID of password policy to delete. # string | The ID of password policy to delete.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.PasswordPoliciesAPI.DeletePasswordPolicy(context.Background(), id).Execute()
          //r, err := apiClient.V2025.PasswordPoliciesAPI.DeletePasswordPolicy(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `PasswordPoliciesAPI.DeletePasswordPolicy``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /password-policies/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/password-policies#get-password-policy-by-id
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ff808081838d9e9d01838da6a03e0005` // string | The ID of password policy to retrieve. # string | The ID of password policy to retrieve.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.PasswordPoliciesAPI.GetPasswordPolicyById(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.PasswordPoliciesAPI.GetPasswordPolicyById(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `PasswordPoliciesAPI.GetPasswordPolicyById``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetPasswordPolicyById`: PasswordPolicyV3Dto
          fmt.Fprintf(os.Stdout, "Response from `PasswordPoliciesAPI.GetPasswordPolicyById`: %v\n", resp)
        }
- path: /password-policies
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/password-policies#list-password-policies
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.PasswordPoliciesAPI.ListPasswordPolicies(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.PasswordPoliciesAPI.ListPasswordPolicies(context.Background()).Limit(limit).Offset(offset).Count(count).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `PasswordPoliciesAPI.ListPasswordPolicies``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListPasswordPolicies`: []PasswordPolicyV3Dto
          fmt.Fprintf(os.Stdout, "Response from `PasswordPoliciesAPI.ListPasswordPolicies`: %v\n", resp)
        }
- path: /password-policies/{id}
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/password-policies#set-password-policy
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ff808081838d9e9d01838da6a03e0007` // string | The ID of password policy to update. # string | The ID of password policy to update.
           passwordpolicyv3dto := []byte(`{
          "validateAgainstAccountName" : true,
          "minLength" : 8,
          "description" : "Information about the Password Policy",
          "requireStrongAuthUntrustedGeographies" : true,
          "enablePasswdExpiration" : true,
          "minNumeric" : 8,
          "lastUpdated" : 1939056206564,
          "validateAgainstAccountId" : false,
          "dateCreated" : 1639056206564,
          "accountNameMinWordLength" : 6,
          "minUpper" : 8,
          "firstExpirationReminder" : 45,
          "modified" : "modified",
          "id" : "2c91808e7d976f3b017d9f5ceae440c8",
          "requireStrongAuthn" : true,
          "useDictionary" : false,
          "minSpecial" : 8,
          "sourceIds" : [ "2c91808382ffee0b01830de154f14034", "2f98808382ffee0b01830de154f12134" ],
          "passwordExpiration" : 8,
          "maxRepeatedChars" : 3,
          "minCharacterTypes" : 5,
          "minAlpha" : 5,
          "created" : "created",
          "useAccountAttributes" : false,
          "accountIdMinWordLength" : 4,
          "minLower" : 8,
          "useIdentityAttributes" : false,
          "defaultPolicy" : true,
          "requireStrongAuthOffNetwork" : true,
          "name" : "PasswordPolicy Example",
          "maxLength" : 25
        }`) // PasswordPolicyV3Dto | 

          
          var passwordPolicyV3Dto v2025.PasswordPolicyV3Dto
          if err := json.Unmarshal(passwordpolicyv3dto, &passwordPolicyV3Dto); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.PasswordPoliciesAPI.SetPasswordPolicy(context.Background(), id).PasswordPolicyV3Dto(passwordPolicyV3Dto).Execute()
          //resp, r, err := apiClient.V2025.PasswordPoliciesAPI.SetPasswordPolicy(context.Background(), id).PasswordPolicyV3Dto(passwordPolicyV3Dto).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `PasswordPoliciesAPI.SetPasswordPolicy``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SetPasswordPolicy`: PasswordPolicyV3Dto
          fmt.Fprintf(os.Stdout, "Response from `PasswordPoliciesAPI.SetPasswordPolicy`: %v\n", resp)
        }
- path: /password-sync-groups
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/password-sync-groups#create-password-sync-group
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           passwordsyncgroup := []byte(`{
          "created" : "2023-03-16T04:00:00Z",
          "name" : "Password Sync Group 1",
          "modified" : "2023-03-16T04:00:00Z",
          "passwordPolicyId" : "2c91808d744ba0ce01746f93b6204501",
          "id" : "6881f631-3bd5-4213-9c75-8e05cc3e35dd",
          "sourceIds" : [ "2c918084660f45d6016617daa9210584", "2c918084660f45d6016617daa9210500" ]
        }`) // PasswordSyncGroup | 

          
          var passwordSyncGroup v2025.PasswordSyncGroup
          if err := json.Unmarshal(passwordsyncgroup, &passwordSyncGroup); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.PasswordSyncGroupsAPI.CreatePasswordSyncGroup(context.Background()).PasswordSyncGroup(passwordSyncGroup).Execute()
          //resp, r, err := apiClient.V2025.PasswordSyncGroupsAPI.CreatePasswordSyncGroup(context.Background()).PasswordSyncGroup(passwordSyncGroup).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `PasswordSyncGroupsAPI.CreatePasswordSyncGroup``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreatePasswordSyncGroup`: PasswordSyncGroup
          fmt.Fprintf(os.Stdout, "Response from `PasswordSyncGroupsAPI.CreatePasswordSyncGroup`: %v\n", resp)
        }
- path: /password-sync-groups/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/password-sync-groups#delete-password-sync-group
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `6881f631-3bd5-4213-9c75-8e05cc3e35dd` // string | The ID of password sync group to delete. # string | The ID of password sync group to delete.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.PasswordSyncGroupsAPI.DeletePasswordSyncGroup(context.Background(), id).Execute()
          //r, err := apiClient.V2025.PasswordSyncGroupsAPI.DeletePasswordSyncGroup(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `PasswordSyncGroupsAPI.DeletePasswordSyncGroup``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /password-sync-groups/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/password-sync-groups#get-password-sync-group
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `6881f631-3bd5-4213-9c75-8e05cc3e35dd` // string | The ID of password sync group to retrieve. # string | The ID of password sync group to retrieve.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.PasswordSyncGroupsAPI.GetPasswordSyncGroup(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.PasswordSyncGroupsAPI.GetPasswordSyncGroup(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `PasswordSyncGroupsAPI.GetPasswordSyncGroup``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetPasswordSyncGroup`: PasswordSyncGroup
          fmt.Fprintf(os.Stdout, "Response from `PasswordSyncGroupsAPI.GetPasswordSyncGroup`: %v\n", resp)
        }
- path: /password-sync-groups
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/password-sync-groups#get-password-sync-groups
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.PasswordSyncGroupsAPI.GetPasswordSyncGroups(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.PasswordSyncGroupsAPI.GetPasswordSyncGroups(context.Background()).Limit(limit).Offset(offset).Count(count).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `PasswordSyncGroupsAPI.GetPasswordSyncGroups``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetPasswordSyncGroups`: []PasswordSyncGroup
          fmt.Fprintf(os.Stdout, "Response from `PasswordSyncGroupsAPI.GetPasswordSyncGroups`: %v\n", resp)
        }
- path: /password-sync-groups/{id}
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/password-sync-groups#update-password-sync-group
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `6881f631-3bd5-4213-9c75-8e05cc3e35dd` // string | The ID of password sync group to update. # string | The ID of password sync group to update.
           passwordsyncgroup := []byte(`{
          "created" : "2023-03-16T04:00:00Z",
          "name" : "Password Sync Group 1",
          "modified" : "2023-03-16T04:00:00Z",
          "passwordPolicyId" : "2c91808d744ba0ce01746f93b6204501",
          "id" : "6881f631-3bd5-4213-9c75-8e05cc3e35dd",
          "sourceIds" : [ "2c918084660f45d6016617daa9210584", "2c918084660f45d6016617daa9210500" ]
        }`) // PasswordSyncGroup | 

          
          var passwordSyncGroup v2025.PasswordSyncGroup
          if err := json.Unmarshal(passwordsyncgroup, &passwordSyncGroup); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.PasswordSyncGroupsAPI.UpdatePasswordSyncGroup(context.Background(), id).PasswordSyncGroup(passwordSyncGroup).Execute()
          //resp, r, err := apiClient.V2025.PasswordSyncGroupsAPI.UpdatePasswordSyncGroup(context.Background(), id).PasswordSyncGroup(passwordSyncGroup).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `PasswordSyncGroupsAPI.UpdatePasswordSyncGroup``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdatePasswordSyncGroup`: PasswordSyncGroup
          fmt.Fprintf(os.Stdout, "Response from `PasswordSyncGroupsAPI.UpdatePasswordSyncGroup`: %v\n", resp)
        }
- path: /personal-access-tokens
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/personal-access-tokens#create-personal-access-token
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           createpersonalaccesstokenrequest := []byte(`{
          "scope" : [ "demo:personal-access-token-scope:first", "demo:personal-access-token-scope:second" ],
          "accessTokenValiditySeconds" : 36900,
          "name" : "NodeJS Integration",
          "expirationDate" : "2018-01-11T18:45:37.098Z"
        }`) // CreatePersonalAccessTokenRequest | Name and scope of personal access token.

          
          var createPersonalAccessTokenRequest v2025.CreatePersonalAccessTokenRequest
          if err := json.Unmarshal(createpersonalaccesstokenrequest, &createPersonalAccessTokenRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.PersonalAccessTokensAPI.CreatePersonalAccessToken(context.Background()).CreatePersonalAccessTokenRequest(createPersonalAccessTokenRequest).Execute()
          //resp, r, err := apiClient.V2025.PersonalAccessTokensAPI.CreatePersonalAccessToken(context.Background()).CreatePersonalAccessTokenRequest(createPersonalAccessTokenRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `PersonalAccessTokensAPI.CreatePersonalAccessToken``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreatePersonalAccessToken`: CreatePersonalAccessTokenResponse
          fmt.Fprintf(os.Stdout, "Response from `PersonalAccessTokensAPI.CreatePersonalAccessToken`: %v\n", resp)
        }
- path: /personal-access-tokens/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/personal-access-tokens#delete-personal-access-token
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The personal access token id # string | The personal access token id

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.PersonalAccessTokensAPI.DeletePersonalAccessToken(context.Background(), id).Execute()
          //r, err := apiClient.V2025.PersonalAccessTokensAPI.DeletePersonalAccessToken(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `PersonalAccessTokensAPI.DeletePersonalAccessToken``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /personal-access-tokens
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/personal-access-tokens#list-personal-access-tokens
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          ownerId := `2c9180867b50d088017b554662fb281e` // string | The identity ID of the owner whose personal access tokens should be listed.  If \"me\", the caller should have the following right: 'idn:my-personal-access-tokens:read' If an actual owner ID or if the `owner-id` parameter is omitted in the request,  the caller should have the following right: 'idn:all-personal-access-tokens:read'.  If the caller has the following right, then managed personal access tokens associated with `owner-id`  will be retrieved: 'idn:managed-personal-access-tokens:read' (optional) # string | The identity ID of the owner whose personal access tokens should be listed.  If \"me\", the caller should have the following right: 'idn:my-personal-access-tokens:read' If an actual owner ID or if the `owner-id` parameter is omitted in the request,  the caller should have the following right: 'idn:all-personal-access-tokens:read'.  If the caller has the following right, then managed personal access tokens associated with `owner-id`  will be retrieved: 'idn:managed-personal-access-tokens:read' (optional)
          filters := `lastUsed le 2023-02-05T10:59:27.214Z` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **lastUsed**: *le, isnull* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **lastUsed**: *le, isnull* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.PersonalAccessTokensAPI.ListPersonalAccessTokens(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.PersonalAccessTokensAPI.ListPersonalAccessTokens(context.Background()).OwnerId(ownerId).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `PersonalAccessTokensAPI.ListPersonalAccessTokens``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListPersonalAccessTokens`: []GetPersonalAccessTokenResponse
          fmt.Fprintf(os.Stdout, "Response from `PersonalAccessTokensAPI.ListPersonalAccessTokens`: %v\n", resp)
        }
- path: /personal-access-tokens/{id}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/personal-access-tokens#patch-personal-access-token
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The Personal Access Token id # string | The Personal Access Token id
          jsonpatchoperation := []byte(`[{op=replace, path=/name, value=New name}, {op=replace, path=/scope, value=[sp:scopes:all]}]`) // []JsonPatchOperation | A list of OAuth client update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * scope 

          
          var jsonPatchOperation []v2025.JsonPatchOperation
          if err := json.Unmarshal(jsonpatchoperation, &jsonPatchOperation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.PersonalAccessTokensAPI.PatchPersonalAccessToken(context.Background(), id).JsonPatchOperation(jsonPatchOperation).Execute()
          //resp, r, err := apiClient.V2025.PersonalAccessTokensAPI.PatchPersonalAccessToken(context.Background(), id).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `PersonalAccessTokensAPI.PatchPersonalAccessToken``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchPersonalAccessToken`: GetPersonalAccessTokenResponse
          fmt.Fprintf(os.Stdout, "Response from `PersonalAccessTokensAPI.PatchPersonalAccessToken`: %v\n", resp)
        }
- path: /public-identities
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/public-identities#get-public-identities
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `firstname eq "John"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **alias**: *eq, sw*  **email**: *eq, sw*  **firstname**: *eq, sw*  **lastname**: *eq, sw* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **alias**: *eq, sw*  **email**: *eq, sw*  **firstname**: *eq, sw*  **lastname**: *eq, sw* (optional)
          addCoreFilters := false // bool | If *true*, only get identities which satisfy ALL the following criteria in addition to any criteria specified by *filters*:   - Should be either correlated or protected.   - Should not be \"spadmin\" or \"cloudadmin\".   - uid should not be null.   - lastname should not be null.   - email should not be null. (optional) (default to false) # bool | If *true*, only get identities which satisfy ALL the following criteria in addition to any criteria specified by *filters*:   - Should be either correlated or protected.   - Should not be \"spadmin\" or \"cloudadmin\".   - uid should not be null.   - lastname should not be null.   - email should not be null. (optional) (default to false)
          sorters := `name` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.PublicIdentitiesAPI.GetPublicIdentities(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.PublicIdentitiesAPI.GetPublicIdentities(context.Background()).Limit(limit).Offset(offset).Count(count).Filters(filters).AddCoreFilters(addCoreFilters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `PublicIdentitiesAPI.GetPublicIdentities``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetPublicIdentities`: []PublicIdentity
          fmt.Fprintf(os.Stdout, "Response from `PublicIdentitiesAPI.GetPublicIdentities`: %v\n", resp)
        }
- path: /public-identities-config
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/public-identities-config#get-public-identity-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.PublicIdentitiesConfigAPI.GetPublicIdentityConfig(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.PublicIdentitiesConfigAPI.GetPublicIdentityConfig(context.Background()).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `PublicIdentitiesConfigAPI.GetPublicIdentityConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetPublicIdentityConfig`: PublicIdentityConfig
          fmt.Fprintf(os.Stdout, "Response from `PublicIdentitiesConfigAPI.GetPublicIdentityConfig`: %v\n", resp)
        }
- path: /public-identities-config
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/public-identities-config#update-public-identity-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           publicidentityconfig := []byte(`{
          "modified" : "2018-06-25T20:22:28.104Z",
          "attributes" : [ {
            "name" : "Country",
            "key" : "country"
          }, {
            "name" : "Country",
            "key" : "country"
          } ],
          "modifiedBy" : {
            "name" : "Thomas Edison",
            "id" : "2c9180a46faadee4016fb4e018c20639",
            "type" : "IDENTITY"
          }
        }`) // PublicIdentityConfig | 

          
          var publicIdentityConfig v2025.PublicIdentityConfig
          if err := json.Unmarshal(publicidentityconfig, &publicIdentityConfig); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.PublicIdentitiesConfigAPI.UpdatePublicIdentityConfig(context.Background()).PublicIdentityConfig(publicIdentityConfig).Execute()
          //resp, r, err := apiClient.V2025.PublicIdentitiesConfigAPI.UpdatePublicIdentityConfig(context.Background()).PublicIdentityConfig(publicIdentityConfig).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `PublicIdentitiesConfigAPI.UpdatePublicIdentityConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdatePublicIdentityConfig`: PublicIdentityConfig
          fmt.Fprintf(os.Stdout, "Response from `PublicIdentitiesConfigAPI.UpdatePublicIdentityConfig`: %v\n", resp)
        }
- path: /reports/{id}/cancel
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/reports-data-extraction#cancel-report
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `a1ed223247144cc29d23c632624b4767` // string | ID of the running Report to cancel # string | ID of the running Report to cancel

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.ReportsDataExtractionAPI.CancelReport(context.Background(), id).Execute()
          //r, err := apiClient.V2025.ReportsDataExtractionAPI.CancelReport(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ReportsDataExtractionAPI.CancelReport``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /reports/{taskResultId}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/reports-data-extraction#get-report
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          taskResultId := `ef38f94347e94562b5bb8424a56397d8` // string | Unique identifier of the task result which handled report # string | Unique identifier of the task result which handled report
          fileFormat := `csv` // string | Output format of the requested report file # string | Output format of the requested report file
          name := `Identities Details Report` // string | preferred Report file name, by default will be used report name from task result. (optional) # string | preferred Report file name, by default will be used report name from task result. (optional)
          auditable := true // bool | Enables auditing for current report download. Will create an audit event and sent it to the REPORT cloud-audit kafka topic.  Event will be created if there is any result present by requested taskResultId. (optional) (default to false) # bool | Enables auditing for current report download. Will create an audit event and sent it to the REPORT cloud-audit kafka topic.  Event will be created if there is any result present by requested taskResultId. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ReportsDataExtractionAPI.GetReport(context.Background(), taskResultId).FileFormat(fileFormat).Execute()
          //resp, r, err := apiClient.V2025.ReportsDataExtractionAPI.GetReport(context.Background(), taskResultId).FileFormat(fileFormat).Name(name).Auditable(auditable).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ReportsDataExtractionAPI.GetReport``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetReport`: *os.File
          fmt.Fprintf(os.Stdout, "Response from `ReportsDataExtractionAPI.GetReport`: %v\n", resp)
        }
- path: /reports/{taskResultId}/result
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/reports-data-extraction#get-report-result
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          taskResultId := `ef38f94347e94562b5bb8424a56397d8` // string | Unique identifier of the task result which handled report # string | Unique identifier of the task result which handled report
          completed := true // bool | state of task result to apply ordering when results are fetching from the DB (optional) (default to false) # bool | state of task result to apply ordering when results are fetching from the DB (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ReportsDataExtractionAPI.GetReportResult(context.Background(), taskResultId).Execute()
          //resp, r, err := apiClient.V2025.ReportsDataExtractionAPI.GetReportResult(context.Background(), taskResultId).Completed(completed).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ReportsDataExtractionAPI.GetReportResult``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetReportResult`: ReportResults
          fmt.Fprintf(os.Stdout, "Response from `ReportsDataExtractionAPI.GetReportResult`: %v\n", resp)
        }
- path: /reports/run
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/reports-data-extraction#start-report
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           reportdetails := []byte(`{
          "reportType" : "ACCOUNTS",
          "arguments" : {
            "application" : "2c9180897e7742b2017e781782f705b9",
            "sourceName" : "Active Directory"
          }
        }`) // ReportDetails | 

          
          var reportDetails v2025.ReportDetails
          if err := json.Unmarshal(reportdetails, &reportDetails); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ReportsDataExtractionAPI.StartReport(context.Background()).ReportDetails(reportDetails).Execute()
          //resp, r, err := apiClient.V2025.ReportsDataExtractionAPI.StartReport(context.Background()).ReportDetails(reportDetails).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ReportsDataExtractionAPI.StartReport``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `StartReport`: TaskResultDetails
          fmt.Fprintf(os.Stdout, "Response from `ReportsDataExtractionAPI.StartReport`: %v\n", resp)
        }
- path: /requestable-objects
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/requestable-objects#list-requestable-objects
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          identityId := `e7eab60924f64aa284175b9fa3309599` // string | If present, the value returns only requestable objects for the specified identity.  * Admin users can call this with any identity ID value.  * Non-admin users can only specify *me* or pass their own identity ID value.  * If absent, returns a list of all requestable objects for the tenant. Only admin users can make such a call. In this case, the available, pending, assigned accesses will not be annotated in the result. (optional) # string | If present, the value returns only requestable objects for the specified identity.  * Admin users can call this with any identity ID value.  * Non-admin users can only specify *me* or pass their own identity ID value.  * If absent, returns a list of all requestable objects for the tenant. Only admin users can make such a call. In this case, the available, pending, assigned accesses will not be annotated in the result. (optional)
          types := []byte(`ACCESS_PROFILE,ROLE`) // []string | Filters the results to the specified type/types, where each type is one of `ROLE` or `ACCESS_PROFILE`. If absent, all types are returned. SailPoint may add support for additional types in the future without notice. (optional)
          term := `Finance Role` // string | Allows searching requestable access items with a partial match on the name or description. If `term` is provided, then the API will ignore the `filter` query parameter. (optional) # string | Allows searching requestable access items with a partial match on the name or description. If `term` is provided, then the API will ignore the `filter` query parameter. (optional)
          statuses := []byte(`[ASSIGNED, PENDING]`) // []RequestableObjectRequestStatus | Filters the result to the specified status/statuses, where each status is one of `AVAILABLE`, `ASSIGNED`, or `PENDING`. Specifying this parameter without also specifying an `identity-id` parameter results in an error.  SailPoint may add additional statuses in the future without notice. (optional)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `name sw "bob"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*  (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*  (optional)
          sorters := `name` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**  (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**  (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.RequestableObjectsAPI.ListRequestableObjects(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.RequestableObjectsAPI.ListRequestableObjects(context.Background()).IdentityId(identityId).Types(types).Term(term).Statuses(statuses).Limit(limit).Offset(offset).Count(count).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `RequestableObjectsAPI.ListRequestableObjects``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListRequestableObjects`: []RequestableObject
          fmt.Fprintf(os.Stdout, "Response from `RequestableObjectsAPI.ListRequestableObjects`: %v\n", resp)
        }
- path: /role-insights/requests
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/role-insights#create-role-insight-requests
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.RoleInsightsAPI.CreateRoleInsightRequests(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.RoleInsightsAPI.CreateRoleInsightRequests(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `RoleInsightsAPI.CreateRoleInsightRequests``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateRoleInsightRequests`: RoleInsightsResponse
          fmt.Fprintf(os.Stdout, "Response from `RoleInsightsAPI.CreateRoleInsightRequests`: %v\n", resp)
        }
- path: /role-insights/{insightId}/entitlement-changes/download
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/role-insights#download-role-insights-entitlements-changes
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          insightId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | The role insight id # string | The role insight id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          sorters := `identitiesWithAccess` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **identitiesWithAccess**  The default sort is **identitiesWithAccess** in descending order. (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **identitiesWithAccess**  The default sort is **identitiesWithAccess** in descending order. (optional)
          filters := `name sw "r"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **description**: *sw* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **description**: *sw* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.RoleInsightsAPI.DownloadRoleInsightsEntitlementsChanges(context.Background(), insightId).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.RoleInsightsAPI.DownloadRoleInsightsEntitlementsChanges(context.Background(), insightId).XSailPointExperimental(xSailPointExperimental).Sorters(sorters).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `RoleInsightsAPI.DownloadRoleInsightsEntitlementsChanges``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `DownloadRoleInsightsEntitlementsChanges`: string
          fmt.Fprintf(os.Stdout, "Response from `RoleInsightsAPI.DownloadRoleInsightsEntitlementsChanges`: %v\n", resp)
        }
- path: /role-insights/{insightId}/entitlement-changes/{entitlementId}/identities
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/role-insights#get-entitlement-changes-identities
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          insightId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | The role insight id # string | The role insight id
          entitlementId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | The entitlement id # string | The entitlement id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          hasEntitlement := true // bool | Identity has this entitlement or not (optional) (default to false) # bool | Identity has this entitlement or not (optional) (default to false)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          sorters := `name` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name** (optional)
          filters := `name sw "Jan"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.RoleInsightsAPI.GetEntitlementChangesIdentities(context.Background(), insightId, entitlementId).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.RoleInsightsAPI.GetEntitlementChangesIdentities(context.Background(), insightId, entitlementId).XSailPointExperimental(xSailPointExperimental).HasEntitlement(hasEntitlement).Offset(offset).Limit(limit).Count(count).Sorters(sorters).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `RoleInsightsAPI.GetEntitlementChangesIdentities``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetEntitlementChangesIdentities`: []RoleInsightsIdentities
          fmt.Fprintf(os.Stdout, "Response from `RoleInsightsAPI.GetEntitlementChangesIdentities`: %v\n", resp)
        }
- path: /role-insights/{insightId}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/role-insights#get-role-insight
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          insightId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | The role insight id # string | The role insight id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.RoleInsightsAPI.GetRoleInsight(context.Background(), insightId).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.RoleInsightsAPI.GetRoleInsight(context.Background(), insightId).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `RoleInsightsAPI.GetRoleInsight``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetRoleInsight`: RoleInsight
          fmt.Fprintf(os.Stdout, "Response from `RoleInsightsAPI.GetRoleInsight`: %v\n", resp)
        }
- path: /role-insights
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/role-insights#get-role-insights
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          sorters := `numberOfUpdates` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **numberOfUpdates, identitiesWithAccess, totalNumberOfIdentities** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **numberOfUpdates, identitiesWithAccess, totalNumberOfIdentities** (optional)
          filters := `name sw "John"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **ownerName**: *sw*  **description**: *sw* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **ownerName**: *sw*  **description**: *sw* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.RoleInsightsAPI.GetRoleInsights(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.RoleInsightsAPI.GetRoleInsights(context.Background()).XSailPointExperimental(xSailPointExperimental).Offset(offset).Limit(limit).Count(count).Sorters(sorters).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `RoleInsightsAPI.GetRoleInsights``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetRoleInsights`: []RoleInsight
          fmt.Fprintf(os.Stdout, "Response from `RoleInsightsAPI.GetRoleInsights`: %v\n", resp)
        }
- path: /role-insights/{insightId}/current-entitlements
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/role-insights#get-role-insights-current-entitlements
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          insightId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | The role insight id # string | The role insight id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          filters := `name sw "r"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **description**: *sw* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **description**: *sw* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.RoleInsightsAPI.GetRoleInsightsCurrentEntitlements(context.Background(), insightId).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.RoleInsightsAPI.GetRoleInsightsCurrentEntitlements(context.Background(), insightId).XSailPointExperimental(xSailPointExperimental).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `RoleInsightsAPI.GetRoleInsightsCurrentEntitlements``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetRoleInsightsCurrentEntitlements`: []RoleInsightsEntitlement
          fmt.Fprintf(os.Stdout, "Response from `RoleInsightsAPI.GetRoleInsightsCurrentEntitlements`: %v\n", resp)
        }
- path: /role-insights/{insightId}/entitlement-changes
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/role-insights#get-role-insights-entitlements-changes
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          insightId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | The role insight id # string | The role insight id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          sorters := `sorters_example` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **identitiesWithAccess, name** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **identitiesWithAccess, name** (optional)
          filters := `name sw "Admin"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **description**: *sw* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **description**: *sw* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.RoleInsightsAPI.GetRoleInsightsEntitlementsChanges(context.Background(), insightId).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.RoleInsightsAPI.GetRoleInsightsEntitlementsChanges(context.Background(), insightId).XSailPointExperimental(xSailPointExperimental).Sorters(sorters).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `RoleInsightsAPI.GetRoleInsightsEntitlementsChanges``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetRoleInsightsEntitlementsChanges`: []RoleInsightsEntitlementChanges
          fmt.Fprintf(os.Stdout, "Response from `RoleInsightsAPI.GetRoleInsightsEntitlementsChanges`: %v\n", resp)
        }
- path: /role-insights/requests/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/role-insights#get-role-insights-requests
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | The role insights request id # string | The role insights request id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.RoleInsightsAPI.GetRoleInsightsRequests(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.RoleInsightsAPI.GetRoleInsightsRequests(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `RoleInsightsAPI.GetRoleInsightsRequests``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetRoleInsightsRequests`: RoleInsightsResponse
          fmt.Fprintf(os.Stdout, "Response from `RoleInsightsAPI.GetRoleInsightsRequests`: %v\n", resp)
        }
- path: /role-insights/summary
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/role-insights#get-role-insights-summary
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.RoleInsightsAPI.GetRoleInsightsSummary(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.RoleInsightsAPI.GetRoleInsightsSummary(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `RoleInsightsAPI.GetRoleInsightsSummary``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetRoleInsightsSummary`: RoleInsightsSummary
          fmt.Fprintf(os.Stdout, "Response from `RoleInsightsAPI.GetRoleInsightsSummary`: %v\n", resp)
        }
- path: /roles
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/roles#create-role
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           role := []byte(`{
          "owner" : {
            "name" : "support",
            "id" : "2c9180a46faadee4016fb4e018c20639",
            "type" : "IDENTITY"
          },
          "entitlements" : [ {
            "name" : "CN=entitlement.490efde5,OU=OrgCo,OU=ServiceDept,DC=HQAD,DC=local",
            "id" : "2c91809773dee32014e13e122092014e",
            "type" : "ENTITLEMENT"
          }, {
            "name" : "CN=entitlement.490efde5,OU=OrgCo,OU=ServiceDept,DC=HQAD,DC=local",
            "id" : "2c91809773dee32014e13e122092014e",
            "type" : "ENTITLEMENT"
          } ],
          "dimensional" : false,
          "created" : "2021-03-01T22:32:58.104Z",
          "dimensionRefs" : [ {
            "name" : "Role 2",
            "id" : "2c91808568c529c60168cca6f90c1313",
            "type" : "DIMENSION"
          }, {
            "name" : "Role 2",
            "id" : "2c91808568c529c60168cca6f90c1313",
            "type" : "DIMENSION"
          } ],
          "description" : "Urna amet cursus pellentesque nisl orci maximus lorem nisl euismod fusce morbi placerat adipiscing maecenas nisi tristique et metus et lacus sed morbi nunc nisl maximus magna arcu varius sollicitudin elementum enim maecenas nisi id ipsum tempus fusce diam ipsum tortor.",
          "membership" : {
            "identities" : [ {
              "aliasName" : "t.edison",
              "name" : "Thomas Edison",
              "id" : "2c9180a46faadee4016fb4e018c20639",
              "type" : "IDENTITY"
            }, {
              "aliasName" : "t.edison",
              "name" : "Thomas Edison",
              "id" : "2c9180a46faadee4016fb4e018c20639",
              "type" : "IDENTITY"
            } ],
            "criteria" : {
              "stringValue" : "carlee.cert1c9f9b6fd@mailinator.com",
              "children" : [ {
                "stringValue" : "carlee.cert1c9f9b6fd@mailinator.com",
                "children" : [ {
                  "stringValue" : "carlee.cert1c9f9b6fd@mailinator.com",
                  "operation" : "EQUALS",
                  "key" : {
                    "sourceId" : "2c9180867427f3a301745aec18211519",
                    "property" : "attribute.email",
                    "type" : "ACCOUNT"
                  }
                }, {
                  "stringValue" : "carlee.cert1c9f9b6fd@mailinator.com",
                  "operation" : "EQUALS",
                  "key" : {
                    "sourceId" : "2c9180867427f3a301745aec18211519",
                    "property" : "attribute.email",
                    "type" : "ACCOUNT"
                  }
                } ],
                "operation" : "EQUALS",
                "key" : {
                  "sourceId" : "2c9180867427f3a301745aec18211519",
                  "property" : "attribute.email",
                  "type" : "ACCOUNT"
                }
              }, {
                "stringValue" : "carlee.cert1c9f9b6fd@mailinator.com",
                "children" : [ {
                  "stringValue" : "carlee.cert1c9f9b6fd@mailinator.com",
                  "operation" : "EQUALS",
                  "key" : {
                    "sourceId" : "2c9180867427f3a301745aec18211519",
                    "property" : "attribute.email",
                    "type" : "ACCOUNT"
                  }
                }, {
                  "stringValue" : "carlee.cert1c9f9b6fd@mailinator.com",
                  "operation" : "EQUALS",
                  "key" : {
                    "sourceId" : "2c9180867427f3a301745aec18211519",
                    "property" : "attribute.email",
                    "type" : "ACCOUNT"
                  }
                } ],
                "operation" : "EQUALS",
                "key" : {
                  "sourceId" : "2c9180867427f3a301745aec18211519",
                  "property" : "attribute.email",
                  "type" : "ACCOUNT"
                }
              } ],
              "operation" : "EQUALS",
              "key" : {
                "sourceId" : "2c9180867427f3a301745aec18211519",
                "property" : "attribute.email",
                "type" : "ACCOUNT"
              }
            },
            "type" : "IDENTITY_LIST"
          },
          "enabled" : true,
          "revocationRequestConfig" : {
            "commentsRequired" : false,
            "approvalSchemes" : [ {
              "approverId" : "46c79819-a69f-49a2-becb-12c971ae66c6",
              "approverType" : "GOVERNANCE_GROUP"
            }, {
              "approverId" : "46c79819-a69f-49a2-becb-12c971ae66c6",
              "approverType" : "GOVERNANCE_GROUP"
            } ],
            "denialCommentsRequired" : false
          },
          "segments" : [ "f7b1b8a3-5fed-4fd4-ad29-82014e137e19", "29cb6c06-1da8-43ea-8be4-b3125f248f2a" ],
          "legacyMembershipInfo" : {
            "type" : "IDENTITY_LIST"
          },
          "accessRequestConfig" : {
            "commentsRequired" : true,
            "reauthorizationRequired" : true,
            "approvalSchemes" : [ {
              "approverId" : "46c79819-a69f-49a2-becb-12c971ae66c6",
              "approverType" : "GOVERNANCE_GROUP"
            }, {
              "approverId" : "46c79819-a69f-49a2-becb-12c971ae66c6",
              "approverType" : "GOVERNANCE_GROUP"
            } ],
            "denialCommentsRequired" : true
          },
          "accessProfiles" : [ {
            "name" : "Access Profile 2567",
            "id" : "ff808081751e6e129f1518161919ecca",
            "type" : "ACCESS_PROFILE"
          }, {
            "name" : "Access Profile 2567",
            "id" : "ff808081751e6e129f1518161919ecca",
            "type" : "ACCESS_PROFILE"
          } ],
          "name" : "Role 2567",
          "modified" : "2021-03-02T20:22:28.104Z",
          "accessModelMetadata" : {
            "attributes" : [ {
              "key" : "iscPrivacy",
              "name" : "Privacy",
              "multiselect" : false,
              "status" : "active",
              "type" : "governance",
              "objectTypes" : [ "all" ],
              "description" : "Specifies the level of privacy associated with an access item.",
              "values" : [ {
                "value" : "public",
                "name" : "Public",
                "status" : "active"
              } ]
            } ]
          },
          "id" : "2c918086749d78830174a1a40e121518",
          "requestable" : true
        }`) // Role | 

          
          var role v2025.Role
          if err := json.Unmarshal(role, &role); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.RolesAPI.CreateRole(context.Background()).Role(role).Execute()
          //resp, r, err := apiClient.V2025.RolesAPI.CreateRole(context.Background()).Role(role).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `RolesAPI.CreateRole``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateRole`: Role
          fmt.Fprintf(os.Stdout, "Response from `RolesAPI.CreateRole`: %v\n", resp)
        }
- path: /roles/bulk-delete
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/roles#delete-bulk-roles
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           rolebulkdeleterequest := []byte(`{
          "roleIds" : [ "2c9180847812e0b1017817051919ecca", "2c9180887812e0b201781e129f151816" ]
        }`) // RoleBulkDeleteRequest | 

          
          var roleBulkDeleteRequest v2025.RoleBulkDeleteRequest
          if err := json.Unmarshal(rolebulkdeleterequest, &roleBulkDeleteRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.RolesAPI.DeleteBulkRoles(context.Background()).RoleBulkDeleteRequest(roleBulkDeleteRequest).Execute()
          //resp, r, err := apiClient.V2025.RolesAPI.DeleteBulkRoles(context.Background()).RoleBulkDeleteRequest(roleBulkDeleteRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `RolesAPI.DeleteBulkRoles``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `DeleteBulkRoles`: TaskResultDto
          fmt.Fprintf(os.Stdout, "Response from `RolesAPI.DeleteBulkRoles`: %v\n", resp)
        }
- path: /roles/{id}/access-model-metadata/{attributeKey}/values/{attributeValue}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/roles#delete-metadata-from-role-by-key-and-value
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808c74ff913f0175097daa9d59cd` // string | The role's id. # string | The role's id.
          attributeKey := `iscPrivacy` // string | Technical name of the Attribute. # string | Technical name of the Attribute.
          attributeValue := `public` // string | Technical name of the Attribute Value. # string | Technical name of the Attribute Value.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.RolesAPI.DeleteMetadataFromRoleByKeyAndValue(context.Background(), id, attributeKey, attributeValue).Execute()
          //r, err := apiClient.V2025.RolesAPI.DeleteMetadataFromRoleByKeyAndValue(context.Background(), id, attributeKey, attributeValue).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `RolesAPI.DeleteMetadataFromRoleByKeyAndValue``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /roles/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/roles#delete-role
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808a7813090a017814121e121518` // string | ID of the Role # string | ID of the Role

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.RolesAPI.DeleteRole(context.Background(), id).Execute()
          //r, err := apiClient.V2025.RolesAPI.DeleteRole(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `RolesAPI.DeleteRole``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /roles/access-model-metadata/bulk-update
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/roles#get-bulk-update-status
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.RolesAPI.GetBulkUpdateStatus(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.RolesAPI.GetBulkUpdateStatus(context.Background()).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `RolesAPI.GetBulkUpdateStatus``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetBulkUpdateStatus`: []RoleGetAllBulkUpdateResponse
          fmt.Fprintf(os.Stdout, "Response from `RolesAPI.GetBulkUpdateStatus`: %v\n", resp)
        }
- path: /roles/access-model-metadata/bulk-update/id
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/roles#get-bulk-update-status-by-id
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `c24359c389374d0fb8585698a2189e3d` // string | The Id of the bulk update task. # string | The Id of the bulk update task.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.RolesAPI.GetBulkUpdateStatusById(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.RolesAPI.GetBulkUpdateStatusById(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `RolesAPI.GetBulkUpdateStatusById``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetBulkUpdateStatusById`: RoleBulkUpdateResponse
          fmt.Fprintf(os.Stdout, "Response from `RolesAPI.GetBulkUpdateStatusById`: %v\n", resp)
        }
- path: /roles/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/roles#get-role
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808a7813090a017814121e121518` // string | ID of the Role # string | ID of the Role

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.RolesAPI.GetRole(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.RolesAPI.GetRole(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `RolesAPI.GetRole``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetRole`: Role
          fmt.Fprintf(os.Stdout, "Response from `RolesAPI.GetRole`: %v\n", resp)
        }
- path: /roles/{id}/assigned-identities
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/roles#get-role-assigned-identities
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808a7813090a017814121e121518` // string | ID of the Role for which the assigned Identities are to be listed # string | ID of the Role for which the assigned Identities are to be listed
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `name sw Joe` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **aliasName**: *eq, sw*  **email**: *eq, sw*  **name**: *eq, sw, co* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **aliasName**: *eq, sw*  **email**: *eq, sw*  **name**: *eq, sw, co* (optional)
          sorters := `aliasName,name` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, aliasName, email** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, aliasName, email** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.RolesAPI.GetRoleAssignedIdentities(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.RolesAPI.GetRoleAssignedIdentities(context.Background(), id).Limit(limit).Offset(offset).Count(count).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `RolesAPI.GetRoleAssignedIdentities``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetRoleAssignedIdentities`: []RoleIdentity
          fmt.Fprintf(os.Stdout, "Response from `RolesAPI.GetRoleAssignedIdentities`: %v\n", resp)
        }
- path: /roles/{id}/entitlements
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/roles#get-role-entitlements
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808a7813090a017814121919ecca` // string | Containing role's ID. # string | Containing role's ID.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          limit := 50 // int32 | Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 50) # int32 | Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 50)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `attribute eq "memberOf"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **attribute**: *eq, sw*  **value**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **source.id**: *eq, in* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **attribute**: *eq, sw*  **value**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **source.id**: *eq, in* (optional)
          sorters := `name,-modified` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, attribute, value, created, modified** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, attribute, value, created, modified** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.RolesAPI.GetRoleEntitlements(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.RolesAPI.GetRoleEntitlements(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Limit(limit).Offset(offset).Count(count).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `RolesAPI.GetRoleEntitlements``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetRoleEntitlements`: []Entitlement
          fmt.Fprintf(os.Stdout, "Response from `RolesAPI.GetRoleEntitlements`: %v\n", resp)
        }
- path: /roles
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/roles#list-roles
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          forSubadmin := `5168015d32f890ca15812c9180835d2e` // string | If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN Identity. The value of the parameter is either an Identity ID, or the special value **me**, which is shorthand for the calling Identity's ID. A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an Identity that is not a subadmin. (optional) # string | If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN Identity. The value of the parameter is either an Identity ID, or the special value **me**, which is shorthand for the calling Identity's ID. A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an Identity that is not a subadmin. (optional)
          limit := 50 // int32 | Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 50) # int32 | Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 50)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `requestable eq false` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **created**: *gt, ge, le*  **modified**: *lt, ge, le*  **owner.id**: *eq, in*  **requestable**: *eq*  **dimensional**: *eq* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **created**: *gt, ge, le*  **modified**: *lt, ge, le*  **owner.id**: *eq, in*  **requestable**: *eq*  **dimensional**: *eq* (optional)
          sorters := `name,-modified` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified** (optional)
          forSegmentIds := `0b5c9f25-83c6-4762-9073-e38f7bb2ae26,2e8d8180-24bc-4d21-91c6-7affdb473b0d` // string | If present and not empty, additionally filters Roles to those which are assigned to the Segment(s) with the specified IDs.  If segmentation is currently unavailable, specifying this parameter results in an error. (optional) # string | If present and not empty, additionally filters Roles to those which are assigned to the Segment(s) with the specified IDs.  If segmentation is currently unavailable, specifying this parameter results in an error. (optional)
          includeUnsegmented := false // bool | Whether or not the response list should contain unsegmented Roles. If *for-segment-ids* is absent or empty, specifying *include-unsegmented* as false results in an error. (optional) (default to true) # bool | Whether or not the response list should contain unsegmented Roles. If *for-segment-ids* is absent or empty, specifying *include-unsegmented* as false results in an error. (optional) (default to true)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.RolesAPI.ListRoles(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.RolesAPI.ListRoles(context.Background()).ForSubadmin(forSubadmin).Limit(limit).Offset(offset).Count(count).Filters(filters).Sorters(sorters).ForSegmentIds(forSegmentIds).IncludeUnsegmented(includeUnsegmented).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `RolesAPI.ListRoles``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListRoles`: []Role
          fmt.Fprintf(os.Stdout, "Response from `RolesAPI.ListRoles`: %v\n", resp)
        }
- path: /roles/{id}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/roles#patch-role
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808a7813090a017814121e121518` // string | ID of the Role to patch # string | ID of the Role to patch
          jsonpatchoperation := []byte(`[{op=replace, path=/requestable, value=true}, {op=replace, path=/enabled, value=true}]`) // []JsonPatchOperation | 

          
          var jsonPatchOperation []v2025.JsonPatchOperation
          if err := json.Unmarshal(jsonpatchoperation, &jsonPatchOperation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.RolesAPI.PatchRole(context.Background(), id).JsonPatchOperation(jsonPatchOperation).Execute()
          //resp, r, err := apiClient.V2025.RolesAPI.PatchRole(context.Background(), id).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `RolesAPI.PatchRole``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchRole`: Role
          fmt.Fprintf(os.Stdout, "Response from `RolesAPI.PatchRole`: %v\n", resp)
        }
- path: /roles/filter
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/roles#search-roles-by-filter
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          forSubadmin := `5168015d32f890ca15812c9180835d2e` // string | If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN Identity. The value of the parameter is either an Identity ID, or the special value **me**, which is shorthand for the calling Identity's ID. A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an Identity that is not a subadmin. (optional) # string | If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN Identity. The value of the parameter is either an Identity ID, or the special value **me**, which is shorthand for the calling Identity's ID. A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an Identity that is not a subadmin. (optional)
          limit := 50 // int32 | Max number of results to return See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 50) # int32 | Max number of results to return See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 50)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          sorters := `name,-modified` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified** (optional)
          forSegmentIds := `0b5c9f25-83c6-4762-9073-e38f7bb2ae26,2e8d8180-24bc-4d21-91c6-7affdb473b0d` // string | If present and not empty, additionally filters Roles to those which are assigned to the Segment(s) with the specified IDs. If segmentation is currently unavailable, specifying this parameter results in an error. (optional) # string | If present and not empty, additionally filters Roles to those which are assigned to the Segment(s) with the specified IDs. If segmentation is currently unavailable, specifying this parameter results in an error. (optional)
          includeUnsegmented := false // bool | Whether or not the response list should contain unsegmented Roles. If *for-segment-ids* is absent or empty, specifying *include-unsegmented* as false results in an error. (optional) (default to true) # bool | Whether or not the response list should contain unsegmented Roles. If *for-segment-ids* is absent or empty, specifying *include-unsegmented* as false results in an error. (optional) (default to true)
           rolelistfilterdto := []byte(`{
          "ammKeyValues" : [ {
            "attribute" : "iscFederalClassifications",
            "values" : [ "secret" ]
          } ],
          "filters" : "dimensional eq false"
        }`) // RoleListFilterDTO |  (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.RolesAPI.SearchRolesByFilter(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.RolesAPI.SearchRolesByFilter(context.Background()).ForSubadmin(forSubadmin).Limit(limit).Offset(offset).Count(count).Sorters(sorters).ForSegmentIds(forSegmentIds).IncludeUnsegmented(includeUnsegmented).RoleListFilterDTO(roleListFilterDTO).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `RolesAPI.SearchRolesByFilter``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SearchRolesByFilter`: Role
          fmt.Fprintf(os.Stdout, "Response from `RolesAPI.SearchRolesByFilter`: %v\n", resp)
        }
- path: /roles/{id}/access-model-metadata/{attributeKey}/values/{attributeValue}
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/roles#update-attribute-key-and-value-to-role
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `c24359c389374d0fb8585698a2189e3d` // string | The Id of a role # string | The Id of a role
          attributeKey := `iscPrivacy` // string | Technical name of the Attribute. # string | Technical name of the Attribute.
          attributeValue := `public` // string | Technical name of the Attribute Value. # string | Technical name of the Attribute Value.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.RolesAPI.UpdateAttributeKeyAndValueToRole(context.Background(), id, attributeKey, attributeValue).Execute()
          //resp, r, err := apiClient.V2025.RolesAPI.UpdateAttributeKeyAndValueToRole(context.Background(), id, attributeKey, attributeValue).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `RolesAPI.UpdateAttributeKeyAndValueToRole``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateAttributeKeyAndValueToRole`: Role
          fmt.Fprintf(os.Stdout, "Response from `RolesAPI.UpdateAttributeKeyAndValueToRole`: %v\n", resp)
        }
- path: /roles/access-model-metadata/bulk-update/filter
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/roles#update-roles-metadata-by-filter
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           rolemetadatabulkupdatebyfilterrequest := []byte(`{
          "values" : [ {
            "attribute" : "iscFederalClassifications",
            "values" : [ "topSecret" ]
          } ],
          "filters" : " requestable eq false",
          "replaceScope" : "ALL",
          "operation" : "REPLACE"
        }`) // RoleMetadataBulkUpdateByFilterRequest | 

          
          var roleMetadataBulkUpdateByFilterRequest v2025.RoleMetadataBulkUpdateByFilterRequest
          if err := json.Unmarshal(rolemetadatabulkupdatebyfilterrequest, &roleMetadataBulkUpdateByFilterRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.RolesAPI.UpdateRolesMetadataByFilter(context.Background()).RoleMetadataBulkUpdateByFilterRequest(roleMetadataBulkUpdateByFilterRequest).Execute()
          //resp, r, err := apiClient.V2025.RolesAPI.UpdateRolesMetadataByFilter(context.Background()).RoleMetadataBulkUpdateByFilterRequest(roleMetadataBulkUpdateByFilterRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `RolesAPI.UpdateRolesMetadataByFilter``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateRolesMetadataByFilter`: RoleBulkUpdateResponse
          fmt.Fprintf(os.Stdout, "Response from `RolesAPI.UpdateRolesMetadataByFilter`: %v\n", resp)
        }
- path: /roles/access-model-metadata/bulk-update/ids
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/roles#update-roles-metadata-by-ids
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           rolemetadatabulkupdatebyidrequest := []byte(`{
          "roles" : [ "b1db89554cfa431cb8b9921ea38d9367" ],
          "values" : [ {
            "attribute" : "iscFederalClassifications",
            "values" : [ "topSecret" ]
          } ],
          "replaceScope" : "ALL",
          "operation" : "REPLACE"
        }`) // RoleMetadataBulkUpdateByIdRequest | 

          
          var roleMetadataBulkUpdateByIdRequest v2025.RoleMetadataBulkUpdateByIdRequest
          if err := json.Unmarshal(rolemetadatabulkupdatebyidrequest, &roleMetadataBulkUpdateByIdRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.RolesAPI.UpdateRolesMetadataByIds(context.Background()).RoleMetadataBulkUpdateByIdRequest(roleMetadataBulkUpdateByIdRequest).Execute()
          //resp, r, err := apiClient.V2025.RolesAPI.UpdateRolesMetadataByIds(context.Background()).RoleMetadataBulkUpdateByIdRequest(roleMetadataBulkUpdateByIdRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `RolesAPI.UpdateRolesMetadataByIds``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateRolesMetadataByIds`: RoleBulkUpdateResponse
          fmt.Fprintf(os.Stdout, "Response from `RolesAPI.UpdateRolesMetadataByIds`: %v\n", resp)
        }
- path: /roles/access-model-metadata/bulk-update/query
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/roles#update-roles-metadata-by-query
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           rolemetadatabulkupdatebyqueryrequest := []byte(`{
          "query" : {
            "query\"" : {
              "indices" : [ "roles" ],
              "queryType" : "TEXT",
              "textQuery" : {
                "terms" : [ "test123" ],
                "fields" : [ "id" ],
                "matchAny" : false,
                "contains" : true
              },
              "includeNested" : false
            }
          },
          "values" : [ {
            "attributeValue" : [ "topSecret" ],
            "attributeKey" : "iscFederalClassifications"
          }, {
            "attributeValue" : [ "topSecret" ],
            "attributeKey" : "iscFederalClassifications"
          } ],
          "replaceScope" : "ALL",
          "operation" : "REPLACE"
        }`) // RoleMetadataBulkUpdateByQueryRequest | 

          
          var roleMetadataBulkUpdateByQueryRequest v2025.RoleMetadataBulkUpdateByQueryRequest
          if err := json.Unmarshal(rolemetadatabulkupdatebyqueryrequest, &roleMetadataBulkUpdateByQueryRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.RolesAPI.UpdateRolesMetadataByQuery(context.Background()).RoleMetadataBulkUpdateByQueryRequest(roleMetadataBulkUpdateByQueryRequest).Execute()
          //resp, r, err := apiClient.V2025.RolesAPI.UpdateRolesMetadataByQuery(context.Background()).RoleMetadataBulkUpdateByQueryRequest(roleMetadataBulkUpdateByQueryRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `RolesAPI.UpdateRolesMetadataByQuery``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateRolesMetadataByQuery`: RoleBulkUpdateResponse
          fmt.Fprintf(os.Stdout, "Response from `RolesAPI.UpdateRolesMetadataByQuery`: %v\n", resp)
        }
- path: /sim-integrations
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sim-integrations#create-sim-integration
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           simintegrationdetails := []byte(`{
          "cluster" : "xyzzy999",
          "statusMap" : "{closed_cancelled=Failed, closed_complete=Committed, closed_incomplete=Failed, closed_rejected=Failed, in_process=Queued, requested=Queued}",
          "request" : "{description=SailPoint Access Request,, req_description=The Service Request created by SailPoint ServiceNow Service Integration Module (SIM).,, req_short_description=SailPoint New Access Request Created from IdentityNow,, short_description=SailPoint Access Request $!plan.arguments.identityRequestId}",
          "sources" : [ "2c9180835d191a86015d28455b4a2329", "2c5680835d191a85765d28455b4a9823" ],
          "created" : "2015-05-28T14:07:17Z",
          "name" : "aName",
          "modified" : "2015-05-28T14:07:17Z",
          "description" : "Integration description",
          "attributes" : "{\"uid\":\"Walter White\",\"firstname\":\"walter\",\"cloudStatus\":\"UNREGISTERED\",\"displayName\":\"Walter White\",\"identificationNumber\":\"942\",\"lastSyncDate\":1470348809380,\"email\":\"walter@gmail.com\",\"lastname\":\"white\"}",
          "id" : "id12345",
          "type" : "ServiceNow Service Desk",
          "beforeProvisioningRule" : {
            "name" : "Example Rule",
            "id" : "2c918085708c274401708c2a8a760001",
            "type" : "IDENTITY"
          }
        }`) // SimIntegrationDetails | DTO containing the details of the SIM integration

          
          var simIntegrationDetails v2025.SimIntegrationDetails
          if err := json.Unmarshal(simintegrationdetails, &simIntegrationDetails); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SIMIntegrationsAPI.CreateSIMIntegration(context.Background()).XSailPointExperimental(xSailPointExperimental).SimIntegrationDetails(simIntegrationDetails).Execute()
          //resp, r, err := apiClient.V2025.SIMIntegrationsAPI.CreateSIMIntegration(context.Background()).XSailPointExperimental(xSailPointExperimental).SimIntegrationDetails(simIntegrationDetails).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SIMIntegrationsAPI.CreateSIMIntegration``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateSIMIntegration`: ServiceDeskIntegrationDto
          fmt.Fprintf(os.Stdout, "Response from `SIMIntegrationsAPI.CreateSIMIntegration`: %v\n", resp)
        }
- path: /sim-integrations/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sim-integrations#delete-sim-integration
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `12345` // string | The id of the integration to delete. # string | The id of the integration to delete.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.SIMIntegrationsAPI.DeleteSIMIntegration(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //r, err := apiClient.V2025.SIMIntegrationsAPI.DeleteSIMIntegration(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SIMIntegrationsAPI.DeleteSIMIntegration``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /sim-integrations/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sim-integrations#get-sim-integration
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `12345` // string | The id of the integration. # string | The id of the integration.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SIMIntegrationsAPI.GetSIMIntegration(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.SIMIntegrationsAPI.GetSIMIntegration(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SIMIntegrationsAPI.GetSIMIntegration``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetSIMIntegration`: ServiceDeskIntegrationDto
          fmt.Fprintf(os.Stdout, "Response from `SIMIntegrationsAPI.GetSIMIntegration`: %v\n", resp)
        }
- path: /sim-integrations
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sim-integrations#get-sim-integrations
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SIMIntegrationsAPI.GetSIMIntegrations(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.SIMIntegrationsAPI.GetSIMIntegrations(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SIMIntegrationsAPI.GetSIMIntegrations``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetSIMIntegrations`: []ServiceDeskIntegrationDto
          fmt.Fprintf(os.Stdout, "Response from `SIMIntegrationsAPI.GetSIMIntegrations`: %v\n", resp)
        }
- path: /sim-integrations/{id}/beforeProvisioningRule
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sim-integrations#patch-before-provisioning-rule
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `12345` // string | SIM integration id # string | SIM integration id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           jsonpatch := []byte(`{
          "operations" : [ {
            "op" : "replace",
            "path" : "/description",
            "value" : "New description"
          }, {
            "op" : "replace",
            "path" : "/description",
            "value" : "New description"
          } ]
        }`) // JsonPatch | The JsonPatch object that describes the changes of SIM beforeProvisioningRule.

          
          var jsonPatch v2025.JsonPatch
          if err := json.Unmarshal(jsonpatch, &jsonPatch); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SIMIntegrationsAPI.PatchBeforeProvisioningRule(context.Background(), id).XSailPointExperimental(xSailPointExperimental).JsonPatch(jsonPatch).Execute()
          //resp, r, err := apiClient.V2025.SIMIntegrationsAPI.PatchBeforeProvisioningRule(context.Background(), id).XSailPointExperimental(xSailPointExperimental).JsonPatch(jsonPatch).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SIMIntegrationsAPI.PatchBeforeProvisioningRule``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchBeforeProvisioningRule`: ServiceDeskIntegrationDto
          fmt.Fprintf(os.Stdout, "Response from `SIMIntegrationsAPI.PatchBeforeProvisioningRule`: %v\n", resp)
        }
- path: /sim-integrations/{id}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sim-integrations#patch-sim-attributes
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `12345` // string | SIM integration id # string | SIM integration id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           jsonpatch := []byte(`{
          "operations" : [ {
            "op" : "replace",
            "path" : "/description",
            "value" : "New description"
          }, {
            "op" : "replace",
            "path" : "/description",
            "value" : "New description"
          } ]
        }`) // JsonPatch | The JsonPatch object that describes the changes of SIM

          
          var jsonPatch v2025.JsonPatch
          if err := json.Unmarshal(jsonpatch, &jsonPatch); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SIMIntegrationsAPI.PatchSIMAttributes(context.Background(), id).XSailPointExperimental(xSailPointExperimental).JsonPatch(jsonPatch).Execute()
          //resp, r, err := apiClient.V2025.SIMIntegrationsAPI.PatchSIMAttributes(context.Background(), id).XSailPointExperimental(xSailPointExperimental).JsonPatch(jsonPatch).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SIMIntegrationsAPI.PatchSIMAttributes``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchSIMAttributes`: ServiceDeskIntegrationDto
          fmt.Fprintf(os.Stdout, "Response from `SIMIntegrationsAPI.PatchSIMAttributes`: %v\n", resp)
        }
- path: /sim-integrations/{id}
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sim-integrations#put-sim-integration
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `12345` // string | The id of the integration. # string | The id of the integration.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           simintegrationdetails := []byte(`{
          "cluster" : "xyzzy999",
          "statusMap" : "{closed_cancelled=Failed, closed_complete=Committed, closed_incomplete=Failed, closed_rejected=Failed, in_process=Queued, requested=Queued}",
          "request" : "{description=SailPoint Access Request,, req_description=The Service Request created by SailPoint ServiceNow Service Integration Module (SIM).,, req_short_description=SailPoint New Access Request Created from IdentityNow,, short_description=SailPoint Access Request $!plan.arguments.identityRequestId}",
          "sources" : [ "2c9180835d191a86015d28455b4a2329", "2c5680835d191a85765d28455b4a9823" ],
          "created" : "2015-05-28T14:07:17Z",
          "name" : "aName",
          "modified" : "2015-05-28T14:07:17Z",
          "description" : "Integration description",
          "attributes" : "{\"uid\":\"Walter White\",\"firstname\":\"walter\",\"cloudStatus\":\"UNREGISTERED\",\"displayName\":\"Walter White\",\"identificationNumber\":\"942\",\"lastSyncDate\":1470348809380,\"email\":\"walter@gmail.com\",\"lastname\":\"white\"}",
          "id" : "id12345",
          "type" : "ServiceNow Service Desk",
          "beforeProvisioningRule" : {
            "name" : "Example Rule",
            "id" : "2c918085708c274401708c2a8a760001",
            "type" : "IDENTITY"
          }
        }`) // SimIntegrationDetails | The full DTO of the integration containing the updated model

          
          var simIntegrationDetails v2025.SimIntegrationDetails
          if err := json.Unmarshal(simintegrationdetails, &simIntegrationDetails); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SIMIntegrationsAPI.PutSIMIntegration(context.Background(), id).XSailPointExperimental(xSailPointExperimental).SimIntegrationDetails(simIntegrationDetails).Execute()
          //resp, r, err := apiClient.V2025.SIMIntegrationsAPI.PutSIMIntegration(context.Background(), id).XSailPointExperimental(xSailPointExperimental).SimIntegrationDetails(simIntegrationDetails).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SIMIntegrationsAPI.PutSIMIntegration``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PutSIMIntegration`: ServiceDeskIntegrationDto
          fmt.Fprintf(os.Stdout, "Response from `SIMIntegrationsAPI.PutSIMIntegration`: %v\n", resp)
        }
- path: /sod-policies
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sod-policies#create-sod-policy
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           sodpolicy := []byte(`{
          "conflictingAccessCriteria" : {
            "leftCriteria" : {
              "name" : "money-in",
              "criteriaList" : [ {
                "type" : "ENTITLEMENT",
                "id" : "2c9180866166b5b0016167c32ef31a66",
                "name" : "Administrator"
              }, {
                "type" : "ENTITLEMENT",
                "id" : "2c9180866166b5b0016167c32ef31a67",
                "name" : "Administrator"
              } ]
            },
            "rightCriteria" : {
              "name" : "money-in",
              "criteriaList" : [ {
                "type" : "ENTITLEMENT",
                "id" : "2c9180866166b5b0016167c32ef31a66",
                "name" : "Administrator"
              }, {
                "type" : "ENTITLEMENT",
                "id" : "2c9180866166b5b0016167c32ef31a67",
                "name" : "Administrator"
              } ]
            }
          },
          "ownerRef" : {
            "name" : "Support",
            "id" : "2c9180a46faadee4016fb4e018c20639",
            "type" : "IDENTITY"
          },
          "created" : "2020-01-01T00:00:00Z",
          "scheduled" : true,
          "creatorId" : "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
          "modifierId" : "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
          "description" : "This policy ensures compliance of xyz",
          "violationOwnerAssignmentConfig" : {
            "assignmentRule" : "MANAGER",
            "ownerRef" : {
              "name" : "Support",
              "id" : "2c9180a46faadee4016fb4e018c20639",
              "type" : "IDENTITY"
            }
          },
          "correctionAdvice" : "Based on the role of the employee, managers should remove access that is not required for their job function.",
          "type" : "GENERAL",
          "tags" : [ "TAG1", "TAG2" ],
          "name" : "policy-xyz",
          "modified" : "2020-01-01T00:00:00Z",
          "policyQuery" : "@access(id:0f11f2a4-7c94-4bf3-a2bd-742580fe3bdg) AND @access(id:0f11f2a4-7c94-4bf3-a2bd-742580fe3bdf)",
          "compensatingControls" : "Have a manager review the transaction decisions for their \"out of compliance\" employee",
          "id" : "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
          "state" : "ENFORCED",
          "externalPolicyReference" : "XYZ policy"
        }`) // SodPolicy | 

          
          var sodPolicy v2025.SodPolicy
          if err := json.Unmarshal(sodpolicy, &sodPolicy); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SODPoliciesAPI.CreateSodPolicy(context.Background()).SodPolicy(sodPolicy).Execute()
          //resp, r, err := apiClient.V2025.SODPoliciesAPI.CreateSodPolicy(context.Background()).SodPolicy(sodPolicy).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SODPoliciesAPI.CreateSodPolicy``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateSodPolicy`: SodPolicy
          fmt.Fprintf(os.Stdout, "Response from `SODPoliciesAPI.CreateSodPolicy`: %v\n", resp)
        }
- path: /sod-policies/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sod-policies#delete-sod-policy
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f943-47e9-4562-b5bb-8424a56397d8` // string | The ID of the SOD Policy to delete. # string | The ID of the SOD Policy to delete.
          logical := true // bool | Indicates whether this is a soft delete (logical true) or a hard delete.  Soft delete marks the policy as deleted and just save it with this status. It could be fully deleted or recovered further.  Hard delete vise versa permanently delete SOD request during this call. (optional) (default to true) # bool | Indicates whether this is a soft delete (logical true) or a hard delete.  Soft delete marks the policy as deleted and just save it with this status. It could be fully deleted or recovered further.  Hard delete vise versa permanently delete SOD request during this call. (optional) (default to true)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.SODPoliciesAPI.DeleteSodPolicy(context.Background(), id).Execute()
          //r, err := apiClient.V2025.SODPoliciesAPI.DeleteSodPolicy(context.Background(), id).Logical(logical).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SODPoliciesAPI.DeleteSodPolicy``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /sod-policies/{id}/schedule
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sod-policies#delete-sod-policy-schedule
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f943-47e9-4562-b5bb-8424a56397d8` // string | The ID of the SOD policy the schedule must be deleted for. # string | The ID of the SOD policy the schedule must be deleted for.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.SODPoliciesAPI.DeleteSodPolicySchedule(context.Background(), id).Execute()
          //r, err := apiClient.V2025.SODPoliciesAPI.DeleteSodPolicySchedule(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SODPoliciesAPI.DeleteSodPolicySchedule``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /sod-violation-report/{reportResultId}/download/{fileName}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sod-policies#get-custom-violation-report
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          reportResultId := `ef38f94347e94562b5bb8424a56397d8` // string | The ID of the report reference to download. # string | The ID of the report reference to download.
          fileName := `custom-name` // string | Custom Name for the  file. # string | Custom Name for the  file.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SODPoliciesAPI.GetCustomViolationReport(context.Background(), reportResultId, fileName).Execute()
          //resp, r, err := apiClient.V2025.SODPoliciesAPI.GetCustomViolationReport(context.Background(), reportResultId, fileName).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SODPoliciesAPI.GetCustomViolationReport``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetCustomViolationReport`: *os.File
          fmt.Fprintf(os.Stdout, "Response from `SODPoliciesAPI.GetCustomViolationReport`: %v\n", resp)
        }
- path: /sod-violation-report/{reportResultId}/download
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sod-policies#get-default-violation-report
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          reportResultId := `ef38f94347e94562b5bb8424a56397d8` // string | The ID of the report reference to download. # string | The ID of the report reference to download.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SODPoliciesAPI.GetDefaultViolationReport(context.Background(), reportResultId).Execute()
          //resp, r, err := apiClient.V2025.SODPoliciesAPI.GetDefaultViolationReport(context.Background(), reportResultId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SODPoliciesAPI.GetDefaultViolationReport``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetDefaultViolationReport`: *os.File
          fmt.Fprintf(os.Stdout, "Response from `SODPoliciesAPI.GetDefaultViolationReport`: %v\n", resp)
        }
- path: /sod-violation-report
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sod-policies#get-sod-all-report-run-status
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SODPoliciesAPI.GetSodAllReportRunStatus(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.SODPoliciesAPI.GetSodAllReportRunStatus(context.Background()).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SODPoliciesAPI.GetSodAllReportRunStatus``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetSodAllReportRunStatus`: ReportResultReference
          fmt.Fprintf(os.Stdout, "Response from `SODPoliciesAPI.GetSodAllReportRunStatus`: %v\n", resp)
        }
- path: /sod-policies/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sod-policies#get-sod-policy
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f943-47e9-4562-b5bb-8424a56397d8` // string | The ID of the SOD Policy to retrieve. # string | The ID of the SOD Policy to retrieve.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SODPoliciesAPI.GetSodPolicy(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.SODPoliciesAPI.GetSodPolicy(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SODPoliciesAPI.GetSodPolicy``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetSodPolicy`: SodPolicy
          fmt.Fprintf(os.Stdout, "Response from `SODPoliciesAPI.GetSodPolicy`: %v\n", resp)
        }
- path: /sod-policies/{id}/schedule
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sod-policies#get-sod-policy-schedule
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f943-47e9-4562-b5bb-8424a56397d8` // string | The ID of the SOD policy schedule to retrieve. # string | The ID of the SOD policy schedule to retrieve.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SODPoliciesAPI.GetSodPolicySchedule(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.SODPoliciesAPI.GetSodPolicySchedule(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SODPoliciesAPI.GetSodPolicySchedule``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetSodPolicySchedule`: SodPolicySchedule
          fmt.Fprintf(os.Stdout, "Response from `SODPoliciesAPI.GetSodPolicySchedule`: %v\n", resp)
        }
- path: /sod-policies/sod-violation-report-status/{reportResultId}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sod-policies#get-sod-violation-report-run-status
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          reportResultId := `2e8d8180-24bc-4d21-91c6-7affdb473b0d` // string | The ID of the report reference to retrieve. # string | The ID of the report reference to retrieve.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SODPoliciesAPI.GetSodViolationReportRunStatus(context.Background(), reportResultId).Execute()
          //resp, r, err := apiClient.V2025.SODPoliciesAPI.GetSodViolationReportRunStatus(context.Background(), reportResultId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SODPoliciesAPI.GetSodViolationReportRunStatus``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetSodViolationReportRunStatus`: ReportResultReference
          fmt.Fprintf(os.Stdout, "Response from `SODPoliciesAPI.GetSodViolationReportRunStatus`: %v\n", resp)
        }
- path: /sod-policies/{id}/violation-report
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sod-policies#get-sod-violation-report-status
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f943-47e9-4562-b5bb-8424a56397d8` // string | The ID of the violation report to retrieve status for. # string | The ID of the violation report to retrieve status for.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SODPoliciesAPI.GetSodViolationReportStatus(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.SODPoliciesAPI.GetSodViolationReportStatus(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SODPoliciesAPI.GetSodViolationReportStatus``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetSodViolationReportStatus`: ReportResultReference
          fmt.Fprintf(os.Stdout, "Response from `SODPoliciesAPI.GetSodViolationReportStatus`: %v\n", resp)
        }
- path: /sod-policies
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sod-policies#list-sod-policies
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `id eq "bc693f07e7b645539626c25954c58554"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in*  **state**: *eq, in* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in*  **state**: *eq, in* (optional)
          sorters := `id,name` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, description** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, description** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SODPoliciesAPI.ListSodPolicies(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.SODPoliciesAPI.ListSodPolicies(context.Background()).Limit(limit).Offset(offset).Count(count).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SODPoliciesAPI.ListSodPolicies``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListSodPolicies`: []SodPolicy
          fmt.Fprintf(os.Stdout, "Response from `SODPoliciesAPI.ListSodPolicies`: %v\n", resp)
        }
- path: /sod-policies/{id}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sod-policies#patch-sod-policy
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c918083-5d19-1a86-015d-28455b4a2329` // string | The ID of the SOD policy being modified. # string | The ID of the SOD policy being modified.
          jsonpatchoperation := []byte(`[{op=replace, path=/description, value=Modified description}, {op=replace, path=/conflictingAccessCriteria/leftCriteria/name, value=money-in-modified}, {op=replace, path=/conflictingAccessCriteria/rightCriteria, value={name=money-out-modified, criteriaList=[{type=ENTITLEMENT, id=2c918087682f9a86016839c0509c1ab2}]}}]`) // []JsonPatchOperation | A list of SOD Policy update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * ownerRef * externalPolicyReference * compensatingControls * correctionAdvice * state * tags * violationOwnerAssignmentConfig * scheduled * conflictingAccessCriteria 

          
          var jsonPatchOperation []v2025.JsonPatchOperation
          if err := json.Unmarshal(jsonpatchoperation, &jsonPatchOperation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SODPoliciesAPI.PatchSodPolicy(context.Background(), id).JsonPatchOperation(jsonPatchOperation).Execute()
          //resp, r, err := apiClient.V2025.SODPoliciesAPI.PatchSodPolicy(context.Background(), id).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SODPoliciesAPI.PatchSodPolicy``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchSodPolicy`: SodPolicy
          fmt.Fprintf(os.Stdout, "Response from `SODPoliciesAPI.PatchSodPolicy`: %v\n", resp)
        }
- path: /sod-policies/{id}/schedule
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sod-policies#put-policy-schedule
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f943-47e9-4562-b5bb-8424a56397d8` // string | The ID of the SOD policy to update its schedule. # string | The ID of the SOD policy to update its schedule.
           sodpolicyschedule := []byte(`{
          "schedule" : {
            "hours" : {
              "accountMatchConfig" : {
                "matchExpression" : {
                  "and" : true,
                  "matchTerms" : [ {
                    "name" : "",
                    "value" : "",
                    "container" : true,
                    "and" : false,
                    "children" : [ {
                      "name" : "businessCategory",
                      "value" : "Service",
                      "op" : "eq",
                      "container" : false,
                      "and" : false
                    } ]
                  } ]
                }
              },
              "applicationId" : "2c91808874ff91550175097daaec161c\""
            },
            "months" : {
              "accountMatchConfig" : {
                "matchExpression" : {
                  "and" : true,
                  "matchTerms" : [ {
                    "name" : "",
                    "value" : "",
                    "container" : true,
                    "and" : false,
                    "children" : [ {
                      "name" : "businessCategory",
                      "value" : "Service",
                      "op" : "eq",
                      "container" : false,
                      "and" : false
                    } ]
                  } ]
                }
              },
              "applicationId" : "2c91808874ff91550175097daaec161c\""
            },
            "timeZoneId" : "America/Chicago",
            "days" : {
              "accountMatchConfig" : {
                "matchExpression" : {
                  "and" : true,
                  "matchTerms" : [ {
                    "name" : "",
                    "value" : "",
                    "container" : true,
                    "and" : false,
                    "children" : [ {
                      "name" : "businessCategory",
                      "value" : "Service",
                      "op" : "eq",
                      "container" : false,
                      "and" : false
                    } ]
                  } ]
                }
              },
              "applicationId" : "2c91808874ff91550175097daaec161c\""
            },
            "expiration" : "2018-06-25T20:22:28.104Z",
            "type" : "WEEKLY"
          },
          "created" : "2020-01-01T00:00:00Z",
          "recipients" : [ {
            "name" : "Michael Michaels",
            "id" : "2c7180a46faadee4016fb4e018c20642",
            "type" : "IDENTITY"
          }, {
            "name" : "Michael Michaels",
            "id" : "2c7180a46faadee4016fb4e018c20642",
            "type" : "IDENTITY"
          } ],
          "name" : "SCH-1584312283015",
          "creatorId" : "0f11f2a47c944bf3a2bd742580fe3bde",
          "modifierId" : "0f11f2a47c944bf3a2bd742580fe3bde",
          "modified" : "2020-01-01T00:00:00Z",
          "description" : "Schedule for policy xyz",
          "emailEmptyResults" : false
        }`) // SodPolicySchedule | 

          
          var sodPolicySchedule v2025.SodPolicySchedule
          if err := json.Unmarshal(sodpolicyschedule, &sodPolicySchedule); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SODPoliciesAPI.PutPolicySchedule(context.Background(), id).SodPolicySchedule(sodPolicySchedule).Execute()
          //resp, r, err := apiClient.V2025.SODPoliciesAPI.PutPolicySchedule(context.Background(), id).SodPolicySchedule(sodPolicySchedule).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SODPoliciesAPI.PutPolicySchedule``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PutPolicySchedule`: SodPolicySchedule
          fmt.Fprintf(os.Stdout, "Response from `SODPoliciesAPI.PutPolicySchedule`: %v\n", resp)
        }
- path: /sod-policies/{id}
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sod-policies#put-sod-policy
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f943-47e9-4562-b5bb-8424a56397d8` // string | The ID of the SOD policy to update. # string | The ID of the SOD policy to update.
           sodpolicy := []byte(`{
          "conflictingAccessCriteria" : {
            "leftCriteria" : {
              "name" : "money-in",
              "criteriaList" : [ {
                "type" : "ENTITLEMENT",
                "id" : "2c9180866166b5b0016167c32ef31a66",
                "name" : "Administrator"
              }, {
                "type" : "ENTITLEMENT",
                "id" : "2c9180866166b5b0016167c32ef31a67",
                "name" : "Administrator"
              } ]
            },
            "rightCriteria" : {
              "name" : "money-in",
              "criteriaList" : [ {
                "type" : "ENTITLEMENT",
                "id" : "2c9180866166b5b0016167c32ef31a66",
                "name" : "Administrator"
              }, {
                "type" : "ENTITLEMENT",
                "id" : "2c9180866166b5b0016167c32ef31a67",
                "name" : "Administrator"
              } ]
            }
          },
          "ownerRef" : {
            "name" : "Support",
            "id" : "2c9180a46faadee4016fb4e018c20639",
            "type" : "IDENTITY"
          },
          "created" : "2020-01-01T00:00:00Z",
          "scheduled" : true,
          "creatorId" : "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
          "modifierId" : "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
          "description" : "This policy ensures compliance of xyz",
          "violationOwnerAssignmentConfig" : {
            "assignmentRule" : "MANAGER",
            "ownerRef" : {
              "name" : "Support",
              "id" : "2c9180a46faadee4016fb4e018c20639",
              "type" : "IDENTITY"
            }
          },
          "correctionAdvice" : "Based on the role of the employee, managers should remove access that is not required for their job function.",
          "type" : "GENERAL",
          "tags" : [ "TAG1", "TAG2" ],
          "name" : "policy-xyz",
          "modified" : "2020-01-01T00:00:00Z",
          "policyQuery" : "@access(id:0f11f2a4-7c94-4bf3-a2bd-742580fe3bdg) AND @access(id:0f11f2a4-7c94-4bf3-a2bd-742580fe3bdf)",
          "compensatingControls" : "Have a manager review the transaction decisions for their \"out of compliance\" employee",
          "id" : "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
          "state" : "ENFORCED",
          "externalPolicyReference" : "XYZ policy"
        }`) // SodPolicy | 

          
          var sodPolicy v2025.SodPolicy
          if err := json.Unmarshal(sodpolicy, &sodPolicy); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SODPoliciesAPI.PutSodPolicy(context.Background(), id).SodPolicy(sodPolicy).Execute()
          //resp, r, err := apiClient.V2025.SODPoliciesAPI.PutSodPolicy(context.Background(), id).SodPolicy(sodPolicy).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SODPoliciesAPI.PutSodPolicy``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PutSodPolicy`: SodPolicy
          fmt.Fprintf(os.Stdout, "Response from `SODPoliciesAPI.PutSodPolicy`: %v\n", resp)
        }
- path: /sod-policies/{id}/evaluate
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sod-policies#start-evaluate-sod-policy
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f943-47e9-4562-b5bb-8424a56397d8` // string | The SOD policy ID to run. # string | The SOD policy ID to run.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SODPoliciesAPI.StartEvaluateSodPolicy(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.SODPoliciesAPI.StartEvaluateSodPolicy(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SODPoliciesAPI.StartEvaluateSodPolicy``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `StartEvaluateSodPolicy`: ReportResultReference
          fmt.Fprintf(os.Stdout, "Response from `SODPoliciesAPI.StartEvaluateSodPolicy`: %v\n", resp)
        }
- path: /sod-violation-report/run
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sod-policies#start-sod-all-policies-for-org
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           multipolicyrequest := []byte(`{
          "filteredPolicyList" : [ "[b868cd40-ffa4-4337-9c07-1a51846cfa94, 63a07a7b-39a4-48aa-956d-50c827deba2a]", "[b868cd40-ffa4-4337-9c07-1a51846cfa94, 63a07a7b-39a4-48aa-956d-50c827deba2a]" ]
        }`) // MultiPolicyRequest |  (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SODPoliciesAPI.StartSodAllPoliciesForOrg(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.SODPoliciesAPI.StartSodAllPoliciesForOrg(context.Background()).MultiPolicyRequest(multiPolicyRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SODPoliciesAPI.StartSodAllPoliciesForOrg``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `StartSodAllPoliciesForOrg`: ReportResultReference
          fmt.Fprintf(os.Stdout, "Response from `SODPoliciesAPI.StartSodAllPoliciesForOrg`: %v\n", resp)
        }
- path: /sod-policies/{id}/violation-report/run
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sod-policies#start-sod-policy
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f943-47e9-4562-b5bb-8424a56397d8` // string | The SOD policy ID to run. # string | The SOD policy ID to run.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SODPoliciesAPI.StartSodPolicy(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.SODPoliciesAPI.StartSodPolicy(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SODPoliciesAPI.StartSodPolicy``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `StartSodPolicy`: ReportResultReference
          fmt.Fprintf(os.Stdout, "Response from `SODPoliciesAPI.StartSodPolicy`: %v\n", resp)
        }
- path: /sod-violations/predict
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sod-violations#start-predict-sod-violations
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           identitywithnewaccess := []byte(`{
          "identityId" : "2c91808568c529c60168cca6f90c1313",
          "accessRefs" : [ {
            "type" : "ENTITLEMENT",
            "id" : "2c918087682f9a86016839c050861ab1",
            "name" : "CN=Information Access,OU=test,OU=test-service,DC=TestAD,DC=local"
          }, {
            "type" : "ENTITLEMENT",
            "id" : "2c918087682f9a86016839c0509c1ab2",
            "name" : "CN=Information Technology,OU=test,OU=test-service,DC=TestAD,DC=local"
          } ]
        }`) // IdentityWithNewAccess | 

          
          var identityWithNewAccess v2025.IdentityWithNewAccess
          if err := json.Unmarshal(identitywithnewaccess, &identityWithNewAccess); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SODViolationsAPI.StartPredictSodViolations(context.Background()).IdentityWithNewAccess(identityWithNewAccess).Execute()
          //resp, r, err := apiClient.V2025.SODViolationsAPI.StartPredictSodViolations(context.Background()).IdentityWithNewAccess(identityWithNewAccess).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SODViolationsAPI.StartPredictSodViolations``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `StartPredictSodViolations`: ViolationPrediction
          fmt.Fprintf(os.Stdout, "Response from `SODViolationsAPI.StartPredictSodViolations`: %v\n", resp)
        }
- path: /sod-violations/check
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sod-violations#start-violation-check
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           identitywithnewaccess1 := []byte(`{identityId=2c91808568c529c60168cca6f90c1313, accessRefs=[{type=ENTITLEMENT, id=2c918087682f9a86016839c050861ab1, name=CN=Information Access,OU=test,OU=test-service,DC=TestAD,DC=local}, {type=ENTITLEMENT, id=2c918087682f9a86016839c0509c1ab2, name=CN=Information Technology,OU=test,OU=test-service,DC=TestAD,DC=local}], clientMetadata={additionalProp1=string, additionalProp2=string, additionalProp3=string}}`) // IdentityWithNewAccess1 | 

          
          var identityWithNewAccess1 v2025.IdentityWithNewAccess1
          if err := json.Unmarshal(identitywithnewaccess1, &identityWithNewAccess1); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SODViolationsAPI.StartViolationCheck(context.Background()).IdentityWithNewAccess1(identityWithNewAccess1).Execute()
          //resp, r, err := apiClient.V2025.SODViolationsAPI.StartViolationCheck(context.Background()).IdentityWithNewAccess1(identityWithNewAccess1).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SODViolationsAPI.StartViolationCheck``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `StartViolationCheck`: SodViolationCheck
          fmt.Fprintf(os.Stdout, "Response from `SODViolationsAPI.StartViolationCheck`: %v\n", resp)
        }
- path: /sp-config/export
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sp-config#export-sp-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           exportpayload := []byte(`{
          "description" : "Export Job 1 Test"
        }`) // ExportPayload | Export options control what will be included in the export.

          
          var exportPayload v2025.ExportPayload
          if err := json.Unmarshal(exportpayload, &exportPayload); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SPConfigAPI.ExportSpConfig(context.Background()).ExportPayload(exportPayload).Execute()
          //resp, r, err := apiClient.V2025.SPConfigAPI.ExportSpConfig(context.Background()).ExportPayload(exportPayload).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SPConfigAPI.ExportSpConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ExportSpConfig`: SpConfigExportJob
          fmt.Fprintf(os.Stdout, "Response from `SPConfigAPI.ExportSpConfig`: %v\n", resp)
        }
- path: /sp-config/export/{id}/download
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sp-config#get-sp-config-export
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The ID of the export job whose results will be downloaded. # string | The ID of the export job whose results will be downloaded.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SPConfigAPI.GetSpConfigExport(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.SPConfigAPI.GetSpConfigExport(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SPConfigAPI.GetSpConfigExport``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetSpConfigExport`: SpConfigExportResults
          fmt.Fprintf(os.Stdout, "Response from `SPConfigAPI.GetSpConfigExport`: %v\n", resp)
        }
- path: /sp-config/export/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sp-config#get-sp-config-export-status
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The ID of the export job whose status will be returned. # string | The ID of the export job whose status will be returned.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SPConfigAPI.GetSpConfigExportStatus(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.SPConfigAPI.GetSpConfigExportStatus(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SPConfigAPI.GetSpConfigExportStatus``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetSpConfigExportStatus`: SpConfigExportJobStatus
          fmt.Fprintf(os.Stdout, "Response from `SPConfigAPI.GetSpConfigExportStatus`: %v\n", resp)
        }
- path: /sp-config/import/{id}/download
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sp-config#get-sp-config-import
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The ID of the import job whose results will be downloaded. # string | The ID of the import job whose results will be downloaded.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SPConfigAPI.GetSpConfigImport(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.SPConfigAPI.GetSpConfigImport(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SPConfigAPI.GetSpConfigImport``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetSpConfigImport`: SpConfigImportResults
          fmt.Fprintf(os.Stdout, "Response from `SPConfigAPI.GetSpConfigImport`: %v\n", resp)
        }
- path: /sp-config/import/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sp-config#get-sp-config-import-status
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The ID of the import job whose status will be returned. # string | The ID of the import job whose status will be returned.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SPConfigAPI.GetSpConfigImportStatus(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.SPConfigAPI.GetSpConfigImportStatus(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SPConfigAPI.GetSpConfigImportStatus``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetSpConfigImportStatus`: SpConfigImportJobStatus
          fmt.Fprintf(os.Stdout, "Response from `SPConfigAPI.GetSpConfigImportStatus`: %v\n", resp)
        }
- path: /sp-config/import
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sp-config#import-sp-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          data := BINARY_DATA_HERE // *os.File | JSON file containing the objects to be imported. # *os.File | JSON file containing the objects to be imported.
          preview := true // bool | This option is intended to give the user information about how an import operation would proceed, without having any effect on the target tenant. If this parameter is \"true\", no objects will be imported. Instead, the import process will pre-process the import file and attempt to resolve references within imported objects. The import result file will contain messages pertaining to how specific references were resolved, any errors associated with the preprocessing, and messages indicating which objects would be imported.  (optional) (default to false) # bool | This option is intended to give the user information about how an import operation would proceed, without having any effect on the target tenant. If this parameter is \"true\", no objects will be imported. Instead, the import process will pre-process the import file and attempt to resolve references within imported objects. The import result file will contain messages pertaining to how specific references were resolved, any errors associated with the preprocessing, and messages indicating which objects would be imported.  (optional) (default to false)
           options := []byte(``) // ImportOptions |  (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SPConfigAPI.ImportSpConfig(context.Background()).Data(data).Execute()
          //resp, r, err := apiClient.V2025.SPConfigAPI.ImportSpConfig(context.Background()).Data(data).Preview(preview).Options(options).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SPConfigAPI.ImportSpConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ImportSpConfig`: SpConfigJob
          fmt.Fprintf(os.Stdout, "Response from `SPConfigAPI.ImportSpConfig`: %v\n", resp)
        }
- path: /sp-config/config-objects
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sp-config#list-sp-config-objects
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SPConfigAPI.ListSpConfigObjects(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.SPConfigAPI.ListSpConfigObjects(context.Background()).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SPConfigAPI.ListSpConfigObjects``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListSpConfigObjects`: []SpConfigObject
          fmt.Fprintf(os.Stdout, "Response from `SPConfigAPI.ListSpConfigObjects`: %v\n", resp)
        }
- path: /saved-searches
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/saved-search#create-saved-search
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           createsavedsearchrequest := []byte(``) // CreateSavedSearchRequest | The saved search to persist.

          
          var createSavedSearchRequest v2025.CreateSavedSearchRequest
          if err := json.Unmarshal(createsavedsearchrequest, &createSavedSearchRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SavedSearchAPI.CreateSavedSearch(context.Background()).CreateSavedSearchRequest(createSavedSearchRequest).Execute()
          //resp, r, err := apiClient.V2025.SavedSearchAPI.CreateSavedSearch(context.Background()).CreateSavedSearchRequest(createSavedSearchRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SavedSearchAPI.CreateSavedSearch``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateSavedSearch`: SavedSearch
          fmt.Fprintf(os.Stdout, "Response from `SavedSearchAPI.CreateSavedSearch`: %v\n", resp)
        }
- path: /saved-searches/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/saved-search#delete-saved-search
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808568c529c60168cca6f90c1313` // string | ID of the requested document. # string | ID of the requested document.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.SavedSearchAPI.DeleteSavedSearch(context.Background(), id).Execute()
          //r, err := apiClient.V2025.SavedSearchAPI.DeleteSavedSearch(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SavedSearchAPI.DeleteSavedSearch``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /saved-searches/{id}/execute
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/saved-search#execute-saved-search
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808568c529c60168cca6f90c1313` // string | ID of the requested document. # string | ID of the requested document.
           searcharguments := []byte(`{
          "owner" : "",
          "recipients" : [ {
            "id" : "2c91808568c529c60168cca6f90c1313",
            "type" : "IDENTITY"
          }, {
            "id" : "2c91808568c529c60168cca6f90c1313",
            "type" : "IDENTITY"
          } ],
          "scheduleId" : "7a724640-0c17-4ce9-a8c3-4a89738459c8"
        }`) // SearchArguments | When saved search execution is triggered by a scheduled search, *scheduleId* will specify the ID of the triggering scheduled search.  If *scheduleId* is not specified (when execution is triggered by a UI test), the *owner* and *recipients* arguments must be provided. 

          
          var searchArguments v2025.SearchArguments
          if err := json.Unmarshal(searcharguments, &searchArguments); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.SavedSearchAPI.ExecuteSavedSearch(context.Background(), id).SearchArguments(searchArguments).Execute()
          //r, err := apiClient.V2025.SavedSearchAPI.ExecuteSavedSearch(context.Background(), id).SearchArguments(searchArguments).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SavedSearchAPI.ExecuteSavedSearch``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /saved-searches/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/saved-search#get-saved-search
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808568c529c60168cca6f90c1313` // string | ID of the requested document. # string | ID of the requested document.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SavedSearchAPI.GetSavedSearch(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.SavedSearchAPI.GetSavedSearch(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SavedSearchAPI.GetSavedSearch``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetSavedSearch`: SavedSearch
          fmt.Fprintf(os.Stdout, "Response from `SavedSearchAPI.GetSavedSearch`: %v\n", resp)
        }
- path: /saved-searches
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/saved-search#list-saved-searches
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `owner.id eq "7a724640-0c17-4ce9-a8c3-4a89738459c8"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **owner.id**: *eq* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **owner.id**: *eq* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SavedSearchAPI.ListSavedSearches(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.SavedSearchAPI.ListSavedSearches(context.Background()).Offset(offset).Limit(limit).Count(count).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SavedSearchAPI.ListSavedSearches``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListSavedSearches`: []SavedSearch
          fmt.Fprintf(os.Stdout, "Response from `SavedSearchAPI.ListSavedSearches`: %v\n", resp)
        }
- path: /saved-searches/{id}
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/saved-search#put-saved-search
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808568c529c60168cca6f90c1313` // string | ID of the requested document. # string | ID of the requested document.
           savedsearch := []byte(`{
          "owner" : {
            "id" : "2c91808568c529c60168cca6f90c1313",
            "type" : "IDENTITY"
          },
          "created" : "2018-06-25T20:22:28.104Z",
          "columns" : {
            "identity" : [ {
              "field" : "displayName",
              "header" : "Display Name"
            }, {
              "field" : "e-mail",
              "header" : "Work Email"
            } ]
          },
          "query" : "@accounts(disabled:true)",
          "description" : "Disabled accounts",
          "orderBy" : {
            "identity" : [ "lastName", "firstName" ],
            "role" : [ "name" ]
          },
          "sort" : [ "displayName" ],
          "filters" : {
            "terms" : [ "account_count", "account_count" ],
            "range" : {
              "lower" : {
                "inclusive" : false,
                "value" : "1"
              },
              "upper" : {
                "inclusive" : false,
                "value" : "1"
              }
            },
            "exclude" : false,
            "type" : "RANGE"
          },
          "ownerId" : "2c91808568c529c60168cca6f90c1313",
          "indices" : [ "identities" ],
          "public" : false,
          "name" : "Disabled accounts",
          "modified" : "2018-06-25T20:22:28.104Z",
          "id" : "0de46054-fe90-434a-b84e-c6b3359d0c64",
          "fields" : [ "disabled" ]
        }`) // SavedSearch | The saved search to persist.

          
          var savedSearch v2025.SavedSearch
          if err := json.Unmarshal(savedsearch, &savedSearch); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SavedSearchAPI.PutSavedSearch(context.Background(), id).SavedSearch(savedSearch).Execute()
          //resp, r, err := apiClient.V2025.SavedSearchAPI.PutSavedSearch(context.Background(), id).SavedSearch(savedSearch).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SavedSearchAPI.PutSavedSearch``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PutSavedSearch`: SavedSearch
          fmt.Fprintf(os.Stdout, "Response from `SavedSearchAPI.PutSavedSearch`: %v\n", resp)
        }
- path: /scheduled-searches
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/scheduled-search#create-scheduled-search
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           createscheduledsearchrequest := []byte(`{savedSearchId=9c620e13-cd33-4804-a13d-403bd7bcdbad, schedule={type=DAILY, hours={type=LIST, values=[9]}}, recipients=[{type=IDENTITY, id=2c9180867624cbd7017642d8c8c81f67}]}`) // CreateScheduledSearchRequest | The scheduled search to persist.

          
          var createScheduledSearchRequest v2025.CreateScheduledSearchRequest
          if err := json.Unmarshal(createscheduledsearchrequest, &createScheduledSearchRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ScheduledSearchAPI.CreateScheduledSearch(context.Background()).CreateScheduledSearchRequest(createScheduledSearchRequest).Execute()
          //resp, r, err := apiClient.V2025.ScheduledSearchAPI.CreateScheduledSearch(context.Background()).CreateScheduledSearchRequest(createScheduledSearchRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ScheduledSearchAPI.CreateScheduledSearch``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateScheduledSearch`: ScheduledSearch
          fmt.Fprintf(os.Stdout, "Response from `ScheduledSearchAPI.CreateScheduledSearch`: %v\n", resp)
        }
- path: /scheduled-searches/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/scheduled-search#delete-scheduled-search
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808568c529c60168cca6f90c1313` // string | ID of the requested document. # string | ID of the requested document.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.ScheduledSearchAPI.DeleteScheduledSearch(context.Background(), id).Execute()
          //r, err := apiClient.V2025.ScheduledSearchAPI.DeleteScheduledSearch(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ScheduledSearchAPI.DeleteScheduledSearch``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /scheduled-searches/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/scheduled-search#get-scheduled-search
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808568c529c60168cca6f90c1313` // string | ID of the requested document. # string | ID of the requested document.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ScheduledSearchAPI.GetScheduledSearch(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.ScheduledSearchAPI.GetScheduledSearch(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ScheduledSearchAPI.GetScheduledSearch``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetScheduledSearch`: ScheduledSearch
          fmt.Fprintf(os.Stdout, "Response from `ScheduledSearchAPI.GetScheduledSearch`: %v\n", resp)
        }
- path: /scheduled-searches
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/scheduled-search#list-scheduled-search
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `savedSearchId eq "6cc0945d-9eeb-4948-9033-72d066e1153e"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **owner.id**: *eq*  **savedSearchId**: *eq* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **owner.id**: *eq*  **savedSearchId**: *eq* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ScheduledSearchAPI.ListScheduledSearch(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.ScheduledSearchAPI.ListScheduledSearch(context.Background()).Offset(offset).Limit(limit).Count(count).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ScheduledSearchAPI.ListScheduledSearch``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListScheduledSearch`: []ScheduledSearch
          fmt.Fprintf(os.Stdout, "Response from `ScheduledSearchAPI.ListScheduledSearch`: %v\n", resp)
        }
- path: /scheduled-searches/{id}/unsubscribe
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/scheduled-search#unsubscribe-scheduled-search
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808568c529c60168cca6f90c1313` // string | ID of the requested document. # string | ID of the requested document.
           typedreference := []byte(`{
          "id" : "2c91808568c529c60168cca6f90c1313",
          "type" : "IDENTITY"
        }`) // TypedReference | The recipient to be removed from the scheduled search. 

          
          var typedReference v2025.TypedReference
          if err := json.Unmarshal(typedreference, &typedReference); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.ScheduledSearchAPI.UnsubscribeScheduledSearch(context.Background(), id).TypedReference(typedReference).Execute()
          //r, err := apiClient.V2025.ScheduledSearchAPI.UnsubscribeScheduledSearch(context.Background(), id).TypedReference(typedReference).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ScheduledSearchAPI.UnsubscribeScheduledSearch``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /scheduled-searches/{id}
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/scheduled-search#update-scheduled-search
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c91808568c529c60168cca6f90c1313` // string | ID of the requested document. # string | ID of the requested document.
           scheduledsearch := []byte(`{
          "owner" : {
            "id" : "2c9180867624cbd7017642d8c8c81f67",
            "type" : "IDENTITY"
          },
          "displayQueryDetails" : false,
          "created" : "",
          "description" : "Daily disabled accounts",
          "ownerId" : "2c9180867624cbd7017642d8c8c81f67",
          "enabled" : false,
          "schedule" : {
            "hours" : {
              "accountMatchConfig" : {
                "matchExpression" : {
                  "and" : true,
                  "matchTerms" : [ {
                    "name" : "",
                    "value" : "",
                    "container" : true,
                    "and" : false,
                    "children" : [ {
                      "name" : "businessCategory",
                      "value" : "Service",
                      "op" : "eq",
                      "container" : false,
                      "and" : false
                    } ]
                  } ]
                }
              },
              "applicationId" : "2c91808874ff91550175097daaec161c\""
            },
            "months" : {
              "accountMatchConfig" : {
                "matchExpression" : {
                  "and" : true,
                  "matchTerms" : [ {
                    "name" : "",
                    "value" : "",
                    "container" : true,
                    "and" : false,
                    "children" : [ {
                      "name" : "businessCategory",
                      "value" : "Service",
                      "op" : "eq",
                      "container" : false,
                      "and" : false
                    } ]
                  } ]
                }
              },
              "applicationId" : "2c91808874ff91550175097daaec161c\""
            },
            "timeZoneId" : "America/Chicago",
            "days" : {
              "accountMatchConfig" : {
                "matchExpression" : {
                  "and" : true,
                  "matchTerms" : [ {
                    "name" : "",
                    "value" : "",
                    "container" : true,
                    "and" : false,
                    "children" : [ {
                      "name" : "businessCategory",
                      "value" : "Service",
                      "op" : "eq",
                      "container" : false,
                      "and" : false
                    } ]
                  } ]
                }
              },
              "applicationId" : "2c91808874ff91550175097daaec161c\""
            },
            "expiration" : "2018-06-25T20:22:28.104Z",
            "type" : "WEEKLY"
          },
          "recipients" : [ {
            "id" : "2c9180867624cbd7017642d8c8c81f67",
            "type" : "IDENTITY"
          }, {
            "id" : "2c9180867624cbd7017642d8c8c81f67",
            "type" : "IDENTITY"
          } ],
          "savedSearchId" : "554f1511-f0a1-4744-ab14-599514d3e57c",
          "name" : "Daily disabled accounts",
          "modified" : "",
          "id" : "0de46054-fe90-434a-b84e-c6b3359d0c64",
          "emailEmptyResults" : false
        }`) // ScheduledSearch | The scheduled search to persist.

          
          var scheduledSearch v2025.ScheduledSearch
          if err := json.Unmarshal(scheduledsearch, &scheduledSearch); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ScheduledSearchAPI.UpdateScheduledSearch(context.Background(), id).ScheduledSearch(scheduledSearch).Execute()
          //resp, r, err := apiClient.V2025.ScheduledSearchAPI.UpdateScheduledSearch(context.Background(), id).ScheduledSearch(scheduledSearch).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ScheduledSearchAPI.UpdateScheduledSearch``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateScheduledSearch`: ScheduledSearch
          fmt.Fprintf(os.Stdout, "Response from `ScheduledSearchAPI.UpdateScheduledSearch`: %v\n", resp)
        }
- path: /search/aggregate
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/search#search-aggregate
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           search := []byte(`{
          "queryDsl" : {
            "match" : {
              "name" : "john.doe"
            }
          },
          "aggregationType" : "DSL",
          "aggregationsVersion" : "",
          "query" : {
            "query" : "name:a*",
            "timeZone" : "America/Chicago",
            "fields" : "[firstName,lastName,email]",
            "innerHit" : {
              "query" : "source.name:\\\"Active Directory\\\"",
              "type" : "access"
            }
          },
          "aggregationsDsl" : { },
          "sort" : [ "displayName", "+id" ],
          "filters" : { },
          "queryVersion" : "",
          "queryType" : "SAILPOINT",
          "includeNested" : true,
          "queryResultFilter" : {
            "excludes" : [ "stacktrace" ],
            "includes" : [ "name", "displayName" ]
          },
          "indices" : [ "identities" ],
          "typeAheadQuery" : {
            "field" : "source.name",
            "size" : 100,
            "query" : "Work",
            "sortByValue" : true,
            "nestedType" : "access",
            "sort" : "asc",
            "maxExpansions" : 10
          },
          "textQuery" : {
            "contains" : true,
            "terms" : [ "The quick brown fox", "3141592", "7" ],
            "matchAny" : false,
            "fields" : [ "displayName", "employeeNumber", "roleCount" ]
          },
          "searchAfter" : [ "John Doe", "2c91808375d8e80a0175e1f88a575221" ],
          "aggregations" : {
            "filter" : {
              "field" : "access.type",
              "name" : "Entitlements",
              "type" : "TERM",
              "value" : "ENTITLEMENT"
            },
            "bucket" : {
              "field" : "attributes.city",
              "size" : 100,
              "minDocCount" : 2,
              "name" : "Identity Locations",
              "type" : "TERMS"
            },
            "metric" : {
              "field" : "@access.name",
              "name" : "Access Name Count",
              "type" : "COUNT"
            },
            "subAggregation" : {
              "filter" : {
                "field" : "access.type",
                "name" : "Entitlements",
                "type" : "TERM",
                "value" : "ENTITLEMENT"
              },
              "bucket" : {
                "field" : "attributes.city",
                "size" : 100,
                "minDocCount" : 2,
                "name" : "Identity Locations",
                "type" : "TERMS"
              },
              "metric" : {
                "field" : "@access.name",
                "name" : "Access Name Count",
                "type" : "COUNT"
              },
              "subAggregation" : {
                "filter" : {
                  "field" : "access.type",
                  "name" : "Entitlements",
                  "type" : "TERM",
                  "value" : "ENTITLEMENT"
                },
                "bucket" : {
                  "field" : "attributes.city",
                  "size" : 100,
                  "minDocCount" : 2,
                  "name" : "Identity Locations",
                  "type" : "TERMS"
                },
                "metric" : {
                  "field" : "@access.name",
                  "name" : "Access Name Count",
                  "type" : "COUNT"
                },
                "nested" : {
                  "name" : "id",
                  "type" : "access"
                }
              },
              "nested" : {
                "name" : "id",
                "type" : "access"
              }
            },
            "nested" : {
              "name" : "id",
              "type" : "access"
            }
          }
        }`) // Search | 
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)

          
          var search v2025.Search
          if err := json.Unmarshal(search, &search); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SearchAPI.SearchAggregate(context.Background()).Search(search).Execute()
          //resp, r, err := apiClient.V2025.SearchAPI.SearchAggregate(context.Background()).Search(search).Offset(offset).Limit(limit).Count(count).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SearchAPI.SearchAggregate``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SearchAggregate`: AggregationResult
          fmt.Fprintf(os.Stdout, "Response from `SearchAPI.SearchAggregate`: %v\n", resp)
        }
- path: /search/count
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/search#search-count
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           search := []byte(`{
          "queryDsl" : {
            "match" : {
              "name" : "john.doe"
            }
          },
          "aggregationType" : "DSL",
          "aggregationsVersion" : "",
          "query" : {
            "query" : "name:a*",
            "timeZone" : "America/Chicago",
            "fields" : "[firstName,lastName,email]",
            "innerHit" : {
              "query" : "source.name:\\\"Active Directory\\\"",
              "type" : "access"
            }
          },
          "aggregationsDsl" : { },
          "sort" : [ "displayName", "+id" ],
          "filters" : { },
          "queryVersion" : "",
          "queryType" : "SAILPOINT",
          "includeNested" : true,
          "queryResultFilter" : {
            "excludes" : [ "stacktrace" ],
            "includes" : [ "name", "displayName" ]
          },
          "indices" : [ "identities" ],
          "typeAheadQuery" : {
            "field" : "source.name",
            "size" : 100,
            "query" : "Work",
            "sortByValue" : true,
            "nestedType" : "access",
            "sort" : "asc",
            "maxExpansions" : 10
          },
          "textQuery" : {
            "contains" : true,
            "terms" : [ "The quick brown fox", "3141592", "7" ],
            "matchAny" : false,
            "fields" : [ "displayName", "employeeNumber", "roleCount" ]
          },
          "searchAfter" : [ "John Doe", "2c91808375d8e80a0175e1f88a575221" ],
          "aggregations" : {
            "filter" : {
              "field" : "access.type",
              "name" : "Entitlements",
              "type" : "TERM",
              "value" : "ENTITLEMENT"
            },
            "bucket" : {
              "field" : "attributes.city",
              "size" : 100,
              "minDocCount" : 2,
              "name" : "Identity Locations",
              "type" : "TERMS"
            },
            "metric" : {
              "field" : "@access.name",
              "name" : "Access Name Count",
              "type" : "COUNT"
            },
            "subAggregation" : {
              "filter" : {
                "field" : "access.type",
                "name" : "Entitlements",
                "type" : "TERM",
                "value" : "ENTITLEMENT"
              },
              "bucket" : {
                "field" : "attributes.city",
                "size" : 100,
                "minDocCount" : 2,
                "name" : "Identity Locations",
                "type" : "TERMS"
              },
              "metric" : {
                "field" : "@access.name",
                "name" : "Access Name Count",
                "type" : "COUNT"
              },
              "subAggregation" : {
                "filter" : {
                  "field" : "access.type",
                  "name" : "Entitlements",
                  "type" : "TERM",
                  "value" : "ENTITLEMENT"
                },
                "bucket" : {
                  "field" : "attributes.city",
                  "size" : 100,
                  "minDocCount" : 2,
                  "name" : "Identity Locations",
                  "type" : "TERMS"
                },
                "metric" : {
                  "field" : "@access.name",
                  "name" : "Access Name Count",
                  "type" : "COUNT"
                },
                "nested" : {
                  "name" : "id",
                  "type" : "access"
                }
              },
              "nested" : {
                "name" : "id",
                "type" : "access"
              }
            },
            "nested" : {
              "name" : "id",
              "type" : "access"
            }
          }
        }`) // Search | 

          
          var search v2025.Search
          if err := json.Unmarshal(search, &search); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.SearchAPI.SearchCount(context.Background()).Search(search).Execute()
          //r, err := apiClient.V2025.SearchAPI.SearchCount(context.Background()).Search(search).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SearchAPI.SearchCount``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /search/{index}/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/search#search-get
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          index := `identities` // string | The index from which to fetch the specified document.  The currently supported index names are: *accessprofiles*, *accountactivities*, *entitlements*, *events*, *identities*, and *roles*.  # string | The index from which to fetch the specified document.  The currently supported index names are: *accessprofiles*, *accountactivities*, *entitlements*, *events*, *identities*, and *roles*. 
          id := `2c91808568c529c60168cca6f90c1313` // string | ID of the requested document. # string | ID of the requested document.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SearchAPI.SearchGet(context.Background(), index, id).Execute()
          //resp, r, err := apiClient.V2025.SearchAPI.SearchGet(context.Background(), index, id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SearchAPI.SearchGet``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SearchGet`: map[string]interface{}
          fmt.Fprintf(os.Stdout, "Response from `SearchAPI.SearchGet`: %v\n", resp)
        }
- path: /search
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/search#search-post
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           search := []byte(`{
          "queryDsl" : {
            "match" : {
              "name" : "john.doe"
            }
          },
          "aggregationType" : "DSL",
          "aggregationsVersion" : "",
          "query" : {
            "query" : "name:a*",
            "timeZone" : "America/Chicago",
            "fields" : "[firstName,lastName,email]",
            "innerHit" : {
              "query" : "source.name:\\\"Active Directory\\\"",
              "type" : "access"
            }
          },
          "aggregationsDsl" : { },
          "sort" : [ "displayName", "+id" ],
          "filters" : { },
          "queryVersion" : "",
          "queryType" : "SAILPOINT",
          "includeNested" : true,
          "queryResultFilter" : {
            "excludes" : [ "stacktrace" ],
            "includes" : [ "name", "displayName" ]
          },
          "indices" : [ "identities" ],
          "typeAheadQuery" : {
            "field" : "source.name",
            "size" : 100,
            "query" : "Work",
            "sortByValue" : true,
            "nestedType" : "access",
            "sort" : "asc",
            "maxExpansions" : 10
          },
          "textQuery" : {
            "contains" : true,
            "terms" : [ "The quick brown fox", "3141592", "7" ],
            "matchAny" : false,
            "fields" : [ "displayName", "employeeNumber", "roleCount" ]
          },
          "searchAfter" : [ "John Doe", "2c91808375d8e80a0175e1f88a575221" ],
          "aggregations" : {
            "filter" : {
              "field" : "access.type",
              "name" : "Entitlements",
              "type" : "TERM",
              "value" : "ENTITLEMENT"
            },
            "bucket" : {
              "field" : "attributes.city",
              "size" : 100,
              "minDocCount" : 2,
              "name" : "Identity Locations",
              "type" : "TERMS"
            },
            "metric" : {
              "field" : "@access.name",
              "name" : "Access Name Count",
              "type" : "COUNT"
            },
            "subAggregation" : {
              "filter" : {
                "field" : "access.type",
                "name" : "Entitlements",
                "type" : "TERM",
                "value" : "ENTITLEMENT"
              },
              "bucket" : {
                "field" : "attributes.city",
                "size" : 100,
                "minDocCount" : 2,
                "name" : "Identity Locations",
                "type" : "TERMS"
              },
              "metric" : {
                "field" : "@access.name",
                "name" : "Access Name Count",
                "type" : "COUNT"
              },
              "subAggregation" : {
                "filter" : {
                  "field" : "access.type",
                  "name" : "Entitlements",
                  "type" : "TERM",
                  "value" : "ENTITLEMENT"
                },
                "bucket" : {
                  "field" : "attributes.city",
                  "size" : 100,
                  "minDocCount" : 2,
                  "name" : "Identity Locations",
                  "type" : "TERMS"
                },
                "metric" : {
                  "field" : "@access.name",
                  "name" : "Access Name Count",
                  "type" : "COUNT"
                },
                "nested" : {
                  "name" : "id",
                  "type" : "access"
                }
              },
              "nested" : {
                "name" : "id",
                "type" : "access"
              }
            },
            "nested" : {
              "name" : "id",
              "type" : "access"
            }
          }
        }`) // Search | 
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          limit := 10000 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)

          
          var search v2025.Search
          if err := json.Unmarshal(search, &search); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SearchAPI.SearchPost(context.Background()).Search(search).Execute()
          //resp, r, err := apiClient.V2025.SearchAPI.SearchPost(context.Background()).Search(search).Offset(offset).Limit(limit).Count(count).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SearchAPI.SearchPost``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SearchPost`: []map[string]interface{}
          fmt.Fprintf(os.Stdout, "Response from `SearchAPI.SearchPost`: %v\n", resp)
        }
- path: /accounts/search-attribute-config
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/search-attribute-configuration#create-search-attribute-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           searchattributeconfig := []byte(`{
          "displayName" : "New Mail Attribute",
          "name" : "newMailAttribute",
          "applicationAttributes" : {
            "2c91808b79fd2422017a0b35d30f3968" : "employeeNumber",
            "2c91808b79fd2422017a0b36008f396b" : "employeeNumber"
          }
        }`) // SearchAttributeConfig | 

          
          var searchAttributeConfig v2025.SearchAttributeConfig
          if err := json.Unmarshal(searchattributeconfig, &searchAttributeConfig); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SearchAttributeConfigurationAPI.CreateSearchAttributeConfig(context.Background()).XSailPointExperimental(xSailPointExperimental).SearchAttributeConfig(searchAttributeConfig).Execute()
          //resp, r, err := apiClient.V2025.SearchAttributeConfigurationAPI.CreateSearchAttributeConfig(context.Background()).XSailPointExperimental(xSailPointExperimental).SearchAttributeConfig(searchAttributeConfig).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SearchAttributeConfigurationAPI.CreateSearchAttributeConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateSearchAttributeConfig`: map[string]interface{}
          fmt.Fprintf(os.Stdout, "Response from `SearchAttributeConfigurationAPI.CreateSearchAttributeConfig`: %v\n", resp)
        }
- path: /accounts/search-attribute-config/{name}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/search-attribute-configuration#delete-search-attribute-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          name := `newMailAttribute` // string | Name of the extended search attribute configuration to delete. # string | Name of the extended search attribute configuration to delete.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.SearchAttributeConfigurationAPI.DeleteSearchAttributeConfig(context.Background(), name).XSailPointExperimental(xSailPointExperimental).Execute()
          //r, err := apiClient.V2025.SearchAttributeConfigurationAPI.DeleteSearchAttributeConfig(context.Background(), name).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SearchAttributeConfigurationAPI.DeleteSearchAttributeConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /accounts/search-attribute-config
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/search-attribute-configuration#get-search-attribute-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SearchAttributeConfigurationAPI.GetSearchAttributeConfig(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.SearchAttributeConfigurationAPI.GetSearchAttributeConfig(context.Background()).XSailPointExperimental(xSailPointExperimental).Limit(limit).Offset(offset).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SearchAttributeConfigurationAPI.GetSearchAttributeConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetSearchAttributeConfig`: []SearchAttributeConfig
          fmt.Fprintf(os.Stdout, "Response from `SearchAttributeConfigurationAPI.GetSearchAttributeConfig`: %v\n", resp)
        }
- path: /accounts/search-attribute-config/{name}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/search-attribute-configuration#get-single-search-attribute-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          name := `newMailAttribute` // string | Name of the extended search attribute configuration to get. # string | Name of the extended search attribute configuration to get.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SearchAttributeConfigurationAPI.GetSingleSearchAttributeConfig(context.Background(), name).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.SearchAttributeConfigurationAPI.GetSingleSearchAttributeConfig(context.Background(), name).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SearchAttributeConfigurationAPI.GetSingleSearchAttributeConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetSingleSearchAttributeConfig`: SearchAttributeConfig
          fmt.Fprintf(os.Stdout, "Response from `SearchAttributeConfigurationAPI.GetSingleSearchAttributeConfig`: %v\n", resp)
        }
- path: /accounts/search-attribute-config/{name}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/search-attribute-configuration#patch-search-attribute-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          name := `promotedMailAttribute` // string | Name of the search attribute configuration to patch. # string | Name of the search attribute configuration to patch.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          jsonpatchoperation := []byte(`[{op=replace, path=/name, value=newAttributeName}, {op=replace, path=/displayName, value=new attribute display name}, {op=add, path=/applicationAttributes, value={2c91808b79fd2422017a0b35d30f3968=employeeNumber}}]`) // []JsonPatchOperation | 

          
          var jsonPatchOperation []v2025.JsonPatchOperation
          if err := json.Unmarshal(jsonpatchoperation, &jsonPatchOperation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SearchAttributeConfigurationAPI.PatchSearchAttributeConfig(context.Background(), name).XSailPointExperimental(xSailPointExperimental).JsonPatchOperation(jsonPatchOperation).Execute()
          //resp, r, err := apiClient.V2025.SearchAttributeConfigurationAPI.PatchSearchAttributeConfig(context.Background(), name).XSailPointExperimental(xSailPointExperimental).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SearchAttributeConfigurationAPI.PatchSearchAttributeConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchSearchAttributeConfig`: SearchAttributeConfig
          fmt.Fprintf(os.Stdout, "Response from `SearchAttributeConfigurationAPI.PatchSearchAttributeConfig`: %v\n", resp)
        }
- path: /segments
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/segments#create-segment
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           segment := []byte(`{
          "owner" : {
            "name" : "support",
            "id" : "2c9180a46faadee4016fb4e018c20639",
            "type" : "IDENTITY"
          },
          "created" : "2020-01-01T00:00:00Z",
          "visibilityCriteria" : {
            "expression" : {
              "children" : [ ],
              "attribute" : "location",
              "value" : {
                "type" : "STRING",
                "value" : "Austin"
              },
              "operator" : "EQUALS"
            }
          },
          "name" : "segment-xyz",
          "modified" : "2020-01-01T00:00:00Z",
          "description" : "This segment represents xyz",
          "active" : true,
          "id" : "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
        }`) // Segment | 

          
          var segment v2025.Segment
          if err := json.Unmarshal(segment, &segment); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SegmentsAPI.CreateSegment(context.Background()).Segment(segment).Execute()
          //resp, r, err := apiClient.V2025.SegmentsAPI.CreateSegment(context.Background()).Segment(segment).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SegmentsAPI.CreateSegment``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateSegment`: Segment
          fmt.Fprintf(os.Stdout, "Response from `SegmentsAPI.CreateSegment`: %v\n", resp)
        }
- path: /segments/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/segments#delete-segment
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The segment ID to delete. # string | The segment ID to delete.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.SegmentsAPI.DeleteSegment(context.Background(), id).Execute()
          //r, err := apiClient.V2025.SegmentsAPI.DeleteSegment(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SegmentsAPI.DeleteSegment``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /segments/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/segments#get-segment
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The segment ID to retrieve. # string | The segment ID to retrieve.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SegmentsAPI.GetSegment(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.SegmentsAPI.GetSegment(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SegmentsAPI.GetSegment``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetSegment`: Segment
          fmt.Fprintf(os.Stdout, "Response from `SegmentsAPI.GetSegment`: %v\n", resp)
        }
- path: /segments
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/segments#list-segments
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SegmentsAPI.ListSegments(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.SegmentsAPI.ListSegments(context.Background()).Limit(limit).Offset(offset).Count(count).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SegmentsAPI.ListSegments``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListSegments`: []Segment
          fmt.Fprintf(os.Stdout, "Response from `SegmentsAPI.ListSegments`: %v\n", resp)
        }
- path: /segments/{id}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/segments#patch-segment
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The segment ID to modify. # string | The segment ID to modify.
          requestbody := []byte(`[{op=replace, path=/visibilityCriteria, value={expression={operator=AND, children=[{operator=EQUALS, attribute=location, value={type=STRING, value=Philadelphia}}, {operator=EQUALS, attribute=department, value={type=STRING, value=HR}}]}}}]`) // []map[string]interface{} | A list of segment update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * owner * visibilityCriteria * active 

          
          var requestBody []v2025.RequestBody
          if err := json.Unmarshal(requestbody, &requestBody); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SegmentsAPI.PatchSegment(context.Background(), id).RequestBody(requestBody).Execute()
          //resp, r, err := apiClient.V2025.SegmentsAPI.PatchSegment(context.Background(), id).RequestBody(requestBody).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SegmentsAPI.PatchSegment``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchSegment`: Segment
          fmt.Fprintf(os.Stdout, "Response from `SegmentsAPI.PatchSegment`: %v\n", resp)
        }
- path: /service-desk-integrations
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/service-desk-integration#create-service-desk-integration
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           servicedeskintegrationdto := []byte(`{
          "ownerRef" : "",
          "cluster" : "xyzzy999",
          "created" : "2024-01-17T18:45:25.994Z",
          "description" : "A very nice Service Desk integration",
          "clusterRef" : "",
          "type" : "ServiceNowSDIM",
          "managedSources" : [ "2c9180835d191a86015d28455b4a2329", "2c5680835d191a85765d28455b4a9823" ],
          "provisioningConfig" : {
            "managedResourceRefs" : [ {
              "type" : "SOURCE",
              "id" : "2c9180855d191c59015d291ceb051111",
              "name" : "My Source 1"
            }, {
              "type" : "SOURCE",
              "id" : "2c9180855d191c59015d291ceb052222",
              "name" : "My Source 2"
            } ],
            "provisioningRequestExpiration" : 7,
            "noProvisioningRequests" : true,
            "universalManager" : true,
            "planInitializerScript" : {
              "source" : "<?xml version='1.0' encoding='UTF-8'?>\\r\\n<!DOCTYPE Rule PUBLIC \\\"sailpoint.dtd\\\" \\\"sailpoint.dtd\\\">\\r\\n<Rule name=\\\"Example Rule\\\" type=\\\"BeforeProvisioning\\\">\\r\\n  <Description>Before Provisioning Rule which changes disables and enables to a modify.</Description>\\r\\n  <Source><![CDATA[\\r\\nimport sailpoint.object.*;\\r\\nimport sailpoint.object.ProvisioningPlan.AccountRequest;\\r\\nimport sailpoint.object.ProvisioningPlan.AccountRequest.Operation;\\r\\nimport sailpoint.object.ProvisioningPlan.AttributeRequest;\\r\\nimport sailpoint.object.ProvisioningPlan;\\r\\nimport sailpoint.object.ProvisioningPlan.Operation;\\r\\n\\r\\nfor ( AccountRequest accountRequest : plan.getAccountRequests() ) {\\r\\n  if ( accountRequest.getOp().equals( ProvisioningPlan.ObjectOperation.Disable ) ) {\\r\\n    accountRequest.setOp( ProvisioningPlan.ObjectOperation.Modify );\\r\\n  }\\r\\n  if ( accountRequest.getOp().equals( ProvisioningPlan.ObjectOperation.Enable ) ) {\\r\\n    accountRequest.setOp( ProvisioningPlan.ObjectOperation.Modify );\\r\\n  }\\r\\n}\\r\\n\\r\\n  ]]></Source>\n"
            }
          },
          "name" : "Service Desk Integration Name",
          "modified" : "2024-02-18T18:45:25.994Z",
          "attributes" : {
            "property" : "value",
            "key" : "value"
          },
          "id" : "62945a496ef440189b1f03e3623411c8",
          "beforeProvisioningRule" : ""
        }`) // ServiceDeskIntegrationDto | The specifics of a new integration to create

          
          var serviceDeskIntegrationDto v2025.ServiceDeskIntegrationDto
          if err := json.Unmarshal(servicedeskintegrationdto, &serviceDeskIntegrationDto); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ServiceDeskIntegrationAPI.CreateServiceDeskIntegration(context.Background()).ServiceDeskIntegrationDto(serviceDeskIntegrationDto).Execute()
          //resp, r, err := apiClient.V2025.ServiceDeskIntegrationAPI.CreateServiceDeskIntegration(context.Background()).ServiceDeskIntegrationDto(serviceDeskIntegrationDto).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ServiceDeskIntegrationAPI.CreateServiceDeskIntegration``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateServiceDeskIntegration`: ServiceDeskIntegrationDto
          fmt.Fprintf(os.Stdout, "Response from `ServiceDeskIntegrationAPI.CreateServiceDeskIntegration`: %v\n", resp)
        }
- path: /service-desk-integrations/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/service-desk-integration#delete-service-desk-integration
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `anId` // string | ID of Service Desk integration to delete # string | ID of Service Desk integration to delete

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.ServiceDeskIntegrationAPI.DeleteServiceDeskIntegration(context.Background(), id).Execute()
          //r, err := apiClient.V2025.ServiceDeskIntegrationAPI.DeleteServiceDeskIntegration(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ServiceDeskIntegrationAPI.DeleteServiceDeskIntegration``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /service-desk-integrations/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/service-desk-integration#get-service-desk-integration
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `anId` // string | ID of the Service Desk integration to get # string | ID of the Service Desk integration to get

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ServiceDeskIntegrationAPI.GetServiceDeskIntegration(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.ServiceDeskIntegrationAPI.GetServiceDeskIntegration(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ServiceDeskIntegrationAPI.GetServiceDeskIntegration``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetServiceDeskIntegration`: ServiceDeskIntegrationDto
          fmt.Fprintf(os.Stdout, "Response from `ServiceDeskIntegrationAPI.GetServiceDeskIntegration`: %v\n", resp)
        }
- path: /service-desk-integrations/templates/{scriptName}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/service-desk-integration#get-service-desk-integration-template
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          scriptName := `aScriptName` // string | The scriptName value of the Service Desk integration template to get # string | The scriptName value of the Service Desk integration template to get

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ServiceDeskIntegrationAPI.GetServiceDeskIntegrationTemplate(context.Background(), scriptName).Execute()
          //resp, r, err := apiClient.V2025.ServiceDeskIntegrationAPI.GetServiceDeskIntegrationTemplate(context.Background(), scriptName).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ServiceDeskIntegrationAPI.GetServiceDeskIntegrationTemplate``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetServiceDeskIntegrationTemplate`: ServiceDeskIntegrationTemplateDto
          fmt.Fprintf(os.Stdout, "Response from `ServiceDeskIntegrationAPI.GetServiceDeskIntegrationTemplate`: %v\n", resp)
        }
- path: /service-desk-integrations/types
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/service-desk-integration#get-service-desk-integration-types
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ServiceDeskIntegrationAPI.GetServiceDeskIntegrationTypes(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.ServiceDeskIntegrationAPI.GetServiceDeskIntegrationTypes(context.Background()).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ServiceDeskIntegrationAPI.GetServiceDeskIntegrationTypes``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetServiceDeskIntegrationTypes`: []ServiceDeskIntegrationTemplateType
          fmt.Fprintf(os.Stdout, "Response from `ServiceDeskIntegrationAPI.GetServiceDeskIntegrationTypes`: %v\n", resp)
        }
- path: /service-desk-integrations
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/service-desk-integration#get-service-desk-integrations
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          sorters := `name` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name** (optional)
          filters := `name eq "John Doe"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq*  **type**: *eq, in*  **cluster**: *eq, in* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq*  **type**: *eq, in*  **cluster**: *eq, in* (optional)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ServiceDeskIntegrationAPI.GetServiceDeskIntegrations(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.ServiceDeskIntegrationAPI.GetServiceDeskIntegrations(context.Background()).Offset(offset).Limit(limit).Sorters(sorters).Filters(filters).Count(count).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ServiceDeskIntegrationAPI.GetServiceDeskIntegrations``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetServiceDeskIntegrations`: []ServiceDeskIntegrationDto
          fmt.Fprintf(os.Stdout, "Response from `ServiceDeskIntegrationAPI.GetServiceDeskIntegrations`: %v\n", resp)
        }
- path: /service-desk-integrations/status-check-configuration
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/service-desk-integration#get-status-check-details
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ServiceDeskIntegrationAPI.GetStatusCheckDetails(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.ServiceDeskIntegrationAPI.GetStatusCheckDetails(context.Background()).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ServiceDeskIntegrationAPI.GetStatusCheckDetails``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetStatusCheckDetails`: QueuedCheckConfigDetails
          fmt.Fprintf(os.Stdout, "Response from `ServiceDeskIntegrationAPI.GetStatusCheckDetails`: %v\n", resp)
        }
- path: /service-desk-integrations/{id}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/service-desk-integration#patch-service-desk-integration
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `anId` // string | ID of the Service Desk integration to update # string | ID of the Service Desk integration to update
          jsonpatchoperation := []byte(``) // []JsonPatchOperation | A list of SDIM update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  Only `replace` operations are accepted by this endpoint.  A 403 Forbidden Error indicates that a PATCH operation was attempted that is not allowed. 

          
          var jsonPatchOperation []v2025.JsonPatchOperation
          if err := json.Unmarshal(jsonpatchoperation, &jsonPatchOperation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ServiceDeskIntegrationAPI.PatchServiceDeskIntegration(context.Background(), id).JsonPatchOperation(jsonPatchOperation).Execute()
          //resp, r, err := apiClient.V2025.ServiceDeskIntegrationAPI.PatchServiceDeskIntegration(context.Background(), id).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ServiceDeskIntegrationAPI.PatchServiceDeskIntegration``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchServiceDeskIntegration`: ServiceDeskIntegrationDto
          fmt.Fprintf(os.Stdout, "Response from `ServiceDeskIntegrationAPI.PatchServiceDeskIntegration`: %v\n", resp)
        }
- path: /service-desk-integrations/{id}
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/service-desk-integration#put-service-desk-integration
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `anId` // string | ID of the Service Desk integration to update # string | ID of the Service Desk integration to update
           servicedeskintegrationdto := []byte(`{
          "ownerRef" : "",
          "cluster" : "xyzzy999",
          "created" : "2024-01-17T18:45:25.994Z",
          "description" : "A very nice Service Desk integration",
          "clusterRef" : "",
          "type" : "ServiceNowSDIM",
          "managedSources" : [ "2c9180835d191a86015d28455b4a2329", "2c5680835d191a85765d28455b4a9823" ],
          "provisioningConfig" : {
            "managedResourceRefs" : [ {
              "type" : "SOURCE",
              "id" : "2c9180855d191c59015d291ceb051111",
              "name" : "My Source 1"
            }, {
              "type" : "SOURCE",
              "id" : "2c9180855d191c59015d291ceb052222",
              "name" : "My Source 2"
            } ],
            "provisioningRequestExpiration" : 7,
            "noProvisioningRequests" : true,
            "universalManager" : true,
            "planInitializerScript" : {
              "source" : "<?xml version='1.0' encoding='UTF-8'?>\\r\\n<!DOCTYPE Rule PUBLIC \\\"sailpoint.dtd\\\" \\\"sailpoint.dtd\\\">\\r\\n<Rule name=\\\"Example Rule\\\" type=\\\"BeforeProvisioning\\\">\\r\\n  <Description>Before Provisioning Rule which changes disables and enables to a modify.</Description>\\r\\n  <Source><![CDATA[\\r\\nimport sailpoint.object.*;\\r\\nimport sailpoint.object.ProvisioningPlan.AccountRequest;\\r\\nimport sailpoint.object.ProvisioningPlan.AccountRequest.Operation;\\r\\nimport sailpoint.object.ProvisioningPlan.AttributeRequest;\\r\\nimport sailpoint.object.ProvisioningPlan;\\r\\nimport sailpoint.object.ProvisioningPlan.Operation;\\r\\n\\r\\nfor ( AccountRequest accountRequest : plan.getAccountRequests() ) {\\r\\n  if ( accountRequest.getOp().equals( ProvisioningPlan.ObjectOperation.Disable ) ) {\\r\\n    accountRequest.setOp( ProvisioningPlan.ObjectOperation.Modify );\\r\\n  }\\r\\n  if ( accountRequest.getOp().equals( ProvisioningPlan.ObjectOperation.Enable ) ) {\\r\\n    accountRequest.setOp( ProvisioningPlan.ObjectOperation.Modify );\\r\\n  }\\r\\n}\\r\\n\\r\\n  ]]></Source>\n"
            }
          },
          "name" : "Service Desk Integration Name",
          "modified" : "2024-02-18T18:45:25.994Z",
          "attributes" : {
            "property" : "value",
            "key" : "value"
          },
          "id" : "62945a496ef440189b1f03e3623411c8",
          "beforeProvisioningRule" : ""
        }`) // ServiceDeskIntegrationDto | The specifics of the integration to update

          
          var serviceDeskIntegrationDto v2025.ServiceDeskIntegrationDto
          if err := json.Unmarshal(servicedeskintegrationdto, &serviceDeskIntegrationDto); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ServiceDeskIntegrationAPI.PutServiceDeskIntegration(context.Background(), id).ServiceDeskIntegrationDto(serviceDeskIntegrationDto).Execute()
          //resp, r, err := apiClient.V2025.ServiceDeskIntegrationAPI.PutServiceDeskIntegration(context.Background(), id).ServiceDeskIntegrationDto(serviceDeskIntegrationDto).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ServiceDeskIntegrationAPI.PutServiceDeskIntegration``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PutServiceDeskIntegration`: ServiceDeskIntegrationDto
          fmt.Fprintf(os.Stdout, "Response from `ServiceDeskIntegrationAPI.PutServiceDeskIntegration`: %v\n", resp)
        }
- path: /service-desk-integrations/status-check-configuration
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/service-desk-integration#update-status-check-details
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           queuedcheckconfigdetails := []byte(`{
          "provisioningStatusCheckIntervalMinutes" : "30",
          "provisioningMaxStatusCheckDays" : "2"
        }`) // QueuedCheckConfigDetails | The modified time check configuration

          
          var queuedCheckConfigDetails v2025.QueuedCheckConfigDetails
          if err := json.Unmarshal(queuedcheckconfigdetails, &queuedCheckConfigDetails); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.ServiceDeskIntegrationAPI.UpdateStatusCheckDetails(context.Background()).QueuedCheckConfigDetails(queuedCheckConfigDetails).Execute()
          //resp, r, err := apiClient.V2025.ServiceDeskIntegrationAPI.UpdateStatusCheckDetails(context.Background()).QueuedCheckConfigDetails(queuedCheckConfigDetails).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `ServiceDeskIntegrationAPI.UpdateStatusCheckDetails``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateStatusCheckDetails`: QueuedCheckConfigDetails
          fmt.Fprintf(os.Stdout, "Response from `ServiceDeskIntegrationAPI.UpdateStatusCheckDetails`: %v\n", resp)
        }
- path: /source-usages/{sourceId}/status
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/source-usages#get-status-by-source-id
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `2c9180835d191a86015d28455b4a2329` // string | ID of IDN source # string | ID of IDN source

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourceUsagesAPI.GetStatusBySourceId(context.Background(), sourceId).Execute()
          //resp, r, err := apiClient.V2025.SourceUsagesAPI.GetStatusBySourceId(context.Background(), sourceId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourceUsagesAPI.GetStatusBySourceId``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetStatusBySourceId`: SourceUsageStatus
          fmt.Fprintf(os.Stdout, "Response from `SourceUsagesAPI.GetStatusBySourceId`: %v\n", resp)
        }
- path: /source-usages/{sourceId}/summaries
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/source-usages#get-usages-by-source-id
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `2c9180835d191a86015d28455b4a2329` // string | ID of IDN source # string | ID of IDN source
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          sorters := `-date` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **date** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **date** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourceUsagesAPI.GetUsagesBySourceId(context.Background(), sourceId).Execute()
          //resp, r, err := apiClient.V2025.SourceUsagesAPI.GetUsagesBySourceId(context.Background(), sourceId).Limit(limit).Offset(offset).Count(count).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourceUsagesAPI.GetUsagesBySourceId``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetUsagesBySourceId`: []SourceUsage
          fmt.Fprintf(os.Stdout, "Response from `SourceUsagesAPI.GetUsagesBySourceId`: %v\n", resp)
        }
- path: /sources/{sourceId}/provisioning-policies
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#create-provisioning-policy
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `2c9180835d191a86015d28455b4a2329` // string | The Source id # string | The Source id
           provisioningpolicydto := []byte(`{
          "name" : "example provisioning policy for inactive identities",
          "description" : "this provisioning policy creates access based on an identity going inactive",
          "fields" : [ {
            "isRequired" : false,
            "transform" : {
              "type" : "rule",
              "attributes" : {
                "name" : "Create Unique LDAP Attribute"
              }
            },
            "isMultiValued" : false,
            "name" : "userName",
            "attributes" : {
              "template" : "${firstname}.${lastname}${uniqueCounter}",
              "cloudMaxUniqueChecks" : "50",
              "cloudMaxSize" : "20",
              "cloudRequired" : "true"
            },
            "type" : "string"
          }, {
            "isRequired" : false,
            "transform" : {
              "type" : "rule",
              "attributes" : {
                "name" : "Create Unique LDAP Attribute"
              }
            },
            "isMultiValued" : false,
            "name" : "userName",
            "attributes" : {
              "template" : "${firstname}.${lastname}${uniqueCounter}",
              "cloudMaxUniqueChecks" : "50",
              "cloudMaxSize" : "20",
              "cloudRequired" : "true"
            },
            "type" : "string"
          } ],
          "usageType" : "CREATE"
        }`) // ProvisioningPolicyDto | 

          
          var provisioningPolicyDto v2025.ProvisioningPolicyDto
          if err := json.Unmarshal(provisioningpolicydto, &provisioningPolicyDto); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.CreateProvisioningPolicy(context.Background(), sourceId).ProvisioningPolicyDto(provisioningPolicyDto).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.CreateProvisioningPolicy(context.Background(), sourceId).ProvisioningPolicyDto(provisioningPolicyDto).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.CreateProvisioningPolicy``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateProvisioningPolicy`: ProvisioningPolicyDto
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.CreateProvisioningPolicy`: %v\n", resp)
        }
- path: /sources
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#create-source
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           source := []byte(`{
          "cluster" : {
            "name" : "Corporate Cluster",
            "id" : "2c9180866166b5b0016167c32ef31a66",
            "type" : "CLUSTER"
          },
          "deleteThreshold" : 10,
          "connectorId" : "active-directory",
          "description" : "This is the corporate directory.",
          "type" : "OpenLDAP - Direct",
          "connectorClass" : "sailpoint.connector.LDAPConnector",
          "connectionType" : "file",
          "features" : [ "PROVISIONING", "NO_PERMISSIONS_PROVISIONING", "GROUPS_HAVE_MEMBERS" ],
          "passwordPolicies" : [ {
            "type" : "PASSWORD_POLICY",
            "id" : "2c9180855d191c59015d291ceb053980",
            "name" : "Corporate Password Policy"
          }, {
            "type" : "PASSWORD_POLICY",
            "id" : "2c9180855d191c59015d291ceb057777",
            "name" : "Vendor Password Policy"
          } ],
          "modified" : "2024-01-23T18:08:50.897Z",
          "id" : "2c91808568c529c60168cca6f90c1324",
          "connectorImplementationId" : "delimited-file",
          "managerCorrelationRule" : {
            "name" : "Example Rule",
            "id" : "2c918085708c274401708c2a8a760001",
            "type" : "RULE"
          },
          "owner" : {
            "name" : "MyName",
            "id" : "2c91808568c529c60168cca6f90c1313",
            "type" : "IDENTITY"
          },
          "managementWorkgroup" : {
            "name" : "My Management Workgroup",
            "id" : "2c91808568c529c60168cca6f90c2222",
            "type" : "GOVERNANCE_GROUP"
          },
          "accountCorrelationRule" : {
            "name" : "Example Rule",
            "id" : "2c918085708c274401708c2a8a760001",
            "type" : "RULE"
          },
          "authoritative" : false,
          "connectorAttributes" : {
            "healthCheckTimeout" : 30,
            "authSearchAttributes" : [ "cn", "uid", "mail" ]
          },
          "created" : "2022-02-08T14:50:03.827Z",
          "managerCorrelationMapping" : {
            "accountAttributeName" : "manager",
            "identityAttributeName" : "manager"
          },
          "credentialProviderEnabled" : false,
          "accountCorrelationConfig" : {
            "name" : "Directory [source-62867] Account Correlation",
            "id" : "2c9180855d191c59015d28583727245a",
            "type" : "ACCOUNT_CORRELATION_CONFIG"
          },
          "connector" : "active-directory",
          "healthy" : true,
          "schemas" : [ {
            "type" : "CONNECTOR_SCHEMA",
            "id" : "2c9180835d191a86015d28455b4b232a",
            "name" : "account"
          }, {
            "type" : "CONNECTOR_SCHEMA",
            "id" : "2c9180835d191a86015d28455b4b232b",
            "name" : "group"
          } ],
          "name" : "My Source",
          "connectorName" : "Active Directory",
          "category" : "CredentialProvider",
          "beforeProvisioningRule" : {
            "name" : "Example Rule",
            "id" : "2c918085708c274401708c2a8a760001",
            "type" : "RULE"
          },
          "status" : "SOURCE_STATE_HEALTHY",
          "since" : "2021-09-28T15:48:29.3801666300Z"
        }`) // Source | 
          provisionAsCsv := false // bool | If this parameter is `true`, it configures the source as a Delimited File (CSV) source. Setting this to `true` will automatically set the `type` of the source to `DelimitedFile`.  You must use this query parameter to create a Delimited File source as you would in the UI.  If you don't set this query parameter and you attempt to set the `type` attribute directly, the request won't correctly generate the source.   (optional) # bool | If this parameter is `true`, it configures the source as a Delimited File (CSV) source. Setting this to `true` will automatically set the `type` of the source to `DelimitedFile`.  You must use this query parameter to create a Delimited File source as you would in the UI.  If you don't set this query parameter and you attempt to set the `type` attribute directly, the request won't correctly generate the source.   (optional)

          
          var source v2025.Source
          if err := json.Unmarshal(source, &source); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.CreateSource(context.Background()).Source(source).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.CreateSource(context.Background()).Source(source).ProvisionAsCsv(provisionAsCsv).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.CreateSource``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateSource`: Source
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.CreateSource`: %v\n", resp)
        }
- path: /sources/{sourceId}/schedules
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#create-source-schedule
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `2c9180835d191a86015d28455b4a2329` // string | Source ID. # string | Source ID.
           schedule1 := []byte(``) // Schedule1 | 

          
          var schedule1 v2025.Schedule1
          if err := json.Unmarshal(schedule1, &schedule1); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.CreateSourceSchedule(context.Background(), sourceId).Schedule1(schedule1).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.CreateSourceSchedule(context.Background(), sourceId).Schedule1(schedule1).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.CreateSourceSchedule``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateSourceSchedule`: Schedule1
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.CreateSourceSchedule`: %v\n", resp)
        }
- path: /sources/{sourceId}/schemas
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#create-source-schema
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `2c9180835d191a86015d28455b4a2329` // string | Source ID. # string | Source ID.
           schema := []byte(`{
          "features" : [ "PROVISIONING", "NO_PERMISSIONS_PROVISIONING", "GROUPS_HAVE_MEMBERS" ],
          "nativeObjectType" : "User",
          "configuration" : {
            "groupMemberAttribute" : "member"
          },
          "created" : "2019-12-24T22:32:58.104Z",
          "includePermissions" : false,
          "name" : "account",
          "hierarchyAttribute" : "memberOf",
          "modified" : "2019-12-31T20:22:28.104Z",
          "attributes" : [ {
            "name" : "sAMAccountName",
            "type" : "STRING",
            "isMultiValued" : false,
            "isEntitlement" : false,
            "isGroup" : false
          }, {
            "name" : "memberOf",
            "type" : "STRING",
            "schema" : {
              "type" : "CONNECTOR_SCHEMA",
              "id" : "2c9180887671ff8c01767b4671fc7d60",
              "name" : "group"
            },
            "description" : "Group membership",
            "isMultiValued" : true,
            "isEntitlement" : true,
            "isGroup" : true
          } ],
          "id" : "2c9180835d191a86015d28455b4a2329",
          "displayAttribute" : "distinguishedName",
          "identityAttribute" : "sAMAccountName"
        }`) // Schema | 

          
          var schema v2025.Schema
          if err := json.Unmarshal(schema, &schema); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.CreateSourceSchema(context.Background(), sourceId).Schema(schema).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.CreateSourceSchema(context.Background(), sourceId).Schema(schema).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.CreateSourceSchema``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateSourceSchema`: Schema
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.CreateSourceSchema`: %v\n", resp)
        }
- path: /sources/{id}/remove-accounts
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#delete-accounts-async
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ebbf35756e1140699ce52b233121384a` // string | The source id # string | The source id

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.DeleteAccountsAsync(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.DeleteAccountsAsync(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.DeleteAccountsAsync``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `DeleteAccountsAsync`: TaskResultDto
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.DeleteAccountsAsync`: %v\n", resp)
        }
- path: /sources/{sourceId}/native-change-detection-config
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#delete-native-change-detection-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c9180835d191a86015d28455b4a2329` // string | The source id # string | The source id

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.SourcesAPI.DeleteNativeChangeDetectionConfig(context.Background(), id).Execute()
          //r, err := apiClient.V2025.SourcesAPI.DeleteNativeChangeDetectionConfig(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.DeleteNativeChangeDetectionConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /sources/{sourceId}/provisioning-policies/{usageType}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#delete-provisioning-policy
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `2c9180835d191a86015d28455b4a2329` // string | The Source ID. # string | The Source ID.
          usageType := CREATE // UsageType | The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to 'Create Account Profile', the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to 'Update Account Profile', the provisioning template for the 'Update' connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to 'Enable Account Profile', the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner's account is created.  DISABLE - This usage type relates to 'Disable Account Profile', the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.  # UsageType | The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to 'Create Account Profile', the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to 'Update Account Profile', the provisioning template for the 'Update' connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to 'Enable Account Profile', the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner's account is created.  DISABLE - This usage type relates to 'Disable Account Profile', the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs. 

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.SourcesAPI.DeleteProvisioningPolicy(context.Background(), sourceId, usageType).Execute()
          //r, err := apiClient.V2025.SourcesAPI.DeleteProvisioningPolicy(context.Background(), sourceId, usageType).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.DeleteProvisioningPolicy``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /sources/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#delete-source
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c9180835d191a86015d28455b4a2329` // string | Source ID. # string | Source ID.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.DeleteSource(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.DeleteSource(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.DeleteSource``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `DeleteSource`: DeleteSource202Response
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.DeleteSource`: %v\n", resp)
        }
- path: /sources/{sourceId}/schedules/{scheduleType}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#delete-source-schedule
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `2c9180835d191a86015d28455b4a2329` // string | The Source id. # string | The Source id.
          scheduleType := `ACCOUNT_AGGREGATION` // string | The Schedule type. # string | The Schedule type.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.SourcesAPI.DeleteSourceSchedule(context.Background(), sourceId, scheduleType).Execute()
          //r, err := apiClient.V2025.SourcesAPI.DeleteSourceSchedule(context.Background(), sourceId, scheduleType).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.DeleteSourceSchedule``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /sources/{sourceId}/schemas/{schemaId}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#delete-source-schema
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `2c9180835d191a86015d28455b4a2329` // string | The Source id. # string | The Source id.
          schemaId := `2c9180835d191a86015d28455b4a2329` // string | The Schema id. # string | The Schema id.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.SourcesAPI.DeleteSourceSchema(context.Background(), sourceId, schemaId).Execute()
          //r, err := apiClient.V2025.SourcesAPI.DeleteSourceSchema(context.Background(), sourceId, schemaId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.DeleteSourceSchema``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /sources/{id}/schemas/accounts
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#get-accounts-schema
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `8c190e6787aa4ed9a90bd9d5344523fb` // string | The Source id # string | The Source id

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.SourcesAPI.GetAccountsSchema(context.Background(), id).Execute()
          //r, err := apiClient.V2025.SourcesAPI.GetAccountsSchema(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.GetAccountsSchema``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /sources/{id}/correlation-config
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#get-correlation-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c9180835d191a86015d28455b4a2329` // string | The source id # string | The source id

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.GetCorrelationConfig(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.GetCorrelationConfig(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.GetCorrelationConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetCorrelationConfig`: CorrelationConfig
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.GetCorrelationConfig`: %v\n", resp)
        }
- path: /sources/{id}/schemas/entitlements
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#get-entitlements-schema
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `8c190e6787aa4ed9a90bd9d5344523fb` // string | The Source id # string | The Source id
          schemaName := `?schemaName=group` // string | Name of entitlement schema (optional) # string | Name of entitlement schema (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.SourcesAPI.GetEntitlementsSchema(context.Background(), id).Execute()
          //r, err := apiClient.V2025.SourcesAPI.GetEntitlementsSchema(context.Background(), id).SchemaName(schemaName).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.GetEntitlementsSchema``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /sources/{sourceId}/native-change-detection-config
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#get-native-change-detection-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c9180835d191a86015d28455b4a2329` // string | The source id # string | The source id

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.GetNativeChangeDetectionConfig(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.GetNativeChangeDetectionConfig(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.GetNativeChangeDetectionConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetNativeChangeDetectionConfig`: NativeChangeDetectionConfig
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.GetNativeChangeDetectionConfig`: %v\n", resp)
        }
- path: /sources/{sourceId}/provisioning-policies/{usageType}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#get-provisioning-policy
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `2c9180835d191a86015d28455b4a2329` // string | The Source ID. # string | The Source ID.
          usageType := CREATE // UsageType | The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to 'Create Account Profile', the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to 'Update Account Profile', the provisioning template for the 'Update' connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to 'Enable Account Profile', the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner's account is created.  DISABLE - This usage type relates to 'Disable Account Profile', the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.  # UsageType | The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to 'Create Account Profile', the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to 'Update Account Profile', the provisioning template for the 'Update' connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to 'Enable Account Profile', the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner's account is created.  DISABLE - This usage type relates to 'Disable Account Profile', the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs. 

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.GetProvisioningPolicy(context.Background(), sourceId, usageType).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.GetProvisioningPolicy(context.Background(), sourceId, usageType).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.GetProvisioningPolicy``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetProvisioningPolicy`: ProvisioningPolicyDto
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.GetProvisioningPolicy`: %v\n", resp)
        }
- path: /sources/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#get-source
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c9180835d191a86015d28455b4a2329` // string | Source ID. # string | Source ID.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.GetSource(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.GetSource(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.GetSource``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetSource`: Source
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.GetSource`: %v\n", resp)
        }
- path: /sources/{id}/attribute-sync-config
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#get-source-attr-sync-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c9180835d191a86015d28455b4a2329` // string | The source id # string | The source id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.GetSourceAttrSyncConfig(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.GetSourceAttrSyncConfig(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.GetSourceAttrSyncConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetSourceAttrSyncConfig`: AttrSyncSourceConfig
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.GetSourceAttrSyncConfig`: %v\n", resp)
        }
- path: /sources/{id}/connectors/source-config
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#get-source-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `cef3ee201db947c5912551015ba0c679` // string | The Source id # string | The Source id
          locale := `en` // string | The locale to apply to the config. If no viable locale is given, it will default to \"en\" (optional) # string | The locale to apply to the config. If no viable locale is given, it will default to \"en\" (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.GetSourceConfig(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.GetSourceConfig(context.Background(), id).Locale(locale).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.GetSourceConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetSourceConfig`: ConnectorDetail
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.GetSourceConfig`: %v\n", resp)
        }
- path: /sources/{sourceId}/connections
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#get-source-connections
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `2c9180835d191a86015d28455b4a2329` // string | Source ID. # string | Source ID.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.GetSourceConnections(context.Background(), sourceId).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.GetSourceConnections(context.Background(), sourceId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.GetSourceConnections``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetSourceConnections`: SourceConnectionsDto
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.GetSourceConnections`: %v\n", resp)
        }
- path: /sources/{id}/entitlement-request-config
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#get-source-entitlement-request-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.GetSourceEntitlementRequestConfig(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.GetSourceEntitlementRequestConfig(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.GetSourceEntitlementRequestConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetSourceEntitlementRequestConfig`: SourceEntitlementRequestConfig
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.GetSourceEntitlementRequestConfig`: %v\n", resp)
        }
- path: /sources/{sourceId}/source-health
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#get-source-health
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `2c9180835d191a86015d28455b4a2329` // string | The Source id. # string | The Source id.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.GetSourceHealth(context.Background(), sourceId).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.GetSourceHealth(context.Background(), sourceId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.GetSourceHealth``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetSourceHealth`: SourceHealthDto
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.GetSourceHealth`: %v\n", resp)
        }
- path: /sources/{sourceId}/schedules/{scheduleType}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#get-source-schedule
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `2c9180835d191a86015d28455b4a2329` // string | The Source id. # string | The Source id.
          scheduleType := `ACCOUNT_AGGREGATION` // string | The Schedule type. # string | The Schedule type.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.GetSourceSchedule(context.Background(), sourceId, scheduleType).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.GetSourceSchedule(context.Background(), sourceId, scheduleType).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.GetSourceSchedule``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetSourceSchedule`: Schedule1
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.GetSourceSchedule`: %v\n", resp)
        }
- path: /sources/{sourceId}/schedules
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#get-source-schedules
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `2c9180835d191a86015d28455b4a2329` // string | Source ID. # string | Source ID.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.GetSourceSchedules(context.Background(), sourceId).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.GetSourceSchedules(context.Background(), sourceId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.GetSourceSchedules``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetSourceSchedules`: []Schedule1
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.GetSourceSchedules`: %v\n", resp)
        }
- path: /sources/{sourceId}/schemas/{schemaId}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#get-source-schema
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `2c9180835d191a86015d28455b4a2329` // string | The Source id. # string | The Source id.
          schemaId := `2c9180835d191a86015d28455b4a2329` // string | The Schema id. # string | The Schema id.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.GetSourceSchema(context.Background(), sourceId, schemaId).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.GetSourceSchema(context.Background(), sourceId, schemaId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.GetSourceSchema``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetSourceSchema`: Schema
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.GetSourceSchema`: %v\n", resp)
        }
- path: /sources/{sourceId}/schemas
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#get-source-schemas
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `2c9180835d191a86015d28455b4a2329` // string | Source ID. # string | Source ID.
          includeTypes := `group` // string | If set to 'group', then the account schema is filtered and only group schemas are returned. Only a value of 'group' is recognized presently.  Note: The API will check whether include-types is group or not, if not, it will list schemas based on include-names, if include-names is not provided, it will list all schemas. (optional) # string | If set to 'group', then the account schema is filtered and only group schemas are returned. Only a value of 'group' is recognized presently.  Note: The API will check whether include-types is group or not, if not, it will list schemas based on include-names, if include-names is not provided, it will list all schemas. (optional)
          includeNames := `account` // string | A comma-separated list of schema names to filter result. (optional) # string | A comma-separated list of schema names to filter result. (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.GetSourceSchemas(context.Background(), sourceId).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.GetSourceSchemas(context.Background(), sourceId).IncludeTypes(includeTypes).IncludeNames(includeNames).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.GetSourceSchemas``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetSourceSchemas`: []Schema
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.GetSourceSchemas`: %v\n", resp)
        }
- path: /sources/{id}/load-accounts
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#import-accounts
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | Source Id # string | Source Id
          file := BINARY_DATA_HERE // *os.File | The CSV file containing the source accounts to aggregate. (optional) # *os.File | The CSV file containing the source accounts to aggregate. (optional)
          disableOptimization := `disableOptimization_example` // string | Use this flag to reprocess every account whether or not the data has changed. (optional) # string | Use this flag to reprocess every account whether or not the data has changed. (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.ImportAccounts(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.ImportAccounts(context.Background(), id).File(file).DisableOptimization(disableOptimization).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.ImportAccounts``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ImportAccounts`: LoadAccountsTask
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.ImportAccounts`: %v\n", resp)
        }
- path: /sources/{id}/schemas/accounts
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#import-accounts-schema
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `8c190e6787aa4ed9a90bd9d5344523fb` // string | The Source id # string | The Source id
          file := BINARY_DATA_HERE // *os.File |  (optional) # *os.File |  (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.ImportAccountsSchema(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.ImportAccountsSchema(context.Background(), id).File(file).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.ImportAccountsSchema``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ImportAccountsSchema`: Schema
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.ImportAccountsSchema`: %v\n", resp)
        }
- path: /sources/{sourceId}/upload-connector-file
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#import-connector-file
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `2c9180835d191a86015d28455b4a2329` // string | The Source id. # string | The Source id.
          file := BINARY_DATA_HERE // *os.File |  (optional) # *os.File |  (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.ImportConnectorFile(context.Background(), sourceId).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.ImportConnectorFile(context.Background(), sourceId).File(file).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.ImportConnectorFile``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ImportConnectorFile`: Source
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.ImportConnectorFile`: %v\n", resp)
        }
- path: /sources/{sourceId}/load-entitlements
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#import-entitlements
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `ef38f94347e94562b5bb8424a56397d8` // string | Source Id # string | Source Id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          file := BINARY_DATA_HERE // *os.File | The CSV file containing the source entitlements to aggregate. (optional) # *os.File | The CSV file containing the source entitlements to aggregate. (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.ImportEntitlements(context.Background(), sourceId).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.ImportEntitlements(context.Background(), sourceId).XSailPointExperimental(xSailPointExperimental).File(file).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.ImportEntitlements``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ImportEntitlements`: LoadEntitlementTask
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.ImportEntitlements`: %v\n", resp)
        }
- path: /sources/{id}/schemas/entitlements
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#import-entitlements-schema
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `8c190e6787aa4ed9a90bd9d5344523fb` // string | The Source id # string | The Source id
          schemaName := `?schemaName=group` // string | Name of entitlement schema (optional) # string | Name of entitlement schema (optional)
          file := BINARY_DATA_HERE // *os.File |  (optional) # *os.File |  (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.ImportEntitlementsSchema(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.ImportEntitlementsSchema(context.Background(), id).SchemaName(schemaName).File(file).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.ImportEntitlementsSchema``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ImportEntitlementsSchema`: Schema
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.ImportEntitlementsSchema`: %v\n", resp)
        }
- path: /sources/{id}/load-uncorrelated-accounts
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#import-uncorrelated-accounts
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `75dbec1ebe154d5785da27b95e1dd5d7` // string | Source Id # string | Source Id
          file := BINARY_DATA_HERE // *os.File |  (optional) # *os.File |  (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.ImportUncorrelatedAccounts(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.ImportUncorrelatedAccounts(context.Background(), id).File(file).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.ImportUncorrelatedAccounts``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ImportUncorrelatedAccounts`: LoadUncorrelatedAccountsTask
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.ImportUncorrelatedAccounts`: %v\n", resp)
        }
- path: /sources/{sourceId}/provisioning-policies
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#list-provisioning-policies
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `2c9180835d191a86015d28455b4a2329` // string | The Source id # string | The Source id

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.ListProvisioningPolicies(context.Background(), sourceId).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.ListProvisioningPolicies(context.Background(), sourceId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.ListProvisioningPolicies``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListProvisioningPolicies`: []ProvisioningPolicyDto
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.ListProvisioningPolicies`: %v\n", resp)
        }
- path: /sources
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#list-sources
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `name eq "Employees"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **name**: *co, eq, in, sw, ge, gt, ne, isnull*  **type**: *eq, in, ge, gt, ne, isnull, sw*  **owner.id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **features**: *ca, co*  **created**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **modified**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **managementWorkgroup.id**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **description**: *eq, sw*  **authoritative**: *eq, ne, isnull*  **healthy**: *isnull*  **status**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **connectionType**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **connectorName**: *eq, ge, gt, in, ne, isnull, sw*  **category**: *co, eq, ge, gt, in, le, lt, ne, sw* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **name**: *co, eq, in, sw, ge, gt, ne, isnull*  **type**: *eq, in, ge, gt, ne, isnull, sw*  **owner.id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **features**: *ca, co*  **created**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **modified**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **managementWorkgroup.id**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **description**: *eq, sw*  **authoritative**: *eq, ne, isnull*  **healthy**: *isnull*  **status**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **connectionType**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **connectorName**: *eq, ge, gt, in, ne, isnull, sw*  **category**: *co, eq, ge, gt, in, le, lt, ne, sw* (optional)
          sorters := `name` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **type, created, modified, name, owner.name, healthy, status, id, description, owner.id, accountCorrelationConfig.id, accountCorrelationConfig.name, managerCorrelationRule.type, managerCorrelationRule.id, managerCorrelationRule.name, authoritative, managementWorkgroup.id, connectorName, connectionType** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **type, created, modified, name, owner.name, healthy, status, id, description, owner.id, accountCorrelationConfig.id, accountCorrelationConfig.name, managerCorrelationRule.type, managerCorrelationRule.id, managerCorrelationRule.name, authoritative, managementWorkgroup.id, connectorName, connectionType** (optional)
          forSubadmin := `name` // string | Filter the returned list of sources for the identity specified by the parameter, which is the id of an identity with the role SOURCE_SUBADMIN. By convention, the value **me** indicates the identity id of the current user. Subadmins may only view Sources which they are able to administer; all other Sources will be filtered out when this parameter is set. If the current user is a SOURCE_SUBADMIN but fails to pass a valid value for this parameter, a 403 Forbidden is returned. (optional) # string | Filter the returned list of sources for the identity specified by the parameter, which is the id of an identity with the role SOURCE_SUBADMIN. By convention, the value **me** indicates the identity id of the current user. Subadmins may only view Sources which they are able to administer; all other Sources will be filtered out when this parameter is set. If the current user is a SOURCE_SUBADMIN but fails to pass a valid value for this parameter, a 403 Forbidden is returned. (optional)
          includeIDNSource := true // bool | Include the IdentityNow source in the response. (optional) (default to false) # bool | Include the IdentityNow source in the response. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.ListSources(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.ListSources(context.Background()).Limit(limit).Offset(offset).Count(count).Filters(filters).Sorters(sorters).ForSubadmin(forSubadmin).IncludeIDNSource(includeIDNSource).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.ListSources``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListSources`: []Source
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.ListSources`: %v\n", resp)
        }
- path: /sources/{sourceId}/connector/ping-cluster
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#ping-cluster
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `cef3ee201db947c5912551015ba0c679` // string | The ID of the Source # string | The ID of the Source

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.PingCluster(context.Background(), sourceId).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.PingCluster(context.Background(), sourceId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.PingCluster``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PingCluster`: StatusResponse
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.PingCluster`: %v\n", resp)
        }
- path: /sources/{id}/correlation-config
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#put-correlation-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c9180835d191a86015d28455b4a2329` // string | The source id # string | The source id
           correlationconfig := []byte(`{
          "attributeAssignments" : [ {
            "filterString" : "first_name == \"John\"",
            "ignoreCase" : false,
            "complex" : false,
            "property" : "first_name",
            "value" : "firstName",
            "operation" : "EQ",
            "matchMode" : "ANYWHERE"
          }, {
            "filterString" : "first_name == \"John\"",
            "ignoreCase" : false,
            "complex" : false,
            "property" : "first_name",
            "value" : "firstName",
            "operation" : "EQ",
            "matchMode" : "ANYWHERE"
          } ],
          "name" : "Source [source] Account Correlation",
          "id" : "2c9180835d191a86015d28455b4a2329"
        }`) // CorrelationConfig | 

          
          var correlationConfig v2025.CorrelationConfig
          if err := json.Unmarshal(correlationconfig, &correlationConfig); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.PutCorrelationConfig(context.Background(), id).CorrelationConfig(correlationConfig).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.PutCorrelationConfig(context.Background(), id).CorrelationConfig(correlationConfig).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.PutCorrelationConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PutCorrelationConfig`: CorrelationConfig
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.PutCorrelationConfig`: %v\n", resp)
        }
- path: /sources/{sourceId}/native-change-detection-config
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#put-native-change-detection-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c9180835d191a86015d28455b4a2329` // string | The source id # string | The source id
           nativechangedetectionconfig := []byte(`{
          "selectedEntitlements" : [ "memberOf", "memberOfSharedMailbox" ],
          "operations" : [ "ACCOUNT_UPDATED", "ACCOUNT_DELETED" ],
          "selectedNonEntitlementAttributes" : [ "lastName", "phoneNumber", "objectType", "servicePrincipalName" ],
          "allNonEntitlementAttributes" : false,
          "allEntitlements" : false,
          "enabled" : true
        }`) // NativeChangeDetectionConfig | 

          
          var nativeChangeDetectionConfig v2025.NativeChangeDetectionConfig
          if err := json.Unmarshal(nativechangedetectionconfig, &nativeChangeDetectionConfig); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.PutNativeChangeDetectionConfig(context.Background(), id).NativeChangeDetectionConfig(nativeChangeDetectionConfig).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.PutNativeChangeDetectionConfig(context.Background(), id).NativeChangeDetectionConfig(nativeChangeDetectionConfig).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.PutNativeChangeDetectionConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PutNativeChangeDetectionConfig`: NativeChangeDetectionConfig
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.PutNativeChangeDetectionConfig`: %v\n", resp)
        }
- path: /sources/{sourceId}/provisioning-policies/{usageType}
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#put-provisioning-policy
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `2c9180835d191a86015d28455b4a2329` // string | The Source ID. # string | The Source ID.
          usageType := CREATE // UsageType | The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to 'Create Account Profile', the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to 'Update Account Profile', the provisioning template for the 'Update' connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to 'Enable Account Profile', the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner's account is created.  DISABLE - This usage type relates to 'Disable Account Profile', the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.  # UsageType | The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to 'Create Account Profile', the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to 'Update Account Profile', the provisioning template for the 'Update' connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to 'Enable Account Profile', the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner's account is created.  DISABLE - This usage type relates to 'Disable Account Profile', the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs. 
           provisioningpolicydto := []byte(`{
          "name" : "example provisioning policy for inactive identities",
          "description" : "this provisioning policy creates access based on an identity going inactive",
          "fields" : [ {
            "isRequired" : false,
            "transform" : {
              "type" : "rule",
              "attributes" : {
                "name" : "Create Unique LDAP Attribute"
              }
            },
            "isMultiValued" : false,
            "name" : "userName",
            "attributes" : {
              "template" : "${firstname}.${lastname}${uniqueCounter}",
              "cloudMaxUniqueChecks" : "50",
              "cloudMaxSize" : "20",
              "cloudRequired" : "true"
            },
            "type" : "string"
          }, {
            "isRequired" : false,
            "transform" : {
              "type" : "rule",
              "attributes" : {
                "name" : "Create Unique LDAP Attribute"
              }
            },
            "isMultiValued" : false,
            "name" : "userName",
            "attributes" : {
              "template" : "${firstname}.${lastname}${uniqueCounter}",
              "cloudMaxUniqueChecks" : "50",
              "cloudMaxSize" : "20",
              "cloudRequired" : "true"
            },
            "type" : "string"
          } ],
          "usageType" : "CREATE"
        }`) // ProvisioningPolicyDto | 

          
          var provisioningPolicyDto v2025.ProvisioningPolicyDto
          if err := json.Unmarshal(provisioningpolicydto, &provisioningPolicyDto); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.PutProvisioningPolicy(context.Background(), sourceId, usageType).ProvisioningPolicyDto(provisioningPolicyDto).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.PutProvisioningPolicy(context.Background(), sourceId, usageType).ProvisioningPolicyDto(provisioningPolicyDto).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.PutProvisioningPolicy``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PutProvisioningPolicy`: ProvisioningPolicyDto
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.PutProvisioningPolicy`: %v\n", resp)
        }
- path: /sources/{id}
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#put-source
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c9180835d191a86015d28455b4a2329` // string | Source ID. # string | Source ID.
           source := []byte(`{
          "cluster" : {
            "name" : "Corporate Cluster",
            "id" : "2c9180866166b5b0016167c32ef31a66",
            "type" : "CLUSTER"
          },
          "deleteThreshold" : 10,
          "connectorId" : "active-directory",
          "description" : "This is the corporate directory.",
          "type" : "OpenLDAP - Direct",
          "connectorClass" : "sailpoint.connector.LDAPConnector",
          "connectionType" : "file",
          "features" : [ "PROVISIONING", "NO_PERMISSIONS_PROVISIONING", "GROUPS_HAVE_MEMBERS" ],
          "passwordPolicies" : [ {
            "type" : "PASSWORD_POLICY",
            "id" : "2c9180855d191c59015d291ceb053980",
            "name" : "Corporate Password Policy"
          }, {
            "type" : "PASSWORD_POLICY",
            "id" : "2c9180855d191c59015d291ceb057777",
            "name" : "Vendor Password Policy"
          } ],
          "modified" : "2024-01-23T18:08:50.897Z",
          "id" : "2c91808568c529c60168cca6f90c1324",
          "connectorImplementationId" : "delimited-file",
          "managerCorrelationRule" : {
            "name" : "Example Rule",
            "id" : "2c918085708c274401708c2a8a760001",
            "type" : "RULE"
          },
          "owner" : {
            "name" : "MyName",
            "id" : "2c91808568c529c60168cca6f90c1313",
            "type" : "IDENTITY"
          },
          "managementWorkgroup" : {
            "name" : "My Management Workgroup",
            "id" : "2c91808568c529c60168cca6f90c2222",
            "type" : "GOVERNANCE_GROUP"
          },
          "accountCorrelationRule" : {
            "name" : "Example Rule",
            "id" : "2c918085708c274401708c2a8a760001",
            "type" : "RULE"
          },
          "authoritative" : false,
          "connectorAttributes" : {
            "healthCheckTimeout" : 30,
            "authSearchAttributes" : [ "cn", "uid", "mail" ]
          },
          "created" : "2022-02-08T14:50:03.827Z",
          "managerCorrelationMapping" : {
            "accountAttributeName" : "manager",
            "identityAttributeName" : "manager"
          },
          "credentialProviderEnabled" : false,
          "accountCorrelationConfig" : {
            "name" : "Directory [source-62867] Account Correlation",
            "id" : "2c9180855d191c59015d28583727245a",
            "type" : "ACCOUNT_CORRELATION_CONFIG"
          },
          "connector" : "active-directory",
          "healthy" : true,
          "schemas" : [ {
            "type" : "CONNECTOR_SCHEMA",
            "id" : "2c9180835d191a86015d28455b4b232a",
            "name" : "account"
          }, {
            "type" : "CONNECTOR_SCHEMA",
            "id" : "2c9180835d191a86015d28455b4b232b",
            "name" : "group"
          } ],
          "name" : "My Source",
          "connectorName" : "Active Directory",
          "category" : "CredentialProvider",
          "beforeProvisioningRule" : {
            "name" : "Example Rule",
            "id" : "2c918085708c274401708c2a8a760001",
            "type" : "RULE"
          },
          "status" : "SOURCE_STATE_HEALTHY",
          "since" : "2021-09-28T15:48:29.3801666300Z"
        }`) // Source | 

          
          var source v2025.Source
          if err := json.Unmarshal(source, &source); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.PutSource(context.Background(), id).Source(source).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.PutSource(context.Background(), id).Source(source).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.PutSource``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PutSource`: Source
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.PutSource`: %v\n", resp)
        }
- path: /sources/{id}/attribute-sync-config
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#put-source-attr-sync-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c9180835d191a86015d28455b4a2329` // string | The source id # string | The source id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           attrsyncsourceconfig := []byte(`{
          "attributes" : [ {
            "name" : "email",
            "displayName" : "Email",
            "enabled" : true,
            "target" : "mail"
          }, {
            "name" : "firstname",
            "displayName" : "First Name",
            "enabled" : false,
            "target" : "givenName"
          } ],
          "source" : {
            "name" : "HR Active Directory",
            "id" : "2c9180835d191a86015d28455b4b232a",
            "type" : "SOURCE"
          }
        }`) // AttrSyncSourceConfig | 

          
          var attrSyncSourceConfig v2025.AttrSyncSourceConfig
          if err := json.Unmarshal(attrsyncsourceconfig, &attrSyncSourceConfig); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.PutSourceAttrSyncConfig(context.Background(), id).XSailPointExperimental(xSailPointExperimental).AttrSyncSourceConfig(attrSyncSourceConfig).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.PutSourceAttrSyncConfig(context.Background(), id).XSailPointExperimental(xSailPointExperimental).AttrSyncSourceConfig(attrSyncSourceConfig).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.PutSourceAttrSyncConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PutSourceAttrSyncConfig`: AttrSyncSourceConfig
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.PutSourceAttrSyncConfig`: %v\n", resp)
        }
- path: /sources/{sourceId}/schemas/{schemaId}
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#put-source-schema
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `2c9180835d191a86015d28455b4a2329` // string | The Source id. # string | The Source id.
          schemaId := `2c9180835d191a86015d28455b4a2329` // string | The Schema id. # string | The Schema id.
           schema := []byte(`{
          "features" : [ "PROVISIONING", "NO_PERMISSIONS_PROVISIONING", "GROUPS_HAVE_MEMBERS" ],
          "nativeObjectType" : "User",
          "configuration" : {
            "groupMemberAttribute" : "member"
          },
          "created" : "2019-12-24T22:32:58.104Z",
          "includePermissions" : false,
          "name" : "account",
          "hierarchyAttribute" : "memberOf",
          "modified" : "2019-12-31T20:22:28.104Z",
          "attributes" : [ {
            "name" : "sAMAccountName",
            "type" : "STRING",
            "isMultiValued" : false,
            "isEntitlement" : false,
            "isGroup" : false
          }, {
            "name" : "memberOf",
            "type" : "STRING",
            "schema" : {
              "type" : "CONNECTOR_SCHEMA",
              "id" : "2c9180887671ff8c01767b4671fc7d60",
              "name" : "group"
            },
            "description" : "Group membership",
            "isMultiValued" : true,
            "isEntitlement" : true,
            "isGroup" : true
          } ],
          "id" : "2c9180835d191a86015d28455b4a2329",
          "displayAttribute" : "distinguishedName",
          "identityAttribute" : "sAMAccountName"
        }`) // Schema | 

          
          var schema v2025.Schema
          if err := json.Unmarshal(schema, &schema); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.PutSourceSchema(context.Background(), sourceId, schemaId).Schema(schema).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.PutSourceSchema(context.Background(), sourceId, schemaId).Schema(schema).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.PutSourceSchema``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PutSourceSchema`: Schema
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.PutSourceSchema`: %v\n", resp)
        }
- path: /sources/{sourceId}/connector/peek-resource-objects
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#search-resource-objects
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `cef3ee201db947c5912551015ba0c679` // string | The ID of the Source # string | The ID of the Source
           resourceobjectsrequest := []byte(`{
          "maxCount" : 100,
          "objectType" : "group"
        }`) // ResourceObjectsRequest | 

          
          var resourceObjectsRequest v2025.ResourceObjectsRequest
          if err := json.Unmarshal(resourceobjectsrequest, &resourceObjectsRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.SearchResourceObjects(context.Background(), sourceId).ResourceObjectsRequest(resourceObjectsRequest).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.SearchResourceObjects(context.Background(), sourceId).ResourceObjectsRequest(resourceObjectsRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.SearchResourceObjects``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SearchResourceObjects`: ResourceObjectsResponse
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.SearchResourceObjects`: %v\n", resp)
        }
- path: /sources/{id}/synchronize-attributes
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#sync-attributes-for-source
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `id_example` // string | The Source id # string | The Source id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.SyncAttributesForSource(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.SyncAttributesForSource(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.SyncAttributesForSource``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SyncAttributesForSource`: SourceSyncJob
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.SyncAttributesForSource`: %v\n", resp)
        }
- path: /sources/{sourceId}/connector/test-configuration
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#test-source-configuration
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `cef3ee201db947c5912551015ba0c679` // string | The ID of the Source # string | The ID of the Source

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.TestSourceConfiguration(context.Background(), sourceId).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.TestSourceConfiguration(context.Background(), sourceId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.TestSourceConfiguration``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `TestSourceConfiguration`: StatusResponse
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.TestSourceConfiguration`: %v\n", resp)
        }
- path: /sources/{sourceId}/connector/check-connection
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#test-source-connection
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `cef3ee201db947c5912551015ba0c679` // string | The ID of the Source. # string | The ID of the Source.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.TestSourceConnection(context.Background(), sourceId).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.TestSourceConnection(context.Background(), sourceId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.TestSourceConnection``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `TestSourceConnection`: StatusResponse
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.TestSourceConnection`: %v\n", resp)
        }
- path: /sources/{sourceId}/password-policies
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#update-password-policy-holders
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `8c190e6787aa4ed9a90bd9d5344523fb` // string | The Source id # string | The Source id
          passwordpolicyholdersdtoinner := []byte(``) // []PasswordPolicyHoldersDtoInner | 

          
          var passwordPolicyHoldersDtoInner []v2025.PasswordPolicyHoldersDtoInner
          if err := json.Unmarshal(passwordpolicyholdersdtoinner, &passwordPolicyHoldersDtoInner); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.UpdatePasswordPolicyHolders(context.Background(), sourceId).PasswordPolicyHoldersDtoInner(passwordPolicyHoldersDtoInner).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.UpdatePasswordPolicyHolders(context.Background(), sourceId).PasswordPolicyHoldersDtoInner(passwordPolicyHoldersDtoInner).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.UpdatePasswordPolicyHolders``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdatePasswordPolicyHolders`: []PasswordPolicyHoldersDtoInner
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.UpdatePasswordPolicyHolders`: %v\n", resp)
        }
- path: /sources/{sourceId}/provisioning-policies/bulk-update
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#update-provisioning-policies-in-bulk
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `2c9180835d191a86015d28455b4a2329` // string | The Source id. # string | The Source id.
          provisioningpolicydto := []byte(``) // []ProvisioningPolicyDto | 

          
          var provisioningPolicyDto []v2025.ProvisioningPolicyDto
          if err := json.Unmarshal(provisioningpolicydto, &provisioningPolicyDto); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.UpdateProvisioningPoliciesInBulk(context.Background(), sourceId).ProvisioningPolicyDto(provisioningPolicyDto).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.UpdateProvisioningPoliciesInBulk(context.Background(), sourceId).ProvisioningPolicyDto(provisioningPolicyDto).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.UpdateProvisioningPoliciesInBulk``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateProvisioningPoliciesInBulk`: []ProvisioningPolicyDto
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.UpdateProvisioningPoliciesInBulk`: %v\n", resp)
        }
- path: /sources/{sourceId}/provisioning-policies/{usageType}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#update-provisioning-policy
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `2c9180835d191a86015d28455b4a2329` // string | The Source id. # string | The Source id.
          usageType := CREATE // UsageType | The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to 'Create Account Profile', the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to 'Update Account Profile', the provisioning template for the 'Update' connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to 'Enable Account Profile', the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner's account is created.  DISABLE - This usage type relates to 'Disable Account Profile', the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.  # UsageType | The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to 'Create Account Profile', the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to 'Update Account Profile', the provisioning template for the 'Update' connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to 'Enable Account Profile', the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner's account is created.  DISABLE - This usage type relates to 'Disable Account Profile', the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs. 
          jsonpatchoperation := []byte(`[{op=add, path=/fields/0, value={name=email, transform={type=identityAttribute, attributes={name=email}}, attributes={}, isRequired=false, type=string, isMultiValued=false}}]`) // []JsonPatchOperation | The JSONPatch payload used to update the schema.

          
          var jsonPatchOperation []v2025.JsonPatchOperation
          if err := json.Unmarshal(jsonpatchoperation, &jsonPatchOperation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.UpdateProvisioningPolicy(context.Background(), sourceId, usageType).JsonPatchOperation(jsonPatchOperation).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.UpdateProvisioningPolicy(context.Background(), sourceId, usageType).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.UpdateProvisioningPolicy``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateProvisioningPolicy`: ProvisioningPolicyDto
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.UpdateProvisioningPolicy`: %v\n", resp)
        }
- path: /sources/{id}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#update-source
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c9180835d191a86015d28455b4a2329` // string | Source ID. # string | Source ID.
          jsonpatchoperation := []byte(`[{op=replace, path=/description, value=new description}]`) // []JsonPatchOperation | A list of account update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Any password changes are submitted as plain-text and encrypted upon receipt in Identity Security Cloud (ISC).

          
          var jsonPatchOperation []v2025.JsonPatchOperation
          if err := json.Unmarshal(jsonpatchoperation, &jsonPatchOperation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.UpdateSource(context.Background(), id).JsonPatchOperation(jsonPatchOperation).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.UpdateSource(context.Background(), id).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.UpdateSource``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateSource`: Source
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.UpdateSource`: %v\n", resp)
        }
- path: /sources/{id}/entitlement-request-config
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#update-source-entitlement-request-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           sourceentitlementrequestconfig := []byte(`{
          "accessRequestConfig" : {
            "denialCommentRequired" : false,
            "approvalSchemes" : [ {
              "approverId" : "e3eab852-8315-467f-9de7-70eda97f63c8",
              "approverType" : "GOVERNANCE_GROUP"
            }, {
              "approverId" : "e3eab852-8315-467f-9de7-70eda97f63c8",
              "approverType" : "GOVERNANCE_GROUP"
            } ],
            "reauthorizationRequired" : false,
            "requestCommentRequired" : true
          },
          "revocationRequestConfig" : {
            "approvalSchemes" : [ {
              "approverId" : "e3eab852-8315-467f-9de7-70eda97f63c8",
              "approverType" : "GOVERNANCE_GROUP"
            }, {
              "approverId" : "e3eab852-8315-467f-9de7-70eda97f63c8",
              "approverType" : "GOVERNANCE_GROUP"
            } ]
          }
        }`) // SourceEntitlementRequestConfig | 

          
          var sourceEntitlementRequestConfig v2025.SourceEntitlementRequestConfig
          if err := json.Unmarshal(sourceentitlementrequestconfig, &sourceEntitlementRequestConfig); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.UpdateSourceEntitlementRequestConfig(context.Background()).XSailPointExperimental(xSailPointExperimental).SourceEntitlementRequestConfig(sourceEntitlementRequestConfig).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.UpdateSourceEntitlementRequestConfig(context.Background()).XSailPointExperimental(xSailPointExperimental).SourceEntitlementRequestConfig(sourceEntitlementRequestConfig).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.UpdateSourceEntitlementRequestConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateSourceEntitlementRequestConfig`: SourceEntitlementRequestConfig
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.UpdateSourceEntitlementRequestConfig`: %v\n", resp)
        }
- path: /sources/{sourceId}/schedules/{scheduleType}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#update-source-schedule
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `2c9180835d191a86015d28455b4a2329` // string | The Source id. # string | The Source id.
          scheduleType := `ACCOUNT_AGGREGATION` // string | The Schedule type. # string | The Schedule type.
          jsonpatchoperation := []byte(`[{op=replace, path=/cronExpression, value=0 0 6 * * ?}]`) // []JsonPatchOperation | The JSONPatch payload used to update the schedule.

          
          var jsonPatchOperation []v2025.JsonPatchOperation
          if err := json.Unmarshal(jsonpatchoperation, &jsonPatchOperation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.UpdateSourceSchedule(context.Background(), sourceId, scheduleType).JsonPatchOperation(jsonPatchOperation).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.UpdateSourceSchedule(context.Background(), sourceId, scheduleType).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.UpdateSourceSchedule``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateSourceSchedule`: Schedule1
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.UpdateSourceSchedule`: %v\n", resp)
        }
- path: /sources/{sourceId}/schemas/{schemaId}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/sources#update-source-schema
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sourceId := `2c9180835d191a86015d28455b4a2329` // string | The Source id. # string | The Source id.
          schemaId := `2c9180835d191a86015d28455b4a2329` // string | The Schema id. # string | The Schema id.
          jsonpatchoperation := []byte(`[{op=add, path=/attributes/-, value={name=location, type=STRING, schema=null, description=Employee location, isMulti=false, isEntitlement=false, isGroup=false}}]`) // []JsonPatchOperation | The JSONPatch payload used to update the schema.

          
          var jsonPatchOperation []v2025.JsonPatchOperation
          if err := json.Unmarshal(jsonpatchoperation, &jsonPatchOperation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SourcesAPI.UpdateSourceSchema(context.Background(), sourceId, schemaId).JsonPatchOperation(jsonPatchOperation).Execute()
          //resp, r, err := apiClient.V2025.SourcesAPI.UpdateSourceSchema(context.Background(), sourceId, schemaId).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SourcesAPI.UpdateSourceSchema``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateSourceSchema`: Schema
          fmt.Fprintf(os.Stdout, "Response from `SourcesAPI.UpdateSourceSchema`: %v\n", resp)
        }
- path: /suggested-entitlement-description-batches/{batchId}/stats
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/suggested-entitlement-description#get-sed-batch-stats
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          batchId := `8c190e67-87aa-4ed9-a90b-d9d5344523fb` // string | Batch Id # string | Batch Id

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SuggestedEntitlementDescriptionAPI.GetSedBatchStats(context.Background(), batchId).Execute()
          //resp, r, err := apiClient.V2025.SuggestedEntitlementDescriptionAPI.GetSedBatchStats(context.Background(), batchId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SuggestedEntitlementDescriptionAPI.GetSedBatchStats``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetSedBatchStats`: SedBatchStats
          fmt.Fprintf(os.Stdout, "Response from `SuggestedEntitlementDescriptionAPI.GetSedBatchStats`: %v\n", resp)
        }
- path: /suggested-entitlement-description-batches
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/suggested-entitlement-description#get-sed-batches
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          offset := 0 // int64 | Offset  Integer specifying the offset of the first result from the beginning of the collection. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). The offset value is record-based, not page-based, and the index starts at 0. (optional) (default to 0) # int64 | Offset  Integer specifying the offset of the first result from the beginning of the collection. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). The offset value is record-based, not page-based, and the index starts at 0. (optional) (default to 0)
          limit := 250 // int64 | Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used. (optional) (default to 250) # int64 | Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used. (optional) (default to 250)
          count := true // bool | If `true` it will populate the `X-Total-Count` response header with the number of results that would be returned if `limit` and `offset` were ignored.  The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). Since requesting a total count can have a performance impact, it is recommended not to send `count=true` if that value will not be used. (optional) (default to false) # bool | If `true` it will populate the `X-Total-Count` response header with the number of results that would be returned if `limit` and `offset` were ignored.  The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). Since requesting a total count can have a performance impact, it is recommended not to send `count=true` if that value will not be used. (optional) (default to false)
          countOnly := true // bool | If `true` it will populate the `X-Total-Count` response header with the number of results that would be returned if `limit` and `offset` were ignored. This parameter differs from the count parameter in that this one skips executing the actual query and always return an empty array. (optional) (default to false) # bool | If `true` it will populate the `X-Total-Count` response header with the number of results that would be returned if `limit` and `offset` were ignored. This parameter differs from the count parameter in that this one skips executing the actual query and always return an empty array. (optional) (default to false)
          status := `completed, failed, submitted, materialized, failed` // string | Batch Status (optional) # string | Batch Status (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SuggestedEntitlementDescriptionAPI.GetSedBatches(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.SuggestedEntitlementDescriptionAPI.GetSedBatches(context.Background()).Offset(offset).Limit(limit).Count(count).CountOnly(countOnly).Status(status).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SuggestedEntitlementDescriptionAPI.GetSedBatches``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetSedBatches`: []SedBatchRecord
          fmt.Fprintf(os.Stdout, "Response from `SuggestedEntitlementDescriptionAPI.GetSedBatches`: %v\n", resp)
        }
- path: /suggested-entitlement-descriptions
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/suggested-entitlement-description#list-seds
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `displayName co "Read and Write"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **batchId**: *eq, ne*  **displayName**: *eq, ne, co*  **sourceName**: *eq, ne, co*  **sourceId**: *eq, ne*  **status**: *eq, ne*  **fullText**: *co* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **batchId**: *eq, ne*  **displayName**: *eq, ne, co*  **sourceName**: *eq, ne, co*  **sourceId**: *eq, ne*  **status**: *eq, ne*  **fullText**: *co* (optional)
          sorters := `sorters=displayName` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **displayName, sourceName, status** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **displayName, sourceName, status** (optional)
          countOnly := count-only=true // bool | If `true` it will populate the `X-Total-Count` response header with the number of results that would be returned if `limit` and `offset` were ignored. This parameter differs from the count parameter in that this one skips executing the actual query and always return an empty array. (optional) (default to false) # bool | If `true` it will populate the `X-Total-Count` response header with the number of results that would be returned if `limit` and `offset` were ignored. This parameter differs from the count parameter in that this one skips executing the actual query and always return an empty array. (optional) (default to false)
          requestedByAnyone := requested-by-anyone=true // bool | By default, the ListSeds API will only return items that you have requested to be generated.   This option will allow you to see all items that have been requested (optional) (default to false) # bool | By default, the ListSeds API will only return items that you have requested to be generated.   This option will allow you to see all items that have been requested (optional) (default to false)
          showPendingStatusOnly := show-pending-status-only=true // bool | Will limit records to items that are in \"suggested\" or \"approved\" status (optional) (default to false) # bool | Will limit records to items that are in \"suggested\" or \"approved\" status (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SuggestedEntitlementDescriptionAPI.ListSeds(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.SuggestedEntitlementDescriptionAPI.ListSeds(context.Background()).Limit(limit).Offset(offset).Count(count).Filters(filters).Sorters(sorters).CountOnly(countOnly).RequestedByAnyone(requestedByAnyone).ShowPendingStatusOnly(showPendingStatusOnly).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SuggestedEntitlementDescriptionAPI.ListSeds``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListSeds`: []Sed
          fmt.Fprintf(os.Stdout, "Response from `SuggestedEntitlementDescriptionAPI.ListSeds`: %v\n", resp)
        }
- path: /suggested-entitlement-descriptions
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/suggested-entitlement-description#patch-sed
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ebab396f-0af1-4050-89b7-dafc63ec70e7` // string | id is sed id # string | id is sed id
          sedpatch := []byte(``) // []SedPatch | Sed Patch Request

          
          var sedPatch []v2025.SedPatch
          if err := json.Unmarshal(sedpatch, &sedPatch); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SuggestedEntitlementDescriptionAPI.PatchSed(context.Background(), id).SedPatch(sedPatch).Execute()
          //resp, r, err := apiClient.V2025.SuggestedEntitlementDescriptionAPI.PatchSed(context.Background(), id).SedPatch(sedPatch).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SuggestedEntitlementDescriptionAPI.PatchSed``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchSed`: Sed
          fmt.Fprintf(os.Stdout, "Response from `SuggestedEntitlementDescriptionAPI.PatchSed`: %v\n", resp)
        }
- path: /suggested-entitlement-description-approvals
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/suggested-entitlement-description#submit-sed-approval
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          sedapproval := []byte(``) // []SedApproval | Sed Approval

          
          var sedApproval []v2025.SedApproval
          if err := json.Unmarshal(sedapproval, &sedApproval); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SuggestedEntitlementDescriptionAPI.SubmitSedApproval(context.Background()).SedApproval(sedApproval).Execute()
          //resp, r, err := apiClient.V2025.SuggestedEntitlementDescriptionAPI.SubmitSedApproval(context.Background()).SedApproval(sedApproval).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SuggestedEntitlementDescriptionAPI.SubmitSedApproval``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SubmitSedApproval`: []SedApprovalStatus
          fmt.Fprintf(os.Stdout, "Response from `SuggestedEntitlementDescriptionAPI.SubmitSedApproval`: %v\n", resp)
        }
- path: /suggested-entitlement-description-assignments
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/suggested-entitlement-description#submit-sed-assignment
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           sedassignment := []byte(`{
          "assignee" : {
            "type" : "SOURCE_OWNER",
            "value" : "016629d1-1d25-463f-97f3-c6686846650"
          },
          "items" : [ "016629d1-1d25-463f-97f3-0c6686846650", "016629d1-1d25-463f-97f3-0c6686846650" ]
        }`) // SedAssignment | Sed Assignment Request

          
          var sedAssignment v2025.SedAssignment
          if err := json.Unmarshal(sedassignment, &sedAssignment); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SuggestedEntitlementDescriptionAPI.SubmitSedAssignment(context.Background()).SedAssignment(sedAssignment).Execute()
          //resp, r, err := apiClient.V2025.SuggestedEntitlementDescriptionAPI.SubmitSedAssignment(context.Background()).SedAssignment(sedAssignment).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SuggestedEntitlementDescriptionAPI.SubmitSedAssignment``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SubmitSedAssignment`: SedAssignmentResponse
          fmt.Fprintf(os.Stdout, "Response from `SuggestedEntitlementDescriptionAPI.SubmitSedAssignment`: %v\n", resp)
        }
- path: /suggested-entitlement-description-batches
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/suggested-entitlement-description#submit-sed-batch-request
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           sedbatchrequest := []byte(`{
          "entitlements" : [ "016629d1-1d25-463f-97f3-c6686846650", "016629d1-1d25-463f-97f3-c6686846650" ],
          "seds" : [ "016629d1-1d25-463f-97f3-c6686846650", "016629d1-1d25-463f-97f3-c6686846650" ],
          "searchCriteria" : {
            "key" : {
              "indices" : [ "entitlements" ],
              "query" : {
                "query" : "status:active"
              },
              "textQuery" : {
                "terms" : [ "admin", "user" ],
                "matchAny" : true,
                "fields" : [ "role", "name" ]
              },
              "searchAfter" : [ "12345", "67890" ],
              "filters" : {
                "status" : {
                  "type" : "TERMS",
                  "terms" : [ "active", "inactive" ]
                }
              },
              "sort" : [ "name:asc", "createdAt:desc" ],
              "queryType" : "TEXT",
              "includeNested" : true
            }
          }
        }`) // SedBatchRequest | Sed Batch Request (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.SuggestedEntitlementDescriptionAPI.SubmitSedBatchRequest(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.SuggestedEntitlementDescriptionAPI.SubmitSedBatchRequest(context.Background()).SedBatchRequest(sedBatchRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `SuggestedEntitlementDescriptionAPI.SubmitSedBatchRequest``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SubmitSedBatchRequest`: SedBatchResponse
          fmt.Fprintf(os.Stdout, "Response from `SuggestedEntitlementDescriptionAPI.SubmitSedBatchRequest`: %v\n", resp)
        }
- path: /tagged-objects/{type}/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/tagged-objects#delete-tagged-object
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          type_ := `ROLE` // string | The type of object to delete tags from. # string | The type of object to delete tags from.
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The ID of the object to delete tags from. # string | The ID of the object to delete tags from.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.TaggedObjectsAPI.DeleteTaggedObject(context.Background(), type_, id).Execute()
          //r, err := apiClient.V2025.TaggedObjectsAPI.DeleteTaggedObject(context.Background(), type_, id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `TaggedObjectsAPI.DeleteTaggedObject``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /tagged-objects/bulk-remove
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/tagged-objects#delete-tags-to-many-object
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           bulkremovetaggedobject := []byte(`{
          "objectRefs" : [ {
            "name" : "William Wilson",
            "id" : "2c91808568c529c60168cca6f90c1313",
            "type" : "IDENTITY"
          }, {
            "name" : "William Wilson",
            "id" : "2c91808568c529c60168cca6f90c1313",
            "type" : "IDENTITY"
          } ],
          "tags" : [ "BU_FINANCE", "PCI" ]
        }`) // BulkRemoveTaggedObject | Supported object types are ACCESS_PROFILE, APPLICATION, CAMPAIGN, ENTITLEMENT, IDENTITY, ROLE, SOD_POLICY, SOURCE.

          
          var bulkRemoveTaggedObject v2025.BulkRemoveTaggedObject
          if err := json.Unmarshal(bulkremovetaggedobject, &bulkRemoveTaggedObject); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.TaggedObjectsAPI.DeleteTagsToManyObject(context.Background()).BulkRemoveTaggedObject(bulkRemoveTaggedObject).Execute()
          //r, err := apiClient.V2025.TaggedObjectsAPI.DeleteTagsToManyObject(context.Background()).BulkRemoveTaggedObject(bulkRemoveTaggedObject).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `TaggedObjectsAPI.DeleteTagsToManyObject``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /tagged-objects/{type}/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/tagged-objects#get-tagged-object
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          type_ := `ROLE` // string | The type of tagged object to retrieve. # string | The type of tagged object to retrieve.
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The ID of the object reference to retrieve. # string | The ID of the object reference to retrieve.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.TaggedObjectsAPI.GetTaggedObject(context.Background(), type_, id).Execute()
          //resp, r, err := apiClient.V2025.TaggedObjectsAPI.GetTaggedObject(context.Background(), type_, id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `TaggedObjectsAPI.GetTaggedObject``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetTaggedObject`: TaggedObject
          fmt.Fprintf(os.Stdout, "Response from `TaggedObjectsAPI.GetTaggedObject`: %v\n", resp)
        }
- path: /tagged-objects
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/tagged-objects#list-tagged-objects
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `tagName eq "BU_FINANCE"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **objectRef.id**: *eq, in*  **objectRef.type**: *eq, in*  **tagName**: *eq, in* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **objectRef.id**: *eq, in*  **objectRef.type**: *eq, in*  **tagName**: *eq, in* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.TaggedObjectsAPI.ListTaggedObjects(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.TaggedObjectsAPI.ListTaggedObjects(context.Background()).Limit(limit).Offset(offset).Count(count).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `TaggedObjectsAPI.ListTaggedObjects``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListTaggedObjects`: []TaggedObject
          fmt.Fprintf(os.Stdout, "Response from `TaggedObjectsAPI.ListTaggedObjects`: %v\n", resp)
        }
- path: /tagged-objects/{type}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/tagged-objects#list-tagged-objects-by-type
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          type_ := `ROLE` // string | The type of tagged object to retrieve. # string | The type of tagged object to retrieve.
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `objectRef.id eq "2c91808568c529c60168cca6f90c1313"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **objectRef.id**: *eq*  **objectRef.type**: *eq* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **objectRef.id**: *eq*  **objectRef.type**: *eq* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.TaggedObjectsAPI.ListTaggedObjectsByType(context.Background(), type_).Execute()
          //resp, r, err := apiClient.V2025.TaggedObjectsAPI.ListTaggedObjectsByType(context.Background(), type_).Limit(limit).Offset(offset).Count(count).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `TaggedObjectsAPI.ListTaggedObjectsByType``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListTaggedObjectsByType`: []TaggedObject
          fmt.Fprintf(os.Stdout, "Response from `TaggedObjectsAPI.ListTaggedObjectsByType`: %v\n", resp)
        }
- path: /tagged-objects/{type}/{id}
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/tagged-objects#put-tagged-object
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          type_ := `ROLE` // string | The type of tagged object to update. # string | The type of tagged object to update.
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The ID of the object reference to update. # string | The ID of the object reference to update.
           taggedobject := []byte(`{
          "objectRef" : {
            "name" : "William Wilson",
            "id" : "2c91808568c529c60168cca6f90c1313",
            "type" : "IDENTITY"
          },
          "tags" : [ "BU_FINANCE", "PCI" ]
        }`) // TaggedObject | 

          
          var taggedObject v2025.TaggedObject
          if err := json.Unmarshal(taggedobject, &taggedObject); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.TaggedObjectsAPI.PutTaggedObject(context.Background(), type_, id).TaggedObject(taggedObject).Execute()
          //resp, r, err := apiClient.V2025.TaggedObjectsAPI.PutTaggedObject(context.Background(), type_, id).TaggedObject(taggedObject).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `TaggedObjectsAPI.PutTaggedObject``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PutTaggedObject`: TaggedObject
          fmt.Fprintf(os.Stdout, "Response from `TaggedObjectsAPI.PutTaggedObject`: %v\n", resp)
        }
- path: /tagged-objects
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/tagged-objects#set-tag-to-object
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           taggedobject := []byte(`{
          "objectRef" : {
            "name" : "William Wilson",
            "id" : "2c91808568c529c60168cca6f90c1313",
            "type" : "IDENTITY"
          },
          "tags" : [ "BU_FINANCE", "PCI" ]
        }`) // TaggedObject | 

          
          var taggedObject v2025.TaggedObject
          if err := json.Unmarshal(taggedobject, &taggedObject); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.TaggedObjectsAPI.SetTagToObject(context.Background()).TaggedObject(taggedObject).Execute()
          //r, err := apiClient.V2025.TaggedObjectsAPI.SetTagToObject(context.Background()).TaggedObject(taggedObject).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `TaggedObjectsAPI.SetTagToObject``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /tagged-objects/bulk-add
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/tagged-objects#set-tags-to-many-objects
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           bulkaddtaggedobject := []byte(`{
          "objectRefs" : [ {
            "name" : "William Wilson",
            "id" : "2c91808568c529c60168cca6f90c1313",
            "type" : "IDENTITY"
          }, {
            "name" : "William Wilson",
            "id" : "2c91808568c529c60168cca6f90c1313",
            "type" : "IDENTITY"
          } ],
          "operation" : "MERGE",
          "tags" : [ "BU_FINANCE", "PCI" ]
        }`) // BulkAddTaggedObject | Supported object types are ACCESS_PROFILE, APPLICATION, CAMPAIGN, ENTITLEMENT, IDENTITY, ROLE, SOD_POLICY, SOURCE.

          
          var bulkAddTaggedObject v2025.BulkAddTaggedObject
          if err := json.Unmarshal(bulkaddtaggedobject, &bulkAddTaggedObject); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.TaggedObjectsAPI.SetTagsToManyObjects(context.Background()).BulkAddTaggedObject(bulkAddTaggedObject).Execute()
          //resp, r, err := apiClient.V2025.TaggedObjectsAPI.SetTagsToManyObjects(context.Background()).BulkAddTaggedObject(bulkAddTaggedObject).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `TaggedObjectsAPI.SetTagsToManyObjects``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SetTagsToManyObjects`: []BulkTaggedObjectResponse
          fmt.Fprintf(os.Stdout, "Response from `TaggedObjectsAPI.SetTagsToManyObjects`: %v\n", resp)
        }
- path: /task-status/pending-tasks
  method: Head
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/task-management#get-pending-task-headers
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.TaskManagementAPI.GetPendingTaskHeaders(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //r, err := apiClient.V2025.TaskManagementAPI.GetPendingTaskHeaders(context.Background()).XSailPointExperimental(xSailPointExperimental).Offset(offset).Limit(limit).Count(count).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `TaskManagementAPI.GetPendingTaskHeaders``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /task-status/pending-tasks
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/task-management#get-pending-tasks
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.TaskManagementAPI.GetPendingTasks(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.TaskManagementAPI.GetPendingTasks(context.Background()).XSailPointExperimental(xSailPointExperimental).Offset(offset).Limit(limit).Count(count).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `TaskManagementAPI.GetPendingTasks``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetPendingTasks`: []TaskStatus
          fmt.Fprintf(os.Stdout, "Response from `TaskManagementAPI.GetPendingTasks`: %v\n", resp)
        }
- path: /task-status/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/task-management#get-task-status
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `00eebcf881994e419d72e757fd30dc0e` // string | Task ID. # string | Task ID.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.TaskManagementAPI.GetTaskStatus(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.TaskManagementAPI.GetTaskStatus(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `TaskManagementAPI.GetTaskStatus``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetTaskStatus`: TaskStatus
          fmt.Fprintf(os.Stdout, "Response from `TaskManagementAPI.GetTaskStatus`: %v\n", resp)
        }
- path: /task-status
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/task-management#get-task-status-list
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `completionStatus eq "Success"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **sourceId**: *eq, in*  **completionStatus**: *eq, in*  **type**: *eq, in* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **sourceId**: *eq, in*  **completionStatus**: *eq, in*  **type**: *eq, in* (optional)
          sorters := `-created` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.TaskManagementAPI.GetTaskStatusList(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.TaskManagementAPI.GetTaskStatusList(context.Background()).XSailPointExperimental(xSailPointExperimental).Limit(limit).Offset(offset).Count(count).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `TaskManagementAPI.GetTaskStatusList``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetTaskStatusList`: []TaskStatus
          fmt.Fprintf(os.Stdout, "Response from `TaskManagementAPI.GetTaskStatusList`: %v\n", resp)
        }
- path: /task-status/{id}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/task-management#update-task-status
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `00eebcf881994e419d72e757fd30dc0e` // string | Task ID. # string | Task ID.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          jsonpatchoperation := []byte(``) // []JsonPatchOperation | The JSONPatch payload used to update the object.

          
          var jsonPatchOperation []v2025.JsonPatchOperation
          if err := json.Unmarshal(jsonpatchoperation, &jsonPatchOperation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.TaskManagementAPI.UpdateTaskStatus(context.Background(), id).XSailPointExperimental(xSailPointExperimental).JsonPatchOperation(jsonPatchOperation).Execute()
          //resp, r, err := apiClient.V2025.TaskManagementAPI.UpdateTaskStatus(context.Background(), id).XSailPointExperimental(xSailPointExperimental).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `TaskManagementAPI.UpdateTaskStatus``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateTaskStatus`: TaskStatus
          fmt.Fprintf(os.Stdout, "Response from `TaskManagementAPI.UpdateTaskStatus`: %v\n", resp)
        }
- path: /tenant
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/tenant#get-tenant
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.TenantAPI.GetTenant(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.TenantAPI.GetTenant(context.Background()).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `TenantAPI.GetTenant``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetTenant`: Tenant
          fmt.Fprintf(os.Stdout, "Response from `TenantAPI.GetTenant`: %v\n", resp)
        }
- path: /tenant-context
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/tenant-context#get-tenant-context
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.TenantContextAPI.GetTenantContext(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.TenantContextAPI.GetTenantContext(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `TenantContextAPI.GetTenantContext``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetTenantContext`: []GetTenantContext200ResponseInner
          fmt.Fprintf(os.Stdout, "Response from `TenantContextAPI.GetTenantContext`: %v\n", resp)
        }
- path: /tenant-context
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/tenant-context#patch-tenant-context
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           jsonpatchoperation := []byte(`{
          "op" : "replace",
          "path" : "/description",
          "value" : "New description"
        }`) // JsonPatchOperation | 

          
          var jsonPatchOperation v2025.JsonPatchOperation
          if err := json.Unmarshal(jsonpatchoperation, &jsonPatchOperation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.TenantContextAPI.PatchTenantContext(context.Background()).XSailPointExperimental(xSailPointExperimental).JsonPatchOperation(jsonPatchOperation).Execute()
          //r, err := apiClient.V2025.TenantContextAPI.PatchTenantContext(context.Background()).XSailPointExperimental(xSailPointExperimental).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `TenantContextAPI.PatchTenantContext``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /transforms
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/transforms#create-transform
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           transform := []byte(`{
          "name" : "Timestamp To Date",
          "attributes" : "{}",
          "type" : "dateFormat"
        }`) // Transform | The transform to be created.

          
          var transform v2025.Transform
          if err := json.Unmarshal(transform, &transform); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.TransformsAPI.CreateTransform(context.Background()).Transform(transform).Execute()
          //resp, r, err := apiClient.V2025.TransformsAPI.CreateTransform(context.Background()).Transform(transform).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `TransformsAPI.CreateTransform``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateTransform`: TransformRead
          fmt.Fprintf(os.Stdout, "Response from `TransformsAPI.CreateTransform`: %v\n", resp)
        }
- path: /transforms/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/transforms#delete-transform
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2cd78adghjkja34jh2b1hkjhasuecd` // string | ID of the transform to delete # string | ID of the transform to delete

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.TransformsAPI.DeleteTransform(context.Background(), id).Execute()
          //r, err := apiClient.V2025.TransformsAPI.DeleteTransform(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `TransformsAPI.DeleteTransform``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /transforms/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/transforms#get-transform
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2cd78adghjkja34jh2b1hkjhasuecd` // string | ID of the transform to retrieve # string | ID of the transform to retrieve

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.TransformsAPI.GetTransform(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.TransformsAPI.GetTransform(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `TransformsAPI.GetTransform``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetTransform`: TransformRead
          fmt.Fprintf(os.Stdout, "Response from `TransformsAPI.GetTransform`: %v\n", resp)
        }
- path: /transforms
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/transforms#list-transforms
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          name := `ExampleTransformName123` // string | Name of the transform to retrieve from the list. (optional) # string | Name of the transform to retrieve from the list. (optional)
          filters := `name eq "Uppercase"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **internal**: *eq*  **name**: *eq, sw* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **internal**: *eq*  **name**: *eq, sw* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.TransformsAPI.ListTransforms(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.TransformsAPI.ListTransforms(context.Background()).Offset(offset).Limit(limit).Count(count).Name(name).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `TransformsAPI.ListTransforms``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListTransforms`: []TransformRead
          fmt.Fprintf(os.Stdout, "Response from `TransformsAPI.ListTransforms`: %v\n", resp)
        }
- path: /transforms/{id}
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/transforms#update-transform
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2cd78adghjkja34jh2b1hkjhasuecd` // string | ID of the transform to update # string | ID of the transform to update
           transform := []byte(`{
          "name" : "Timestamp To Date",
          "attributes" : "{}",
          "type" : "dateFormat"
        }`) // Transform | The updated transform object. Must include \"name\", \"type\", and \"attributes\" fields, but \"name\" and \"type\" must not be modified. (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.TransformsAPI.UpdateTransform(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.TransformsAPI.UpdateTransform(context.Background(), id).Transform(transform).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `TransformsAPI.UpdateTransform``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateTransform`: TransformRead
          fmt.Fprintf(os.Stdout, "Response from `TransformsAPI.UpdateTransform`: %v\n", resp)
        }
- path: /trigger-invocations/{id}/complete
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/triggers#complete-trigger-invocation
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `0f11f2a4-7c94-4bf3-a2bd-742580fe3bde` // string | The ID of the invocation to complete. # string | The ID of the invocation to complete.
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           completeinvocation := []byte(`{
          "output" : {
            "approved" : false
          },
          "secret" : "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
          "error" : "Access request is denied."
        }`) // CompleteInvocation | 

          
          var completeInvocation v2025.CompleteInvocation
          if err := json.Unmarshal(completeinvocation, &completeInvocation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.TriggersAPI.CompleteTriggerInvocation(context.Background(), id).XSailPointExperimental(xSailPointExperimental).CompleteInvocation(completeInvocation).Execute()
          //r, err := apiClient.V2025.TriggersAPI.CompleteTriggerInvocation(context.Background(), id).XSailPointExperimental(xSailPointExperimental).CompleteInvocation(completeInvocation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `TriggersAPI.CompleteTriggerInvocation``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /trigger-subscriptions
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/triggers#create-subscription
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           subscriptionpostrequest := []byte(`{
          "filter" : "$[?($.identityId == \"201327fda1c44704ac01181e963d463c\")]",
          "httpConfig" : {
            "bearerTokenAuthConfig" : {
              "bearerToken" : "bearerToken"
            },
            "httpAuthenticationType" : "BASIC_AUTH",
            "httpDispatchMode" : "SYNC",
            "basicAuthConfig" : {
              "password" : "password",
              "userName" : "user@example.com"
            },
            "url" : "https://www.example.com"
          },
          "triggerId" : "idn:access-requested",
          "name" : "Access request subscription",
          "description" : "Access requested to site xyz",
          "eventBridgeConfig" : {
            "awsRegion" : "us-west-1",
            "awsAccount" : "123456789012"
          },
          "responseDeadline" : "PT1H",
          "type" : "HTTP",
          "enabled" : true
        }`) // SubscriptionPostRequest | 

          
          var subscriptionPostRequest v2025.SubscriptionPostRequest
          if err := json.Unmarshal(subscriptionpostrequest, &subscriptionPostRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.TriggersAPI.CreateSubscription(context.Background()).XSailPointExperimental(xSailPointExperimental).SubscriptionPostRequest(subscriptionPostRequest).Execute()
          //resp, r, err := apiClient.V2025.TriggersAPI.CreateSubscription(context.Background()).XSailPointExperimental(xSailPointExperimental).SubscriptionPostRequest(subscriptionPostRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `TriggersAPI.CreateSubscription``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateSubscription`: Subscription
          fmt.Fprintf(os.Stdout, "Response from `TriggersAPI.CreateSubscription`: %v\n", resp)
        }
- path: /trigger-subscriptions/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/triggers#delete-subscription
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `0f11f2a4-7c94-4bf3-a2bd-742580fe3bde` // string | Subscription ID # string | Subscription ID
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.TriggersAPI.DeleteSubscription(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          //r, err := apiClient.V2025.TriggersAPI.DeleteSubscription(context.Background(), id).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `TriggersAPI.DeleteSubscription``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /trigger-subscriptions
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/triggers#list-subscriptions
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `id eq "12cff757-c0c0-413b-8ad7-2a47956d1e89"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*  **triggerId**: *eq*  **type**: *eq, le* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*  **triggerId**: *eq*  **type**: *eq, le* (optional)
          sorters := `triggerName` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **triggerId, triggerName** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **triggerId, triggerName** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.TriggersAPI.ListSubscriptions(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.TriggersAPI.ListSubscriptions(context.Background()).XSailPointExperimental(xSailPointExperimental).Limit(limit).Offset(offset).Count(count).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `TriggersAPI.ListSubscriptions``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListSubscriptions`: []Subscription
          fmt.Fprintf(os.Stdout, "Response from `TriggersAPI.ListSubscriptions`: %v\n", resp)
        }
- path: /trigger-invocations/status
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/triggers#list-trigger-invocation-status
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `triggerId eq "idn:access-request-dynamic-approver"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **triggerId**: *eq*  **subscriptionId**: *eq* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **triggerId**: *eq*  **subscriptionId**: *eq* (optional)
          sorters := `created` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **triggerId, subscriptionName, created, completed** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **triggerId, subscriptionName, created, completed** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.TriggersAPI.ListTriggerInvocationStatus(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.TriggersAPI.ListTriggerInvocationStatus(context.Background()).XSailPointExperimental(xSailPointExperimental).Limit(limit).Offset(offset).Count(count).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `TriggersAPI.ListTriggerInvocationStatus``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListTriggerInvocationStatus`: []InvocationStatus
          fmt.Fprintf(os.Stdout, "Response from `TriggersAPI.ListTriggerInvocationStatus`: %v\n", resp)
        }
- path: /triggers
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/triggers#list-triggers
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          filters := `id eq "idn:access-request-post-approval"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ge, le* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ge, le* (optional)
          sorters := `name` // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name** (optional) # string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name** (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.TriggersAPI.ListTriggers(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.TriggersAPI.ListTriggers(context.Background()).XSailPointExperimental(xSailPointExperimental).Limit(limit).Offset(offset).Count(count).Filters(filters).Sorters(sorters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `TriggersAPI.ListTriggers``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListTriggers`: []Trigger
          fmt.Fprintf(os.Stdout, "Response from `TriggersAPI.ListTriggers`: %v\n", resp)
        }
- path: /trigger-subscriptions/{id}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/triggers#patch-subscription
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `0f11f2a4-7c94-4bf3-a2bd-742580fe3bde` // string | ID of the Subscription to patch # string | ID of the Subscription to patch
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          subscriptionpatchrequestinner := []byte(``) // []SubscriptionPatchRequestInner | 

          
          var subscriptionPatchRequestInner []v2025.SubscriptionPatchRequestInner
          if err := json.Unmarshal(subscriptionpatchrequestinner, &subscriptionPatchRequestInner); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.TriggersAPI.PatchSubscription(context.Background(), id).XSailPointExperimental(xSailPointExperimental).SubscriptionPatchRequestInner(subscriptionPatchRequestInner).Execute()
          //resp, r, err := apiClient.V2025.TriggersAPI.PatchSubscription(context.Background(), id).XSailPointExperimental(xSailPointExperimental).SubscriptionPatchRequestInner(subscriptionPatchRequestInner).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `TriggersAPI.PatchSubscription``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchSubscription`: Subscription
          fmt.Fprintf(os.Stdout, "Response from `TriggersAPI.PatchSubscription`: %v\n", resp)
        }
- path: /trigger-invocations/test
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/triggers#start-test-trigger-invocation
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           testinvocation := []byte(`{
          "input" : {
            "identityId" : "201327fda1c44704ac01181e963d463c"
          },
          "subscriptionIds" : [ "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde" ],
          "triggerId" : "idn:access-request-post-approval",
          "contentJson" : {
            "workflowId" : 1234
          }
        }`) // TestInvocation | 

          
          var testInvocation v2025.TestInvocation
          if err := json.Unmarshal(testinvocation, &testInvocation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.TriggersAPI.StartTestTriggerInvocation(context.Background()).XSailPointExperimental(xSailPointExperimental).TestInvocation(testInvocation).Execute()
          //resp, r, err := apiClient.V2025.TriggersAPI.StartTestTriggerInvocation(context.Background()).XSailPointExperimental(xSailPointExperimental).TestInvocation(testInvocation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `TriggersAPI.StartTestTriggerInvocation``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `StartTestTriggerInvocation`: []Invocation
          fmt.Fprintf(os.Stdout, "Response from `TriggersAPI.StartTestTriggerInvocation`: %v\n", resp)
        }
- path: /trigger-subscriptions/validate-filter
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/triggers#test-subscription-filter
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           validatefilterinputdto := []byte(`{
          "filter" : "$[?($.identityId == \"201327fda1c44704ac01181e963d463c\")]",
          "input" : {
            "identityId" : "201327fda1c44704ac01181e963d463c"
          }
        }`) // ValidateFilterInputDto | 

          
          var validateFilterInputDto v2025.ValidateFilterInputDto
          if err := json.Unmarshal(validatefilterinputdto, &validateFilterInputDto); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.TriggersAPI.TestSubscriptionFilter(context.Background()).XSailPointExperimental(xSailPointExperimental).ValidateFilterInputDto(validateFilterInputDto).Execute()
          //resp, r, err := apiClient.V2025.TriggersAPI.TestSubscriptionFilter(context.Background()).XSailPointExperimental(xSailPointExperimental).ValidateFilterInputDto(validateFilterInputDto).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `TriggersAPI.TestSubscriptionFilter``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `TestSubscriptionFilter`: ValidateFilterOutputDto
          fmt.Fprintf(os.Stdout, "Response from `TriggersAPI.TestSubscriptionFilter`: %v\n", resp)
        }
- path: /trigger-subscriptions/{id}
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/triggers#update-subscription
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `0f11f2a4-7c94-4bf3-a2bd-742580fe3bde` // string | Subscription ID # string | Subscription ID
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           subscriptionputrequest := []byte(`{
          "filter" : "$[?($.identityId == \"201327fda1c44704ac01181e963d463c\")]",
          "httpConfig" : {
            "bearerTokenAuthConfig" : {
              "bearerToken" : "bearerToken"
            },
            "httpAuthenticationType" : "BASIC_AUTH",
            "httpDispatchMode" : "SYNC",
            "basicAuthConfig" : {
              "password" : "password",
              "userName" : "user@example.com"
            },
            "url" : "https://www.example.com"
          },
          "name" : "Access request subscription",
          "description" : "Access requested to site xyz",
          "eventBridgeConfig" : {
            "awsRegion" : "us-west-1",
            "awsAccount" : "123456789012"
          },
          "responseDeadline" : "PT1H",
          "type" : "HTTP",
          "enabled" : true
        }`) // SubscriptionPutRequest | 

          
          var subscriptionPutRequest v2025.SubscriptionPutRequest
          if err := json.Unmarshal(subscriptionputrequest, &subscriptionPutRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.TriggersAPI.UpdateSubscription(context.Background(), id).XSailPointExperimental(xSailPointExperimental).SubscriptionPutRequest(subscriptionPutRequest).Execute()
          //resp, r, err := apiClient.V2025.TriggersAPI.UpdateSubscription(context.Background(), id).XSailPointExperimental(xSailPointExperimental).SubscriptionPutRequest(subscriptionPutRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `TriggersAPI.UpdateSubscription``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `UpdateSubscription`: Subscription
          fmt.Fprintf(os.Stdout, "Response from `TriggersAPI.UpdateSubscription`: %v\n", resp)
        }
- path: /ui-metadata/tenant
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/ui-metadata#get-tenant-ui-metadata
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.UIMetadataAPI.GetTenantUiMetadata(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.UIMetadataAPI.GetTenantUiMetadata(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `UIMetadataAPI.GetTenantUiMetadata``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetTenantUiMetadata`: TenantUiMetadataItemResponse
          fmt.Fprintf(os.Stdout, "Response from `UIMetadataAPI.GetTenantUiMetadata`: %v\n", resp)
        }
- path: /ui-metadata/tenant
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/ui-metadata#set-tenant-ui-metadata
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           tenantuimetadataitemupdaterequest := []byte(`{
          "usernameEmptyText" : "Please provide your work email address...",
          "usernameLabel" : "Email",
          "iframeWhiteList" : "http://example.com http://example2.com"
        }`) // TenantUiMetadataItemUpdateRequest | 

          
          var tenantUiMetadataItemUpdateRequest v2025.TenantUiMetadataItemUpdateRequest
          if err := json.Unmarshal(tenantuimetadataitemupdaterequest, &tenantUiMetadataItemUpdateRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.UIMetadataAPI.SetTenantUiMetadata(context.Background()).XSailPointExperimental(xSailPointExperimental).TenantUiMetadataItemUpdateRequest(tenantUiMetadataItemUpdateRequest).Execute()
          //resp, r, err := apiClient.V2025.UIMetadataAPI.SetTenantUiMetadata(context.Background()).XSailPointExperimental(xSailPointExperimental).TenantUiMetadataItemUpdateRequest(tenantUiMetadataItemUpdateRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `UIMetadataAPI.SetTenantUiMetadata``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SetTenantUiMetadata`: TenantUiMetadataItemResponse
          fmt.Fprintf(os.Stdout, "Response from `UIMetadataAPI.SetTenantUiMetadata`: %v\n", resp)
        }
- path: /vendor-connector-mappings
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/vendor-connector-mappings#create-vendor-connector-mapping
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           vendorconnectormapping := []byte(`{
          "createdAt" : "2024-03-13T12:56:19.391294Z",
          "deletedAt" : {
            "Valid" : false,
            "Time" : "0001-01-01T00:00:00Z"
          },
          "updatedBy" : {
            "Valid" : true,
            "String" : "user-67891"
          },
          "connector" : "Example connector",
          "createdBy" : "admin",
          "vendor" : "Example vendor",
          "id" : "78733556-9ea3-4f59-bf69-e5cd92b011b4",
          "deletedBy" : {
            "Valid" : false,
            "String" : ""
          },
          "updatedAt" : {
            "Valid" : true,
            "Time" : "2024-03-14T12:56:19.391294Z"
          }
        }`) // VendorConnectorMapping | 

          
          var vendorConnectorMapping v2025.VendorConnectorMapping
          if err := json.Unmarshal(vendorconnectormapping, &vendorConnectorMapping); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.VendorConnectorMappingsAPI.CreateVendorConnectorMapping(context.Background()).VendorConnectorMapping(vendorConnectorMapping).Execute()
          //resp, r, err := apiClient.V2025.VendorConnectorMappingsAPI.CreateVendorConnectorMapping(context.Background()).VendorConnectorMapping(vendorConnectorMapping).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `VendorConnectorMappingsAPI.CreateVendorConnectorMapping``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateVendorConnectorMapping`: VendorConnectorMapping
          fmt.Fprintf(os.Stdout, "Response from `VendorConnectorMappingsAPI.CreateVendorConnectorMapping`: %v\n", resp)
        }
- path: /vendor-connector-mappings
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/vendor-connector-mappings#delete-vendor-connector-mapping
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           vendorconnectormapping := []byte(`{
          "createdAt" : "2024-03-13T12:56:19.391294Z",
          "deletedAt" : {
            "Valid" : false,
            "Time" : "0001-01-01T00:00:00Z"
          },
          "updatedBy" : {
            "Valid" : true,
            "String" : "user-67891"
          },
          "connector" : "Example connector",
          "createdBy" : "admin",
          "vendor" : "Example vendor",
          "id" : "78733556-9ea3-4f59-bf69-e5cd92b011b4",
          "deletedBy" : {
            "Valid" : false,
            "String" : ""
          },
          "updatedAt" : {
            "Valid" : true,
            "Time" : "2024-03-14T12:56:19.391294Z"
          }
        }`) // VendorConnectorMapping | 

          
          var vendorConnectorMapping v2025.VendorConnectorMapping
          if err := json.Unmarshal(vendorconnectormapping, &vendorConnectorMapping); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.VendorConnectorMappingsAPI.DeleteVendorConnectorMapping(context.Background()).VendorConnectorMapping(vendorConnectorMapping).Execute()
          //resp, r, err := apiClient.V2025.VendorConnectorMappingsAPI.DeleteVendorConnectorMapping(context.Background()).VendorConnectorMapping(vendorConnectorMapping).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `VendorConnectorMappingsAPI.DeleteVendorConnectorMapping``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `DeleteVendorConnectorMapping`: DeleteVendorConnectorMapping200Response
          fmt.Fprintf(os.Stdout, "Response from `VendorConnectorMappingsAPI.DeleteVendorConnectorMapping`: %v\n", resp)
        }
- path: /vendor-connector-mappings
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/vendor-connector-mappings#get-vendor-connector-mappings
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.VendorConnectorMappingsAPI.GetVendorConnectorMappings(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.VendorConnectorMappingsAPI.GetVendorConnectorMappings(context.Background()).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `VendorConnectorMappingsAPI.GetVendorConnectorMappings``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetVendorConnectorMappings`: []VendorConnectorMapping
          fmt.Fprintf(os.Stdout, "Response from `VendorConnectorMappingsAPI.GetVendorConnectorMappings`: %v\n", resp)
        }
- path: /work-items/{id}/approve/{approvalItemId}
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/work-items#approve-approval-item
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The ID of the work item # string | The ID of the work item
          approvalItemId := `1211bcaa32112bcef6122adb21cef1ac` // string | The ID of the approval item. # string | The ID of the approval item.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkItemsAPI.ApproveApprovalItem(context.Background(), id, approvalItemId).Execute()
          //resp, r, err := apiClient.V2025.WorkItemsAPI.ApproveApprovalItem(context.Background(), id, approvalItemId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkItemsAPI.ApproveApprovalItem``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ApproveApprovalItem`: WorkItems
          fmt.Fprintf(os.Stdout, "Response from `WorkItemsAPI.ApproveApprovalItem`: %v\n", resp)
        }
- path: /work-items/bulk-approve/{id}
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/work-items#approve-approval-items-in-bulk
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The ID of the work item # string | The ID of the work item

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkItemsAPI.ApproveApprovalItemsInBulk(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.WorkItemsAPI.ApproveApprovalItemsInBulk(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkItemsAPI.ApproveApprovalItemsInBulk``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ApproveApprovalItemsInBulk`: WorkItems
          fmt.Fprintf(os.Stdout, "Response from `WorkItemsAPI.ApproveApprovalItemsInBulk`: %v\n", resp)
        }
- path: /work-items/{id}
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/work-items#complete-work-item
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The ID of the work item # string | The ID of the work item
          body := `body_example` // string | Body is the request payload to create form definition request (optional) # string | Body is the request payload to create form definition request (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkItemsAPI.CompleteWorkItem(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.WorkItemsAPI.CompleteWorkItem(context.Background(), id).Body(body).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkItemsAPI.CompleteWorkItem``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CompleteWorkItem`: WorkItems
          fmt.Fprintf(os.Stdout, "Response from `WorkItemsAPI.CompleteWorkItem`: %v\n", resp)
        }
- path: /work-items/{id}/forward
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/work-items#forward-work-item
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The ID of the work item # string | The ID of the work item
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           workitemforward := []byte(`{
          "targetOwnerId" : "2c9180835d2e5168015d32f890ca1581",
          "comment" : "I'm going on vacation.",
          "sendNotifications" : true
        }`) // WorkItemForward | 

          
          var workItemForward v2025.WorkItemForward
          if err := json.Unmarshal(workitemforward, &workItemForward); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.WorkItemsAPI.ForwardWorkItem(context.Background(), id).XSailPointExperimental(xSailPointExperimental).WorkItemForward(workItemForward).Execute()
          //r, err := apiClient.V2025.WorkItemsAPI.ForwardWorkItem(context.Background(), id).XSailPointExperimental(xSailPointExperimental).WorkItemForward(workItemForward).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkItemsAPI.ForwardWorkItem``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /work-items/completed
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/work-items#get-completed-work-items
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          ownerId := `1211bcaa32112bcef6122adb21cef1ac` // string | The id of the owner of the work item list being requested.  Either an admin, or the owning/current user must make this request. (optional) # string | The id of the owner of the work item list being requested.  Either an admin, or the owning/current user must make this request. (optional)
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkItemsAPI.GetCompletedWorkItems(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.WorkItemsAPI.GetCompletedWorkItems(context.Background()).OwnerId(ownerId).Limit(limit).Offset(offset).Count(count).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkItemsAPI.GetCompletedWorkItems``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetCompletedWorkItems`: []WorkItems
          fmt.Fprintf(os.Stdout, "Response from `WorkItemsAPI.GetCompletedWorkItems`: %v\n", resp)
        }
- path: /work-items/completed/count
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/work-items#get-count-completed-work-items
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          ownerId := `ownerId_example` // string | ID of the work item owner. (optional) # string | ID of the work item owner. (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkItemsAPI.GetCountCompletedWorkItems(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.WorkItemsAPI.GetCountCompletedWorkItems(context.Background()).XSailPointExperimental(xSailPointExperimental).OwnerId(ownerId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkItemsAPI.GetCountCompletedWorkItems``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetCountCompletedWorkItems`: WorkItemsCount
          fmt.Fprintf(os.Stdout, "Response from `WorkItemsAPI.GetCountCompletedWorkItems`: %v\n", resp)
        }
- path: /work-items/count
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/work-items#get-count-work-items
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          ownerId := `ef38f94347e94562b5bb8424a56397d8` // string | ID of the work item owner. (optional) # string | ID of the work item owner. (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkItemsAPI.GetCountWorkItems(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.WorkItemsAPI.GetCountWorkItems(context.Background()).OwnerId(ownerId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkItemsAPI.GetCountWorkItems``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetCountWorkItems`: WorkItemsCount
          fmt.Fprintf(os.Stdout, "Response from `WorkItemsAPI.GetCountWorkItems`: %v\n", resp)
        }
- path: /work-items/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/work-items#get-work-item
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `2c9180835d191a86015d28455b4a2329` // string | ID of the work item. # string | ID of the work item.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkItemsAPI.GetWorkItem(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.WorkItemsAPI.GetWorkItem(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkItemsAPI.GetWorkItem``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetWorkItem`: WorkItems
          fmt.Fprintf(os.Stdout, "Response from `WorkItemsAPI.GetWorkItem`: %v\n", resp)
        }
- path: /work-items/summary
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/work-items#get-work-items-summary
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          ownerId := `1211bcaa32112bcef6122adb21cef1ac` // string | ID of the work item owner. (optional) # string | ID of the work item owner. (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkItemsAPI.GetWorkItemsSummary(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.WorkItemsAPI.GetWorkItemsSummary(context.Background()).OwnerId(ownerId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkItemsAPI.GetWorkItemsSummary``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetWorkItemsSummary`: WorkItemsSummary
          fmt.Fprintf(os.Stdout, "Response from `WorkItemsAPI.GetWorkItemsSummary`: %v\n", resp)
        }
- path: /work-items
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/work-items#list-work-items
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          count := true // bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to false)
          ownerId := `1211bcaa32112bcef6122adb21cef1ac` // string | ID of the work item owner. (optional) # string | ID of the work item owner. (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkItemsAPI.ListWorkItems(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.WorkItemsAPI.ListWorkItems(context.Background()).Limit(limit).Offset(offset).Count(count).OwnerId(ownerId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkItemsAPI.ListWorkItems``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListWorkItems`: []WorkItems
          fmt.Fprintf(os.Stdout, "Response from `WorkItemsAPI.ListWorkItems`: %v\n", resp)
        }
- path: /work-items/{id}/reject/{approvalItemId}
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/work-items#reject-approval-item
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The ID of the work item # string | The ID of the work item
          approvalItemId := `1211bcaa32112bcef6122adb21cef1ac` // string | The ID of the approval item. # string | The ID of the approval item.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkItemsAPI.RejectApprovalItem(context.Background(), id, approvalItemId).Execute()
          //resp, r, err := apiClient.V2025.WorkItemsAPI.RejectApprovalItem(context.Background(), id, approvalItemId).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkItemsAPI.RejectApprovalItem``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `RejectApprovalItem`: WorkItems
          fmt.Fprintf(os.Stdout, "Response from `WorkItemsAPI.RejectApprovalItem`: %v\n", resp)
        }
- path: /work-items/bulk-reject/{id}
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/work-items#reject-approval-items-in-bulk
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The ID of the work item # string | The ID of the work item

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkItemsAPI.RejectApprovalItemsInBulk(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.WorkItemsAPI.RejectApprovalItemsInBulk(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkItemsAPI.RejectApprovalItemsInBulk``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `RejectApprovalItemsInBulk`: WorkItems
          fmt.Fprintf(os.Stdout, "Response from `WorkItemsAPI.RejectApprovalItemsInBulk`: %v\n", resp)
        }
- path: /work-items/{id}/submit-account-selection
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/work-items#submit-account-selection
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `ef38f94347e94562b5bb8424a56397d8` // string | The ID of the work item # string | The ID of the work item
          requestBody := {fieldName=fieldValue} // map[string]interface{} | Account Selection Data map, keyed on fieldName # map[string]interface{} | Account Selection Data map, keyed on fieldName

          
          var requestBody v2025.RequestBody
          if err := json.Unmarshal(requestbody, &requestBody); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkItemsAPI.SubmitAccountSelection(context.Background(), id).RequestBody(requestBody).Execute()
          //resp, r, err := apiClient.V2025.WorkItemsAPI.SubmitAccountSelection(context.Background(), id).RequestBody(requestBody).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkItemsAPI.SubmitAccountSelection``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `SubmitAccountSelection`: WorkItems
          fmt.Fprintf(os.Stdout, "Response from `WorkItemsAPI.SubmitAccountSelection`: %v\n", resp)
        }
- path: /reassignment-configurations
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/work-reassignment#create-reassignment-configuration
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           configurationitemrequest := []byte(`{
          "endDate" : "2022-07-30T17:00:00Z",
          "reassignedFromId" : "2c91808781a71ddb0181b9090b5c504e",
          "configType" : "ACCESS_REQUESTS",
          "reassignedToId" : "2c91808781a71ddb0181b9090b53504a",
          "startDate" : "2022-07-21T11:13:12.345Z"
        }`) // ConfigurationItemRequest | 

          
          var configurationItemRequest v2025.ConfigurationItemRequest
          if err := json.Unmarshal(configurationitemrequest, &configurationItemRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkReassignmentAPI.CreateReassignmentConfiguration(context.Background()).XSailPointExperimental(xSailPointExperimental).ConfigurationItemRequest(configurationItemRequest).Execute()
          //resp, r, err := apiClient.V2025.WorkReassignmentAPI.CreateReassignmentConfiguration(context.Background()).XSailPointExperimental(xSailPointExperimental).ConfigurationItemRequest(configurationItemRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkReassignmentAPI.CreateReassignmentConfiguration``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateReassignmentConfiguration`: ConfigurationItemResponse
          fmt.Fprintf(os.Stdout, "Response from `WorkReassignmentAPI.CreateReassignmentConfiguration`: %v\n", resp)
        }
- path: /reassignment-configurations/{identityId}/{configType}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/work-reassignment#delete-reassignment-configuration
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          identityId := `2c91808781a71ddb0181b9090b5c504e` // string | unique identity id # string | unique identity id
          configType :=  // ConfigTypeEnum |  # ConfigTypeEnum | 
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.WorkReassignmentAPI.DeleteReassignmentConfiguration(context.Background(), identityId, configType).XSailPointExperimental(xSailPointExperimental).Execute()
          //r, err := apiClient.V2025.WorkReassignmentAPI.DeleteReassignmentConfiguration(context.Background(), identityId, configType).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkReassignmentAPI.DeleteReassignmentConfiguration``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /reassignment-configurations/{identityId}/evaluate/{configType}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/work-reassignment#get-evaluate-reassignment-configuration
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          identityId := `2c91808781a71ddb0181b9090b5c504e` // string | unique identity id # string | unique identity id
          configType := accessRequests // ConfigTypeEnum | Reassignment work type # ConfigTypeEnum | Reassignment work type
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
          exclusionfilters := []byte(`SELF_REVIEW_DELEGATION`) // []string | Exclusion filters that disable parts of the reassignment evaluation. Possible values are listed below: - `SELF_REVIEW_DELEGATION`: This will exclude delegations of self-review reassignments (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkReassignmentAPI.GetEvaluateReassignmentConfiguration(context.Background(), identityId, configType).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.WorkReassignmentAPI.GetEvaluateReassignmentConfiguration(context.Background(), identityId, configType).XSailPointExperimental(xSailPointExperimental).ExclusionFilters(exclusionFilters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkReassignmentAPI.GetEvaluateReassignmentConfiguration``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetEvaluateReassignmentConfiguration`: []EvaluateResponse
          fmt.Fprintf(os.Stdout, "Response from `WorkReassignmentAPI.GetEvaluateReassignmentConfiguration`: %v\n", resp)
        }
- path: /reassignment-configurations/types
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/work-reassignment#get-reassignment-config-types
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkReassignmentAPI.GetReassignmentConfigTypes(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.WorkReassignmentAPI.GetReassignmentConfigTypes(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkReassignmentAPI.GetReassignmentConfigTypes``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetReassignmentConfigTypes`: []ConfigType
          fmt.Fprintf(os.Stdout, "Response from `WorkReassignmentAPI.GetReassignmentConfigTypes`: %v\n", resp)
        }
- path: /reassignment-configurations/{identityId}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/work-reassignment#get-reassignment-configuration
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          identityId := `2c91808781a71ddb0181b9090b5c504f` // string | unique identity id # string | unique identity id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkReassignmentAPI.GetReassignmentConfiguration(context.Background(), identityId).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.WorkReassignmentAPI.GetReassignmentConfiguration(context.Background(), identityId).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkReassignmentAPI.GetReassignmentConfiguration``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetReassignmentConfiguration`: ConfigurationResponse
          fmt.Fprintf(os.Stdout, "Response from `WorkReassignmentAPI.GetReassignmentConfiguration`: %v\n", resp)
        }
- path: /reassignment-configurations/tenant-config
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/work-reassignment#get-tenant-config-configuration
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkReassignmentAPI.GetTenantConfigConfiguration(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.WorkReassignmentAPI.GetTenantConfigConfiguration(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkReassignmentAPI.GetTenantConfigConfiguration``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetTenantConfigConfiguration`: TenantConfigurationResponse
          fmt.Fprintf(os.Stdout, "Response from `WorkReassignmentAPI.GetTenantConfigConfiguration`: %v\n", resp)
        }
- path: /reassignment-configurations
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/work-reassignment#list-reassignment-configurations
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkReassignmentAPI.ListReassignmentConfigurations(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          //resp, r, err := apiClient.V2025.WorkReassignmentAPI.ListReassignmentConfigurations(context.Background()).XSailPointExperimental(xSailPointExperimental).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkReassignmentAPI.ListReassignmentConfigurations``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListReassignmentConfigurations`: []ConfigurationResponse
          fmt.Fprintf(os.Stdout, "Response from `WorkReassignmentAPI.ListReassignmentConfigurations`: %v\n", resp)
        }
- path: /reassignment-configurations/{identityId}
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/work-reassignment#put-reassignment-config
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          identityId := `2c91808781a71ddb0181b9090b5c504e` // string | unique identity id # string | unique identity id
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           configurationitemrequest := []byte(`{
          "endDate" : "2022-07-30T17:00:00Z",
          "reassignedFromId" : "2c91808781a71ddb0181b9090b5c504e",
          "configType" : "ACCESS_REQUESTS",
          "reassignedToId" : "2c91808781a71ddb0181b9090b53504a",
          "startDate" : "2022-07-21T11:13:12.345Z"
        }`) // ConfigurationItemRequest | 

          
          var configurationItemRequest v2025.ConfigurationItemRequest
          if err := json.Unmarshal(configurationitemrequest, &configurationItemRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkReassignmentAPI.PutReassignmentConfig(context.Background(), identityId).XSailPointExperimental(xSailPointExperimental).ConfigurationItemRequest(configurationItemRequest).Execute()
          //resp, r, err := apiClient.V2025.WorkReassignmentAPI.PutReassignmentConfig(context.Background(), identityId).XSailPointExperimental(xSailPointExperimental).ConfigurationItemRequest(configurationItemRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkReassignmentAPI.PutReassignmentConfig``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PutReassignmentConfig`: ConfigurationItemResponse
          fmt.Fprintf(os.Stdout, "Response from `WorkReassignmentAPI.PutReassignmentConfig`: %v\n", resp)
        }
- path: /reassignment-configurations/tenant-config
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/work-reassignment#put-tenant-configuration
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          xSailPointExperimental := `true` // string | Use this header to enable this experimental API. (default to "true") # string | Use this header to enable this experimental API. (default to "true")
           tenantconfigurationrequest := []byte(`{
          "configDetails" : {
            "disabled" : true
          }
        }`) // TenantConfigurationRequest | 

          
          var tenantConfigurationRequest v2025.TenantConfigurationRequest
          if err := json.Unmarshal(tenantconfigurationrequest, &tenantConfigurationRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkReassignmentAPI.PutTenantConfiguration(context.Background()).XSailPointExperimental(xSailPointExperimental).TenantConfigurationRequest(tenantConfigurationRequest).Execute()
          //resp, r, err := apiClient.V2025.WorkReassignmentAPI.PutTenantConfiguration(context.Background()).XSailPointExperimental(xSailPointExperimental).TenantConfigurationRequest(tenantConfigurationRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkReassignmentAPI.PutTenantConfiguration``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PutTenantConfiguration`: TenantConfigurationResponse
          fmt.Fprintf(os.Stdout, "Response from `WorkReassignmentAPI.PutTenantConfiguration`: %v\n", resp)
        }
- path: /workflow-executions/{id}/cancel
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/workflows#cancel-workflow-execution
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `c17bea3a-574d-453c-9e04-4365fbf5af0b` // string | The workflow execution ID # string | The workflow execution ID

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.WorkflowsAPI.CancelWorkflowExecution(context.Background(), id).Execute()
          //r, err := apiClient.V2025.WorkflowsAPI.CancelWorkflowExecution(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkflowsAPI.CancelWorkflowExecution``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /workflows/execute/external/{id}
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/workflows#create-external-execute-workflow
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `c17bea3a-574d-453c-9e04-4365fbf5af0b` // string | Id of the workflow # string | Id of the workflow
           createexternalexecuteworkflowrequest := []byte(``) // CreateExternalExecuteWorkflowRequest |  (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkflowsAPI.CreateExternalExecuteWorkflow(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.WorkflowsAPI.CreateExternalExecuteWorkflow(context.Background(), id).CreateExternalExecuteWorkflowRequest(createExternalExecuteWorkflowRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkflowsAPI.CreateExternalExecuteWorkflow``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateExternalExecuteWorkflow`: CreateExternalExecuteWorkflow200Response
          fmt.Fprintf(os.Stdout, "Response from `WorkflowsAPI.CreateExternalExecuteWorkflow`: %v\n", resp)
        }
- path: /workflows
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/workflows#create-workflow
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
           createworkflowrequest := []byte(`{name=Send Email, owner={type=IDENTITY, id=2c91808568c529c60168cca6f90c1313, name=William Wilson}, description=Send an email to the identity who's attributes changed., definition={start=Send Email Test, steps={Send Email={actionId=sp:send-email, attributes={body=This is a test, from=sailpoint@sailpoint.com, recipientId.$=$.identity.id, subject=test}, nextStep=success, selectResult=null, type=action}, success={type=success}}}, enabled=false, trigger={type=EVENT, attributes={id=idn:identity-attributes-changed, filter=$.changes[?(@.attribute == 'manager')]}}}`) // CreateWorkflowRequest | 

          
          var createWorkflowRequest v2025.CreateWorkflowRequest
          if err := json.Unmarshal(createworkflowrequest, &createWorkflowRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkflowsAPI.CreateWorkflow(context.Background()).CreateWorkflowRequest(createWorkflowRequest).Execute()
          //resp, r, err := apiClient.V2025.WorkflowsAPI.CreateWorkflow(context.Background()).CreateWorkflowRequest(createWorkflowRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkflowsAPI.CreateWorkflow``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateWorkflow`: Workflow
          fmt.Fprintf(os.Stdout, "Response from `WorkflowsAPI.CreateWorkflow`: %v\n", resp)
        }
- path: /workflows/{id}/external/oauth-clients
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/workflows#create-workflow-external-trigger
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `c17bea3a-574d-453c-9e04-4365fbf5af0b` // string | Id of the workflow # string | Id of the workflow

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkflowsAPI.CreateWorkflowExternalTrigger(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.WorkflowsAPI.CreateWorkflowExternalTrigger(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkflowsAPI.CreateWorkflowExternalTrigger``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `CreateWorkflowExternalTrigger`: WorkflowOAuthClient
          fmt.Fprintf(os.Stdout, "Response from `WorkflowsAPI.CreateWorkflowExternalTrigger`: %v\n", resp)
        }
- path: /workflows/{id}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/workflows#delete-workflow
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `c17bea3a-574d-453c-9e04-4365fbf5af0b` // string | Id of the Workflow # string | Id of the Workflow

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          r, err := apiClient.V2025.WorkflowsAPI.DeleteWorkflow(context.Background(), id).Execute()
          //r, err := apiClient.V2025.WorkflowsAPI.DeleteWorkflow(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkflowsAPI.DeleteWorkflow``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
        }
- path: /workflows/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/workflows#get-workflow
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `c17bea3a-574d-453c-9e04-4365fbf5af0b` // string | Id of the workflow # string | Id of the workflow

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkflowsAPI.GetWorkflow(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.WorkflowsAPI.GetWorkflow(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkflowsAPI.GetWorkflow``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetWorkflow`: Workflow
          fmt.Fprintf(os.Stdout, "Response from `WorkflowsAPI.GetWorkflow`: %v\n", resp)
        }
- path: /workflow-executions/{id}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/workflows#get-workflow-execution
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `c17bea3a-574d-453c-9e04-4365fbf5af0b` // string | Workflow execution ID. # string | Workflow execution ID.

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkflowsAPI.GetWorkflowExecution(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.WorkflowsAPI.GetWorkflowExecution(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkflowsAPI.GetWorkflowExecution``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetWorkflowExecution`: map[string]interface{}
          fmt.Fprintf(os.Stdout, "Response from `WorkflowsAPI.GetWorkflowExecution`: %v\n", resp)
        }
- path: /workflow-executions/{id}/history
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/workflows#get-workflow-execution-history
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `c17bea3a-574d-453c-9e04-4365fbf5af0b` // string | Id of the workflow execution # string | Id of the workflow execution

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkflowsAPI.GetWorkflowExecutionHistory(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.WorkflowsAPI.GetWorkflowExecutionHistory(context.Background(), id).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkflowsAPI.GetWorkflowExecutionHistory``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetWorkflowExecutionHistory`: []WorkflowExecutionEvent
          fmt.Fprintf(os.Stdout, "Response from `WorkflowsAPI.GetWorkflowExecutionHistory`: %v\n", resp)
        }
- path: /workflows/{id}/executions
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/workflows#get-workflow-executions
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `c17bea3a-574d-453c-9e04-4365fbf5af0b` // string | Workflow ID. # string | Workflow ID.
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          filters := `status eq "Failed"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **start_time**: *eq, lt, le, gt, ge*  **status**: *eq* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **start_time**: *eq, lt, le, gt, ge*  **status**: *eq* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkflowsAPI.GetWorkflowExecutions(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.WorkflowsAPI.GetWorkflowExecutions(context.Background(), id).Limit(limit).Offset(offset).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkflowsAPI.GetWorkflowExecutions``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GetWorkflowExecutions`: []WorkflowExecution
          fmt.Fprintf(os.Stdout, "Response from `WorkflowsAPI.GetWorkflowExecutions`: %v\n", resp)
        }
- path: /workflow-library
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/workflows#list-complete-workflow-library
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkflowsAPI.ListCompleteWorkflowLibrary(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.WorkflowsAPI.ListCompleteWorkflowLibrary(context.Background()).Limit(limit).Offset(offset).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkflowsAPI.ListCompleteWorkflowLibrary``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListCompleteWorkflowLibrary`: []ListCompleteWorkflowLibrary200ResponseInner
          fmt.Fprintf(os.Stdout, "Response from `WorkflowsAPI.ListCompleteWorkflowLibrary`: %v\n", resp)
        }
- path: /workflow-library/actions
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/workflows#list-workflow-library-actions
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          filters := `id eq "sp:create-campaign"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkflowsAPI.ListWorkflowLibraryActions(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.WorkflowsAPI.ListWorkflowLibraryActions(context.Background()).Limit(limit).Offset(offset).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkflowsAPI.ListWorkflowLibraryActions``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListWorkflowLibraryActions`: []WorkflowLibraryAction
          fmt.Fprintf(os.Stdout, "Response from `WorkflowsAPI.ListWorkflowLibraryActions`: %v\n", resp)
        }
- path: /workflow-library/operators
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/workflows#list-workflow-library-operators
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkflowsAPI.ListWorkflowLibraryOperators(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.WorkflowsAPI.ListWorkflowLibraryOperators(context.Background()).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkflowsAPI.ListWorkflowLibraryOperators``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListWorkflowLibraryOperators`: []WorkflowLibraryOperator
          fmt.Fprintf(os.Stdout, "Response from `WorkflowsAPI.ListWorkflowLibraryOperators`: %v\n", resp)
        }
- path: /workflow-library/triggers
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/workflows#list-workflow-library-triggers
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          limit := 250 // int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int32 | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
          offset := 0 // int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int32 | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
          filters := `id eq "idn:identity-attributes-changed"` // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq* (optional) # string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq* (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkflowsAPI.ListWorkflowLibraryTriggers(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.WorkflowsAPI.ListWorkflowLibraryTriggers(context.Background()).Limit(limit).Offset(offset).Filters(filters).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkflowsAPI.ListWorkflowLibraryTriggers``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListWorkflowLibraryTriggers`: []WorkflowLibraryTrigger
          fmt.Fprintf(os.Stdout, "Response from `WorkflowsAPI.ListWorkflowLibraryTriggers`: %v\n", resp)
        }
- path: /workflows
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/workflows#list-workflows
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkflowsAPI.ListWorkflows(context.Background()).Execute()
          //resp, r, err := apiClient.V2025.WorkflowsAPI.ListWorkflows(context.Background()).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkflowsAPI.ListWorkflows``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `ListWorkflows`: []Workflow
          fmt.Fprintf(os.Stdout, "Response from `WorkflowsAPI.ListWorkflows`: %v\n", resp)
        }
- path: /workflows/{id}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/workflows#patch-workflow
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `c17bea3a-574d-453c-9e04-4365fbf5af0b` // string | Id of the Workflow # string | Id of the Workflow
          jsonpatchoperation := []byte(`[{op=replace, path=/name, value=Send Email}, {op=replace, path=/owner, value={type=IDENTITY, id=2c91808568c529c60168cca6f90c1313, name=William Wilson}}, {op=replace, path=/description, value=Send an email to the identity who's attributes changed.}, {op=replace, path=/enabled, value=false}, {op=replace, path=/definition, value={start=Send Email Test, steps={Send Email={actionId=sp:send-email, attributes={body=This is a test, from=sailpoint@sailpoint.com, recipientId.$=$.identity.id, subject=test}, nextStep=success, selectResult=null, type=action}, success={type=success}}}}, {op=replace, path=/trigger, value={type=EVENT, attributes={id=idn:identity-attributes-changed}}}]`) // []JsonPatchOperation | 

          
          var jsonPatchOperation []v2025.JsonPatchOperation
          if err := json.Unmarshal(jsonpatchoperation, &jsonPatchOperation); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkflowsAPI.PatchWorkflow(context.Background(), id).JsonPatchOperation(jsonPatchOperation).Execute()
          //resp, r, err := apiClient.V2025.WorkflowsAPI.PatchWorkflow(context.Background(), id).JsonPatchOperation(jsonPatchOperation).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkflowsAPI.PatchWorkflow``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PatchWorkflow`: Workflow
          fmt.Fprintf(os.Stdout, "Response from `WorkflowsAPI.PatchWorkflow`: %v\n", resp)
        }
- path: /workflows/{id}
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/workflows#put-workflow
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `c17bea3a-574d-453c-9e04-4365fbf5af0b` // string | Id of the Workflow # string | Id of the Workflow
           workflowbody := []byte(`{
          "owner" : {
            "name" : "William Wilson",
            "id" : "2c91808568c529c60168cca6f90c1313",
            "type" : "IDENTITY"
          },
          "name" : "Send Email",
          "description" : "Send an email to the identity who's attributes changed.",
          "definition" : {
            "start" : "Send Email Test",
            "steps" : {
              "Send Email" : {
                "actionId" : "sp:send-email",
                "attributes" : {
                  "body" : "This is a test",
                  "from" : "sailpoint@sailpoint.com",
                  "recipientId.$" : "$.identity.id",
                  "subject" : "test"
                },
                "nextStep" : "success",
                "type" : "ACTION"
              },
              "success" : {
                "type" : "success"
              }
            }
          },
          "trigger" : {
            "displayName" : "displayName",
            "attributes" : "{}",
            "type" : "EVENT"
          },
          "enabled" : false
        }`) // WorkflowBody | 

          
          var workflowBody v2025.WorkflowBody
          if err := json.Unmarshal(workflowbody, &workflowBody); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkflowsAPI.PutWorkflow(context.Background(), id).WorkflowBody(workflowBody).Execute()
          //resp, r, err := apiClient.V2025.WorkflowsAPI.PutWorkflow(context.Background(), id).WorkflowBody(workflowBody).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkflowsAPI.PutWorkflow``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `PutWorkflow`: Workflow
          fmt.Fprintf(os.Stdout, "Response from `WorkflowsAPI.PutWorkflow`: %v\n", resp)
        }
- path: /workflows/execute/external/{id}/test
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/workflows#test-external-execute-workflow
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `c17bea3a-574d-453c-9e04-4365fbf5af0b` // string | Id of the workflow # string | Id of the workflow
           testexternalexecuteworkflowrequest := []byte(``) // TestExternalExecuteWorkflowRequest |  (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkflowsAPI.TestExternalExecuteWorkflow(context.Background(), id).Execute()
          //resp, r, err := apiClient.V2025.WorkflowsAPI.TestExternalExecuteWorkflow(context.Background(), id).TestExternalExecuteWorkflowRequest(testExternalExecuteWorkflowRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkflowsAPI.TestExternalExecuteWorkflow``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `TestExternalExecuteWorkflow`: TestExternalExecuteWorkflow200Response
          fmt.Fprintf(os.Stdout, "Response from `WorkflowsAPI.TestExternalExecuteWorkflow`: %v\n", resp)
        }
- path: /workflows/{id}/test
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go/v2025/methods/workflows#test-workflow
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
             "encoding/json"
            v2025 "github.com/sailpoint-oss/golang-sdk/v2/api_v2025"
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          id := `c17bea3a-574d-453c-9e04-4365fbf5af0b` // string | Id of the workflow # string | Id of the workflow
           testworkflowrequest := []byte(`{input={identity={id=ee769173319b41d19ccec6cea52f237b, name=john.doe, type=IDENTITY}, changes=[{attribute=department, oldValue=sales, newValue=marketing}, {attribute=manager, oldValue={id=ee769173319b41d19ccec6c235423237b, name=nice.guy, type=IDENTITY}, newValue={id=ee769173319b41d19ccec6c235423236c, name=mean.guy, type=IDENTITY}}, {attribute=email, oldValue=john.doe@hotmail.com, newValue=john.doe@gmail.com}]}}`) // TestWorkflowRequest | 

          
          var testWorkflowRequest v2025.TestWorkflowRequest
          if err := json.Unmarshal(testworkflowrequest, &testWorkflowRequest); err != nil {
            fmt.Println("Error:", err)
            return
          }
          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient.V2025.WorkflowsAPI.TestWorkflow(context.Background(), id).TestWorkflowRequest(testWorkflowRequest).Execute()
          //resp, r, err := apiClient.V2025.WorkflowsAPI.TestWorkflow(context.Background(), id).TestWorkflowRequest(testWorkflowRequest).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `WorkflowsAPI.TestWorkflow``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `TestWorkflow`: TestWorkflow200Response
          fmt.Fprintf(os.Stdout, "Response from `WorkflowsAPI.TestWorkflow`: %v\n", resp)
        }
